// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;

/**
 * The RealtimeResponseUsageInputTokenDetails model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class RealtimeResponseUsageInputTokenDetails
    implements JsonSerializable<RealtimeResponseUsageInputTokenDetails> {
    /*
     * The cached_tokens property.
     */
    @Metadata(generated = true)
    private final int cachedTokens;

    /*
     * The text_tokens property.
     */
    @Metadata(generated = true)
    private final int textTokens;

    /*
     * The audio_tokens property.
     */
    @Metadata(generated = true)
    private final int audioTokens;

    /**
     * Creates an instance of RealtimeResponseUsageInputTokenDetails class.
     * 
     * @param cachedTokens the cachedTokens value to set.
     * @param textTokens the textTokens value to set.
     * @param audioTokens the audioTokens value to set.
     */
    @Metadata(generated = true)
    private RealtimeResponseUsageInputTokenDetails(int cachedTokens, int textTokens, int audioTokens) {
        this.cachedTokens = cachedTokens;
        this.textTokens = textTokens;
        this.audioTokens = audioTokens;
    }

    /**
     * Get the cachedTokens property: The cached_tokens property.
     * 
     * @return the cachedTokens value.
     */
    @Metadata(generated = true)
    public int getCachedTokens() {
        return this.cachedTokens;
    }

    /**
     * Get the textTokens property: The text_tokens property.
     * 
     * @return the textTokens value.
     */
    @Metadata(generated = true)
    public int getTextTokens() {
        return this.textTokens;
    }

    /**
     * Get the audioTokens property: The audio_tokens property.
     * 
     * @return the audioTokens value.
     */
    @Metadata(generated = true)
    public int getAudioTokens() {
        return this.audioTokens;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("cached_tokens", this.cachedTokens);
        jsonWriter.writeIntField("text_tokens", this.textTokens);
        jsonWriter.writeIntField("audio_tokens", this.audioTokens);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RealtimeResponseUsageInputTokenDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RealtimeResponseUsageInputTokenDetails if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RealtimeResponseUsageInputTokenDetails.
     */
    @Metadata(generated = true)
    public static RealtimeResponseUsageInputTokenDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int cachedTokens = 0;
            int textTokens = 0;
            int audioTokens = 0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cached_tokens".equals(fieldName)) {
                    cachedTokens = reader.getInt();
                } else if ("text_tokens".equals(fieldName)) {
                    textTokens = reader.getInt();
                } else if ("audio_tokens".equals(fieldName)) {
                    audioTokens = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }
            return new RealtimeResponseUsageInputTokenDetails(cachedTokens, textTokens, audioTokens);
        });
    }
}
