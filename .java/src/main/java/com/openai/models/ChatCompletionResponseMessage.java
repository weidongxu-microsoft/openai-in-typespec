// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A chat completion message generated by the model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class ChatCompletionResponseMessage implements JsonSerializable<ChatCompletionResponseMessage> {
    /*
     * The contents of the message.
     */
    @Metadata(generated = true)
    private final String content;

    /*
     * The refusal message generated by the model.
     */
    @Metadata(generated = true)
    private final String refusal;

    /*
     * The tool_calls property.
     */
    @Metadata(generated = true)
    private List<ChatCompletionMessageToolCall> toolCalls;

    /*
     * The role of the author of this message.
     */
    @Metadata(generated = true)
    private final String role = "assistant";

    /*
     * Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated
     * by the model.
     */
    @Metadata(generated = true)
    private ChatCompletionResponseMessageFunctionCall functionCall;

    /**
     * Creates an instance of ChatCompletionResponseMessage class.
     * 
     * @param content the content value to set.
     * @param refusal the refusal value to set.
     */
    @Metadata(generated = true)
    private ChatCompletionResponseMessage(String content, String refusal) {
        this.content = content;
        this.refusal = refusal;
    }

    /**
     * Get the content property: The contents of the message.
     * 
     * @return the content value.
     */
    @Metadata(generated = true)
    public String getContent() {
        return this.content;
    }

    /**
     * Get the refusal property: The refusal message generated by the model.
     * 
     * @return the refusal value.
     */
    @Metadata(generated = true)
    public String getRefusal() {
        return this.refusal;
    }

    /**
     * Get the toolCalls property: The tool_calls property.
     * 
     * @return the toolCalls value.
     */
    @Metadata(generated = true)
    public List<ChatCompletionMessageToolCall> getToolCalls() {
        return this.toolCalls;
    }

    /**
     * Get the role property: The role of the author of this message.
     * 
     * @return the role value.
     */
    @Metadata(generated = true)
    public String getRole() {
        return this.role;
    }

    /**
     * Get the functionCall property: Deprecated and replaced by `tool_calls`. The name and arguments of a function that
     * should be called, as generated by the model.
     * 
     * @return the functionCall value.
     */
    @Metadata(generated = true)
    public ChatCompletionResponseMessageFunctionCall getFunctionCall() {
        return this.functionCall;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("content", this.content);
        jsonWriter.writeStringField("refusal", this.refusal);
        jsonWriter.writeStringField("role", this.role);
        jsonWriter.writeArrayField("tool_calls", this.toolCalls, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("function_call", this.functionCall);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatCompletionResponseMessage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatCompletionResponseMessage if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChatCompletionResponseMessage.
     */
    @Metadata(generated = true)
    public static ChatCompletionResponseMessage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String content = null;
            String refusal = null;
            List<ChatCompletionMessageToolCall> toolCalls = null;
            ChatCompletionResponseMessageFunctionCall functionCall = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("content".equals(fieldName)) {
                    content = reader.getString();
                } else if ("refusal".equals(fieldName)) {
                    refusal = reader.getString();
                } else if ("tool_calls".equals(fieldName)) {
                    toolCalls = reader.readArray(reader1 -> ChatCompletionMessageToolCall.fromJson(reader1));
                } else if ("function_call".equals(fieldName)) {
                    functionCall = ChatCompletionResponseMessageFunctionCall.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            ChatCompletionResponseMessage deserializedChatCompletionResponseMessage
                = new ChatCompletionResponseMessage(content, refusal);
            deserializedChatCompletionResponseMessage.toolCalls = toolCalls;
            deserializedChatCompletionResponseMessage.functionCall = functionCall;

            return deserializedChatCompletionResponseMessage;
        });
    }
}
