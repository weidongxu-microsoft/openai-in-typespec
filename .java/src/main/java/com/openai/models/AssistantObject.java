// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import io.clientcore.core.util.binarydata.BinaryData;
import java.io.IOException;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.List;
import java.util.Map;

/**
 * Represents an `assistant` that can call the model and use tools.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class AssistantObject implements JsonSerializable<AssistantObject> {
    /*
     * The identifier, which can be referenced in API endpoints.
     */
    @Metadata(generated = true)
    private final String id;

    /*
     * The object type, which is always `assistant`.
     */
    @Metadata(generated = true)
    private final String object = "assistant";

    /*
     * The Unix timestamp (in seconds) for when the assistant was created.
     */
    @Metadata(generated = true)
    private final long createdAt;

    /*
     * The name of the assistant. The maximum length is 256 characters.
     */
    @Metadata(generated = true)
    private final String name;

    /*
     * The description of the assistant. The maximum length is 512 characters.
     */
    @Metadata(generated = true)
    private final String description;

    /*
     * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your
     * available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
     */
    @Metadata(generated = true)
    private final String model;

    /*
     * The system instructions that the assistant uses. The maximum length is 256,000 characters.
     */
    @Metadata(generated = true)
    private final String instructions;

    /*
     * A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types
     * `code_interpreter`, `file_search`, or `function`.
     */
    @Metadata(generated = true)
    private final List<AssistantToolDefinition> tools;

    /*
     * A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For
     * example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of
     * vector store IDs.
     */
    @Metadata(generated = true)
    private AssistantObjectToolResources toolResources;

    /*
     * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional
     * information about the object in a structured format. Keys can be a maximum of 64 characters long and values can
     * be a maximum of 512 characters long.
     */
    @Metadata(generated = true)
    private final Map<String, String> metadata;

    /*
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while
     * lower values like 0.2 will make it more focused and deterministic.
     */
    @Metadata(generated = true)
    private Double temperature;

    /*
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of
     * the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are
     * considered.
     * 
     * We generally recommend altering this or temperature but not both.
     */
    @Metadata(generated = true)
    private Double topP;

    /*
     * The response_format property.
     */
    @Metadata(generated = true)
    private BinaryData responseFormat;

    /**
     * Creates an instance of AssistantObject class.
     * 
     * @param id the id value to set.
     * @param createdAt the createdAt value to set.
     * @param name the name value to set.
     * @param description the description value to set.
     * @param model the model value to set.
     * @param instructions the instructions value to set.
     * @param tools the tools value to set.
     * @param metadata the metadata value to set.
     */
    @Metadata(generated = true)
    private AssistantObject(String id, OffsetDateTime createdAt, String name, String description, String model,
        String instructions, List<AssistantToolDefinition> tools, Map<String, String> metadata) {
        this.id = id;
        if (createdAt == null) {
            this.createdAt = 0L;
        } else {
            this.createdAt = createdAt.toEpochSecond();
        }
        this.name = name;
        this.description = description;
        this.model = model;
        this.instructions = instructions;
        this.tools = tools;
        this.metadata = metadata;
    }

    /**
     * Get the id property: The identifier, which can be referenced in API endpoints.
     * 
     * @return the id value.
     */
    @Metadata(generated = true)
    public String getId() {
        return this.id;
    }

    /**
     * Get the object property: The object type, which is always `assistant`.
     * 
     * @return the object value.
     */
    @Metadata(generated = true)
    public String getObject() {
        return this.object;
    }

    /**
     * Get the createdAt property: The Unix timestamp (in seconds) for when the assistant was created.
     * 
     * @return the createdAt value.
     */
    @Metadata(generated = true)
    public OffsetDateTime getCreatedAt() {
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.createdAt), ZoneOffset.UTC);
    }

    /**
     * Get the name property: The name of the assistant. The maximum length is 256 characters.
     * 
     * @return the name value.
     */
    @Metadata(generated = true)
    public String getName() {
        return this.name;
    }

    /**
     * Get the description property: The description of the assistant. The maximum length is 512 characters.
     * 
     * @return the description value.
     */
    @Metadata(generated = true)
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the model property: ID of the model to use. You can use the [List models](/docs/api-reference/models/list)
     * API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of
     * them.
     * 
     * @return the model value.
     */
    @Metadata(generated = true)
    public String getModel() {
        return this.model;
    }

    /**
     * Get the instructions property: The system instructions that the assistant uses. The maximum length is 256,000
     * characters.
     * 
     * @return the instructions value.
     */
    @Metadata(generated = true)
    public String getInstructions() {
        return this.instructions;
    }

    /**
     * Get the tools property: A list of tool enabled on the assistant. There can be a maximum of 128 tools per
     * assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
     * 
     * @return the tools value.
     */
    @Metadata(generated = true)
    public List<AssistantToolDefinition> getTools() {
        return this.tools;
    }

    /**
     * Get the toolResources property: A set of resources that are used by the assistant's tools. The resources are
     * specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the
     * `file_search` tool requires a list of vector store IDs.
     * 
     * @return the toolResources value.
     */
    @Metadata(generated = true)
    public AssistantObjectToolResources getToolResources() {
        return this.toolResources;
    }

    /**
     * Get the metadata property: Set of 16 key-value pairs that can be attached to an object. This can be useful for
     * storing additional information about the object in a structured format. Keys can be a maximum of 64 characters
     * long and values can be a maximum of 512 characters long.
     * 
     * @return the metadata value.
     */
    @Metadata(generated = true)
    public Map<String, String> getMetadata() {
        return this.metadata;
    }

    /**
     * Get the temperature property: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make
     * the output more random, while lower values like 0.2 will make it more focused and deterministic.
     * 
     * @return the temperature value.
     */
    @Metadata(generated = true)
    public Double getTemperature() {
        return this.temperature;
    }

    /**
     * Get the topP property: An alternative to sampling with temperature, called nucleus sampling, where the model
     * considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top
     * 10% probability mass are considered.
     * 
     * We generally recommend altering this or temperature but not both.
     * 
     * @return the topP value.
     */
    @Metadata(generated = true)
    public Double getTopP() {
        return this.topP;
    }

    /**
     * Get the responseFormat property: The response_format property.
     * 
     * @return the responseFormat value.
     */
    @Metadata(generated = true)
    public BinaryData getResponseFormat() {
        return this.responseFormat;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("object", this.object);
        jsonWriter.writeLongField("created_at", this.createdAt);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("model", this.model);
        jsonWriter.writeStringField("instructions", this.instructions);
        jsonWriter.writeArrayField("tools", this.tools, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("tool_resources", this.toolResources);
        jsonWriter.writeNumberField("temperature", this.temperature);
        jsonWriter.writeNumberField("top_p", this.topP);
        if (this.responseFormat != null) {
            jsonWriter.writeUntypedField("response_format", this.responseFormat.toObject(Object.class));
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssistantObject from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssistantObject if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AssistantObject.
     */
    @Metadata(generated = true)
    public static AssistantObject fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            OffsetDateTime createdAt = null;
            String name = null;
            String description = null;
            String model = null;
            String instructions = null;
            List<AssistantToolDefinition> tools = null;
            Map<String, String> metadata = null;
            AssistantObjectToolResources toolResources = null;
            Double temperature = null;
            Double topP = null;
            BinaryData responseFormat = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("created_at".equals(fieldName)) {
                    createdAt = OffsetDateTime.ofInstant(Instant.ofEpochSecond(reader.getLong()), ZoneOffset.UTC);
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("model".equals(fieldName)) {
                    model = reader.getString();
                } else if ("instructions".equals(fieldName)) {
                    instructions = reader.getString();
                } else if ("tools".equals(fieldName)) {
                    tools = reader.readArray(reader1 -> AssistantToolDefinition.fromJson(reader1));
                } else if ("metadata".equals(fieldName)) {
                    metadata = reader.readMap(reader1 -> reader1.getString());
                } else if ("tool_resources".equals(fieldName)) {
                    toolResources = AssistantObjectToolResources.fromJson(reader);
                } else if ("temperature".equals(fieldName)) {
                    temperature = reader.getNullable(JsonReader::getDouble);
                } else if ("top_p".equals(fieldName)) {
                    topP = reader.getNullable(JsonReader::getDouble);
                } else if ("response_format".equals(fieldName)) {
                    responseFormat
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else {
                    reader.skipChildren();
                }
            }
            AssistantObject deserializedAssistantObject
                = new AssistantObject(id, createdAt, name, description, model, instructions, tools, metadata);
            deserializedAssistantObject.toolResources = toolResources;
            deserializedAssistantObject.temperature = temperature;
            deserializedAssistantObject.topP = topP;
            deserializedAssistantObject.responseFormat = responseFormat;

            return deserializedAssistantObject;
        });
    }
}
