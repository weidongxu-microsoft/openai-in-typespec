// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The ModifyThreadRequest model.
 */
@Fluent
public final class ModifyThreadRequest implements JsonSerializable<ModifyThreadRequest> {
    /*
     * A set of resources that are made available to the assistant's tools in this thread. The resources are specific to
     * the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search`
     * tool requires a list of vector store IDs.
     */
    @Generated
    private ModifyThreadRequestToolResources toolResources;

    /*
     * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional
     * information about the object in a structured format. Keys can be a maximum of 64 characters long and values can
     * be a maximum of 512 characters long.
     */
    @Generated
    private Map<String, String> metadata;

    /**
     * Creates an instance of ModifyThreadRequest class.
     */
    @Generated
    public ModifyThreadRequest() {
    }

    /**
     * Get the toolResources property: A set of resources that are made available to the assistant's tools in this
     * thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list
     * of file IDs, while the `file_search` tool requires a list of vector store IDs.
     * 
     * @return the toolResources value.
     */
    @Generated
    public ModifyThreadRequestToolResources getToolResources() {
        return this.toolResources;
    }

    /**
     * Set the toolResources property: A set of resources that are made available to the assistant's tools in this
     * thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list
     * of file IDs, while the `file_search` tool requires a list of vector store IDs.
     * 
     * @param toolResources the toolResources value to set.
     * @return the ModifyThreadRequest object itself.
     */
    @Generated
    public ModifyThreadRequest setToolResources(ModifyThreadRequestToolResources toolResources) {
        this.toolResources = toolResources;
        return this;
    }

    /**
     * Get the metadata property: Set of 16 key-value pairs that can be attached to an object. This can be useful for
     * storing additional information about the object in a structured format. Keys can be a maximum of 64 characters
     * long and values can be a maximum of 512 characters long.
     * 
     * @return the metadata value.
     */
    @Generated
    public Map<String, String> getMetadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Set of 16 key-value pairs that can be attached to an object. This can be useful for
     * storing additional information about the object in a structured format. Keys can be a maximum of 64 characters
     * long and values can be a maximum of 512 characters long.
     * 
     * @param metadata the metadata value to set.
     * @return the ModifyThreadRequest object itself.
     */
    @Generated
    public ModifyThreadRequest setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("tool_resources", this.toolResources);
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ModifyThreadRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ModifyThreadRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ModifyThreadRequest.
     */
    @Generated
    public static ModifyThreadRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ModifyThreadRequest deserializedModifyThreadRequest = new ModifyThreadRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tool_resources".equals(fieldName)) {
                    deserializedModifyThreadRequest.toolResources = ModifyThreadRequestToolResources.fromJson(reader);
                } else if ("metadata".equals(fieldName)) {
                    Map<String, String> metadata = reader.readMap(reader1 -> reader1.getString());
                    deserializedModifyThreadRequest.metadata = metadata;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedModifyThreadRequest;
        });
    }
}
