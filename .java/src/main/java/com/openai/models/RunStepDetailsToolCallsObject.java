// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Details of the tool call.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class RunStepDetailsToolCallsObject extends RunStepObjectStepDetails {
    /*
     * The discriminated type identifier for the details object.
     */
    @Metadata(generated = true)
    private String type = "tool_calls";

    /*
     * An array of tool calls the run step was involved in. These can be associated with one of three types of tools:
     * `code_interpreter`, `file_search`, or `function`.
     */
    @Metadata(generated = true)
    private final List<RunStepDetailsToolCallsObjectToolCallsObject> toolCalls;

    /**
     * Creates an instance of RunStepDetailsToolCallsObject class.
     * 
     * @param toolCalls the toolCalls value to set.
     */
    @Metadata(generated = true)
    private RunStepDetailsToolCallsObject(List<RunStepDetailsToolCallsObjectToolCallsObject> toolCalls) {
        this.toolCalls = toolCalls;
    }

    /**
     * Get the type property: The discriminated type identifier for the details object.
     * 
     * @return the type value.
     */
    @Metadata(generated = true)
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the toolCalls property: An array of tool calls the run step was involved in. These can be associated with one
     * of three types of tools: `code_interpreter`, `file_search`, or `function`.
     * 
     * @return the toolCalls value.
     */
    @Metadata(generated = true)
    public List<RunStepDetailsToolCallsObjectToolCallsObject> getToolCalls() {
        return this.toolCalls;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("tool_calls", this.toolCalls, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RunStepDetailsToolCallsObject from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RunStepDetailsToolCallsObject if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RunStepDetailsToolCallsObject.
     */
    @Metadata(generated = true)
    public static RunStepDetailsToolCallsObject fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<RunStepDetailsToolCallsObjectToolCallsObject> toolCalls = null;
            String type = "tool_calls";
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tool_calls".equals(fieldName)) {
                    toolCalls
                        = reader.readArray(reader1 -> RunStepDetailsToolCallsObjectToolCallsObject.fromJson(reader1));
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            RunStepDetailsToolCallsObject deserializedRunStepDetailsToolCallsObject
                = new RunStepDetailsToolCallsObject(toolCalls);
            deserializedRunStepDetailsToolCallsObject.type = type;

            return deserializedRunStepDetailsToolCallsObject;
        });
    }
}
