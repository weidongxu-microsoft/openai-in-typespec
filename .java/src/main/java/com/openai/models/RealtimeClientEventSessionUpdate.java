// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;

/**
 * Send this event to update the sessionâ€™s default configuration.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class RealtimeClientEventSessionUpdate extends RealtimeClientEvent {
    /*
     * The type property.
     */
    @Metadata(generated = true)
    private RealtimeClientEventType type = RealtimeClientEventType.SESSION_UPDATE;

    /*
     * Session configuration to update.
     */
    @Metadata(generated = true)
    private final RealtimeRequestSession session;

    /**
     * Creates an instance of RealtimeClientEventSessionUpdate class.
     * 
     * @param session the session value to set.
     */
    @Metadata(generated = true)
    public RealtimeClientEventSessionUpdate(RealtimeRequestSession session) {
        this.session = session;
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Metadata(generated = true)
    @Override
    public RealtimeClientEventType getType() {
        return this.type;
    }

    /**
     * Get the session property: Session configuration to update.
     * 
     * @return the session value.
     */
    @Metadata(generated = true)
    public RealtimeRequestSession getSession() {
        return this.session;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public RealtimeClientEventSessionUpdate setEventId(String eventId) {
        super.setEventId(eventId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event_id", getEventId());
        jsonWriter.writeJsonField("session", this.session);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RealtimeClientEventSessionUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RealtimeClientEventSessionUpdate if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RealtimeClientEventSessionUpdate.
     */
    @Metadata(generated = true)
    public static RealtimeClientEventSessionUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String eventId = null;
            RealtimeRequestSession session = null;
            RealtimeClientEventType type = RealtimeClientEventType.SESSION_UPDATE;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("event_id".equals(fieldName)) {
                    eventId = reader.getString();
                } else if ("session".equals(fieldName)) {
                    session = RealtimeRequestSession.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    type = RealtimeClientEventType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            RealtimeClientEventSessionUpdate deserializedRealtimeClientEventSessionUpdate
                = new RealtimeClientEventSessionUpdate(session);
            deserializedRealtimeClientEventSessionUpdate.setEventId(eventId);
            deserializedRealtimeClientEventSessionUpdate.type = type;

            return deserializedRealtimeClientEventSessionUpdate;
        });
    }
}
