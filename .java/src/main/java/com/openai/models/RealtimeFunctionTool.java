// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import io.clientcore.core.util.binarydata.BinaryData;
import java.io.IOException;

/**
 * The definition of a function tool as used by the realtime endpoint.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class RealtimeFunctionTool extends RealtimeTool {
    /*
     * The type property.
     */
    @Metadata(generated = true)
    private RealtimeToolType type = RealtimeToolType.FUNCTION;

    /*
     * The name property.
     */
    @Metadata(generated = true)
    private final String name;

    /*
     * The description property.
     */
    @Metadata(generated = true)
    private String description;

    /*
     * The parameters property.
     */
    @Metadata(generated = true)
    private BinaryData parameters;

    /**
     * Creates an instance of RealtimeFunctionTool class.
     * 
     * @param name the name value to set.
     */
    @Metadata(generated = true)
    public RealtimeFunctionTool(String name) {
        this.name = name;
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Metadata(generated = true)
    @Override
    public RealtimeToolType getType() {
        return this.type;
    }

    /**
     * Get the name property: The name property.
     * 
     * @return the name value.
     */
    @Metadata(generated = true)
    public String getName() {
        return this.name;
    }

    /**
     * Get the description property: The description property.
     * 
     * @return the description value.
     */
    @Metadata(generated = true)
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: The description property.
     * 
     * @param description the description value to set.
     * @return the RealtimeFunctionTool object itself.
     */
    @Metadata(generated = true)
    public RealtimeFunctionTool setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the parameters property: The parameters property.
     * 
     * @return the parameters value.
     */
    @Metadata(generated = true)
    public BinaryData getParameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: The parameters property.
     * 
     * @param parameters the parameters value to set.
     * @return the RealtimeFunctionTool object itself.
     */
    @Metadata(generated = true)
    public RealtimeFunctionTool setParameters(BinaryData parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("description", this.description);
        if (this.parameters != null) {
            jsonWriter.writeUntypedField("parameters", this.parameters.toObject(Object.class));
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RealtimeFunctionTool from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RealtimeFunctionTool if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RealtimeFunctionTool.
     */
    @Metadata(generated = true)
    public static RealtimeFunctionTool fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            RealtimeToolType type = RealtimeToolType.FUNCTION;
            String description = null;
            BinaryData parameters = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = RealtimeToolType.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("parameters".equals(fieldName)) {
                    parameters
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else {
                    reader.skipChildren();
                }
            }
            RealtimeFunctionTool deserializedRealtimeFunctionTool = new RealtimeFunctionTool(name);
            deserializedRealtimeFunctionTool.type = type;
            deserializedRealtimeFunctionTool.description = description;
            deserializedRealtimeFunctionTool.parameters = parameters;

            return deserializedRealtimeFunctionTool;
        });
    }
}
