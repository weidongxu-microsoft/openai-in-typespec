// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import io.clientcore.core.util.binarydata.BinaryData;
import java.io.IOException;

/**
 * The CreateVectorStoreFileRequest model.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class CreateVectorStoreFileRequest implements JsonSerializable<CreateVectorStoreFileRequest> {
    /*
     * A [File](/docs/api-reference/files) ID that the vector store should use. Useful for tools like `file_search` that
     * can access files.
     */
    @Metadata(generated = true)
    private final String fileId;

    /*
     * The chunking_strategy property.
     */
    @Metadata(generated = true)
    private BinaryData chunkingStrategy;

    /**
     * Creates an instance of CreateVectorStoreFileRequest class.
     * 
     * @param fileId the fileId value to set.
     */
    @Metadata(generated = true)
    public CreateVectorStoreFileRequest(String fileId) {
        this.fileId = fileId;
    }

    /**
     * Get the fileId property: A [File](/docs/api-reference/files) ID that the vector store should use. Useful for
     * tools like `file_search` that can access files.
     * 
     * @return the fileId value.
     */
    @Metadata(generated = true)
    public String getFileId() {
        return this.fileId;
    }

    /**
     * Get the chunkingStrategy property: The chunking_strategy property.
     * 
     * @return the chunkingStrategy value.
     */
    @Metadata(generated = true)
    public BinaryData getChunkingStrategy() {
        return this.chunkingStrategy;
    }

    /**
     * Set the chunkingStrategy property: The chunking_strategy property.
     * 
     * @param chunkingStrategy the chunkingStrategy value to set.
     * @return the CreateVectorStoreFileRequest object itself.
     */
    @Metadata(generated = true)
    public CreateVectorStoreFileRequest setChunkingStrategy(BinaryData chunkingStrategy) {
        this.chunkingStrategy = chunkingStrategy;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("file_id", this.fileId);
        if (this.chunkingStrategy != null) {
            jsonWriter.writeUntypedField("chunking_strategy", this.chunkingStrategy.toObject(Object.class));
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateVectorStoreFileRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateVectorStoreFileRequest if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateVectorStoreFileRequest.
     */
    @Metadata(generated = true)
    public static CreateVectorStoreFileRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String fileId = null;
            BinaryData chunkingStrategy = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("file_id".equals(fieldName)) {
                    fileId = reader.getString();
                } else if ("chunking_strategy".equals(fieldName)) {
                    chunkingStrategy
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else {
                    reader.skipChildren();
                }
            }
            CreateVectorStoreFileRequest deserializedCreateVectorStoreFileRequest
                = new CreateVectorStoreFileRequest(fileId);
            deserializedCreateVectorStoreFileRequest.chunkingStrategy = chunkingStrategy;

            return deserializedCreateVectorStoreFileRequest;
        });
    }
}
