// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
// import io.clientcore.core.util.CoreUtils;
import java.io.IOException;
import java.time.Duration;

/**
 * The RealtimeServerVadTurnDetection model.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class RealtimeServerVadTurnDetection extends RealtimeTurnDetection {
    /*
     * The type property.
     */
    @Metadata(generated = true)
    private RealtimeTurnDetectionType type = RealtimeTurnDetectionType.SERVER_VAD;

    /*
     * The threshold property.
     */
    @Metadata(generated = true)
    private Double threshold;

    /*
     * The prefix_padding_ms property.
     */
    @Metadata(generated = true)
    private Duration prefixPaddingMs;

    /*
     * The silence_duration_ms property.
     */
    @Metadata(generated = true)
    private Duration silenceDurationMs;

    /**
     * Creates an instance of RealtimeServerVadTurnDetection class.
     */
    @Metadata(generated = true)
    public RealtimeServerVadTurnDetection() {
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Metadata(generated = true)
    @Override
    public RealtimeTurnDetectionType getType() {
        return this.type;
    }

    /**
     * Get the threshold property: The threshold property.
     * 
     * @return the threshold value.
     */
    @Metadata(generated = true)
    public Double getThreshold() {
        return this.threshold;
    }

    /**
     * Set the threshold property: The threshold property.
     * 
     * @param threshold the threshold value to set.
     * @return the RealtimeServerVadTurnDetection object itself.
     */
    @Metadata(generated = true)
    public RealtimeServerVadTurnDetection setThreshold(Double threshold) {
        this.threshold = threshold;
        return this;
    }

    /**
     * Get the prefixPaddingMs property: The prefix_padding_ms property.
     * 
     * @return the prefixPaddingMs value.
     */
    @Metadata(generated = true)
    public Duration getPrefixPaddingMs() {
        return this.prefixPaddingMs;
    }

    /**
     * Set the prefixPaddingMs property: The prefix_padding_ms property.
     * 
     * @param prefixPaddingMs the prefixPaddingMs value to set.
     * @return the RealtimeServerVadTurnDetection object itself.
     */
    @Metadata(generated = true)
    public RealtimeServerVadTurnDetection setPrefixPaddingMs(Duration prefixPaddingMs) {
        this.prefixPaddingMs = prefixPaddingMs;
        return this;
    }

    /**
     * Get the silenceDurationMs property: The silence_duration_ms property.
     * 
     * @return the silenceDurationMs value.
     */
    @Metadata(generated = true)
    public Duration getSilenceDurationMs() {
        return this.silenceDurationMs;
    }

    /**
     * Set the silenceDurationMs property: The silence_duration_ms property.
     * 
     * @param silenceDurationMs the silenceDurationMs value to set.
     * @return the RealtimeServerVadTurnDetection object itself.
     */
    @Metadata(generated = true)
    public RealtimeServerVadTurnDetection setSilenceDurationMs(Duration silenceDurationMs) {
        this.silenceDurationMs = silenceDurationMs;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeNumberField("threshold", this.threshold);
        // jsonWriter.writeStringField("prefix_padding_ms", CoreUtils.durationToStringWithDays(this.prefixPaddingMs));
        // jsonWriter.writeStringField("silence_duration_ms", CoreUtils.durationToStringWithDays(this.silenceDurationMs));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RealtimeServerVadTurnDetection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RealtimeServerVadTurnDetection if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RealtimeServerVadTurnDetection.
     */
    @Metadata(generated = true)
    public static RealtimeServerVadTurnDetection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RealtimeServerVadTurnDetection deserializedRealtimeServerVadTurnDetection
                = new RealtimeServerVadTurnDetection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedRealtimeServerVadTurnDetection.type
                        = RealtimeTurnDetectionType.fromString(reader.getString());
                } else if ("threshold".equals(fieldName)) {
                    deserializedRealtimeServerVadTurnDetection.threshold = reader.getNullable(JsonReader::getDouble);
                } else if ("prefix_padding_ms".equals(fieldName)) {
                    deserializedRealtimeServerVadTurnDetection.prefixPaddingMs
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("silence_duration_ms".equals(fieldName)) {
                    deserializedRealtimeServerVadTurnDetection.silenceDurationMs
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRealtimeServerVadTurnDetection;
        });
    }
}
