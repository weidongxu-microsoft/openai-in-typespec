// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.List;

/**
 * Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the
 * same shape (unlike the chat endpoint).
 */
@Immutable
public final class CreateCompletionResponse implements JsonSerializable<CreateCompletionResponse> {
    /*
     * A unique identifier for the completion.
     */
    @Generated
    private final String id;

    /*
     * The list of completion choices the model generated for the input prompt.
     */
    @Generated
    private final List<CreateCompletionResponseChoice> choices;

    /*
     * The Unix timestamp (in seconds) of when the completion was created.
     */
    @Generated
    private final long created;

    /*
     * The model used for completion.
     */
    @Generated
    private final String model;

    /*
     * This fingerprint represents the backend configuration that the model runs with.
     * 
     * Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made
     * that might impact determinism.
     */
    @Generated
    private String systemFingerprint;

    /*
     * The object type, which is always "text_completion"
     */
    @Generated
    private final String object = "text_completion";

    /*
     * The usage property.
     */
    @Generated
    private CompletionUsage usage;

    /**
     * Creates an instance of CreateCompletionResponse class.
     * 
     * @param id the id value to set.
     * @param choices the choices value to set.
     * @param created the created value to set.
     * @param model the model value to set.
     */
    @Generated
    private CreateCompletionResponse(String id, List<CreateCompletionResponseChoice> choices, OffsetDateTime created,
        String model) {
        this.id = id;
        this.choices = choices;
        if (created == null) {
            this.created = 0L;
        } else {
            this.created = created.toEpochSecond();
        }
        this.model = model;
    }

    /**
     * Get the id property: A unique identifier for the completion.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the choices property: The list of completion choices the model generated for the input prompt.
     * 
     * @return the choices value.
     */
    @Generated
    public List<CreateCompletionResponseChoice> getChoices() {
        return this.choices;
    }

    /**
     * Get the created property: The Unix timestamp (in seconds) of when the completion was created.
     * 
     * @return the created value.
     */
    @Generated
    public OffsetDateTime getCreated() {
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.created), ZoneOffset.UTC);
    }

    /**
     * Get the model property: The model used for completion.
     * 
     * @return the model value.
     */
    @Generated
    public String getModel() {
        return this.model;
    }

    /**
     * Get the systemFingerprint property: This fingerprint represents the backend configuration that the model runs
     * with.
     * 
     * Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made
     * that might impact determinism.
     * 
     * @return the systemFingerprint value.
     */
    @Generated
    public String getSystemFingerprint() {
        return this.systemFingerprint;
    }

    /**
     * Get the object property: The object type, which is always "text_completion".
     * 
     * @return the object value.
     */
    @Generated
    public String getObject() {
        return this.object;
    }

    /**
     * Get the usage property: The usage property.
     * 
     * @return the usage value.
     */
    @Generated
    public CompletionUsage getUsage() {
        return this.usage;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeArrayField("choices", this.choices, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeLongField("created", this.created);
        jsonWriter.writeStringField("model", this.model);
        jsonWriter.writeStringField("object", this.object);
        jsonWriter.writeStringField("system_fingerprint", this.systemFingerprint);
        jsonWriter.writeJsonField("usage", this.usage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateCompletionResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateCompletionResponse if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateCompletionResponse.
     */
    @Generated
    public static CreateCompletionResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            List<CreateCompletionResponseChoice> choices = null;
            OffsetDateTime created = null;
            String model = null;
            String systemFingerprint = null;
            CompletionUsage usage = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("choices".equals(fieldName)) {
                    choices = reader.readArray(reader1 -> CreateCompletionResponseChoice.fromJson(reader1));
                } else if ("created".equals(fieldName)) {
                    created = OffsetDateTime.ofInstant(Instant.ofEpochSecond(reader.getLong()), ZoneOffset.UTC);
                } else if ("model".equals(fieldName)) {
                    model = reader.getString();
                } else if ("system_fingerprint".equals(fieldName)) {
                    systemFingerprint = reader.getString();
                } else if ("usage".equals(fieldName)) {
                    usage = CompletionUsage.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            CreateCompletionResponse deserializedCreateCompletionResponse
                = new CreateCompletionResponse(id, choices, created, model);
            deserializedCreateCompletionResponse.systemFingerprint = systemFingerprint;
            deserializedCreateCompletionResponse.usage = usage;

            return deserializedCreateCompletionResponse;
        });
    }
}
