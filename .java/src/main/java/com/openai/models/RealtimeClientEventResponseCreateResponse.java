// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import io.clientcore.core.util.binarydata.BinaryData;
import java.io.IOException;
import java.util.List;

/**
 * The RealtimeClientEventResponseCreateResponse model.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class RealtimeClientEventResponseCreateResponse
    implements JsonSerializable<RealtimeClientEventResponseCreateResponse> {
    /*
     * The modalities for the response.
     */
    @Metadata(generated = true)
    private List<String> modalities;

    /*
     * Instructions for the model.
     */
    @Metadata(generated = true)
    private String instructions;

    /*
     * The voice the model uses to respond - one of `alloy`, `echo`, or `shimmer`.
     */
    @Metadata(generated = true)
    private String voice;

    /*
     * The format of output audio.
     */
    @Metadata(generated = true)
    private String outputAudioFormat;

    /*
     * Tools (functions) available to the model.
     */
    @Metadata(generated = true)
    private List<RealtimeTool> tools;

    /*
     * How the model chooses tools.
     */
    @Metadata(generated = true)
    private String toolChoice;

    /*
     * Sampling temperature.
     */
    @Metadata(generated = true)
    private Double temperature;

    /*
     * Maximum number of output tokens for a single assistant response, inclusive of tool calls. Provide an integer
     * between 1 and 4096 to limit output tokens, or "inf" for the maximum available tokens for a given model. Defaults
     * to "inf".
     */
    @Metadata(generated = true)
    private BinaryData maxOutputTokens;

    /**
     * Creates an instance of RealtimeClientEventResponseCreateResponse class.
     */
    @Metadata(generated = true)
    public RealtimeClientEventResponseCreateResponse() {
    }

    /**
     * Get the modalities property: The modalities for the response.
     * 
     * @return the modalities value.
     */
    @Metadata(generated = true)
    public List<String> getModalities() {
        return this.modalities;
    }

    /**
     * Set the modalities property: The modalities for the response.
     * 
     * @param modalities the modalities value to set.
     * @return the RealtimeClientEventResponseCreateResponse object itself.
     */
    @Metadata(generated = true)
    public RealtimeClientEventResponseCreateResponse setModalities(List<String> modalities) {
        this.modalities = modalities;
        return this;
    }

    /**
     * Get the instructions property: Instructions for the model.
     * 
     * @return the instructions value.
     */
    @Metadata(generated = true)
    public String getInstructions() {
        return this.instructions;
    }

    /**
     * Set the instructions property: Instructions for the model.
     * 
     * @param instructions the instructions value to set.
     * @return the RealtimeClientEventResponseCreateResponse object itself.
     */
    @Metadata(generated = true)
    public RealtimeClientEventResponseCreateResponse setInstructions(String instructions) {
        this.instructions = instructions;
        return this;
    }

    /**
     * Get the voice property: The voice the model uses to respond - one of `alloy`, `echo`, or `shimmer`.
     * 
     * @return the voice value.
     */
    @Metadata(generated = true)
    public String getVoice() {
        return this.voice;
    }

    /**
     * Set the voice property: The voice the model uses to respond - one of `alloy`, `echo`, or `shimmer`.
     * 
     * @param voice the voice value to set.
     * @return the RealtimeClientEventResponseCreateResponse object itself.
     */
    @Metadata(generated = true)
    public RealtimeClientEventResponseCreateResponse setVoice(String voice) {
        this.voice = voice;
        return this;
    }

    /**
     * Get the outputAudioFormat property: The format of output audio.
     * 
     * @return the outputAudioFormat value.
     */
    @Metadata(generated = true)
    public String getOutputAudioFormat() {
        return this.outputAudioFormat;
    }

    /**
     * Set the outputAudioFormat property: The format of output audio.
     * 
     * @param outputAudioFormat the outputAudioFormat value to set.
     * @return the RealtimeClientEventResponseCreateResponse object itself.
     */
    @Metadata(generated = true)
    public RealtimeClientEventResponseCreateResponse setOutputAudioFormat(String outputAudioFormat) {
        this.outputAudioFormat = outputAudioFormat;
        return this;
    }

    /**
     * Get the tools property: Tools (functions) available to the model.
     * 
     * @return the tools value.
     */
    @Metadata(generated = true)
    public List<RealtimeTool> getTools() {
        return this.tools;
    }

    /**
     * Set the tools property: Tools (functions) available to the model.
     * 
     * @param tools the tools value to set.
     * @return the RealtimeClientEventResponseCreateResponse object itself.
     */
    @Metadata(generated = true)
    public RealtimeClientEventResponseCreateResponse setTools(List<RealtimeTool> tools) {
        this.tools = tools;
        return this;
    }

    /**
     * Get the toolChoice property: How the model chooses tools.
     * 
     * @return the toolChoice value.
     */
    @Metadata(generated = true)
    public String getToolChoice() {
        return this.toolChoice;
    }

    /**
     * Set the toolChoice property: How the model chooses tools.
     * 
     * @param toolChoice the toolChoice value to set.
     * @return the RealtimeClientEventResponseCreateResponse object itself.
     */
    @Metadata(generated = true)
    public RealtimeClientEventResponseCreateResponse setToolChoice(String toolChoice) {
        this.toolChoice = toolChoice;
        return this;
    }

    /**
     * Get the temperature property: Sampling temperature.
     * 
     * @return the temperature value.
     */
    @Metadata(generated = true)
    public Double getTemperature() {
        return this.temperature;
    }

    /**
     * Set the temperature property: Sampling temperature.
     * 
     * @param temperature the temperature value to set.
     * @return the RealtimeClientEventResponseCreateResponse object itself.
     */
    @Metadata(generated = true)
    public RealtimeClientEventResponseCreateResponse setTemperature(Double temperature) {
        this.temperature = temperature;
        return this;
    }

    /**
     * Get the maxOutputTokens property: Maximum number of output tokens for a single assistant response, inclusive of
     * tool calls. Provide an integer between 1 and 4096 to limit output tokens, or "inf" for the maximum available
     * tokens for a given model. Defaults to "inf".
     * 
     * @return the maxOutputTokens value.
     */
    @Metadata(generated = true)
    public BinaryData getMaxOutputTokens() {
        return this.maxOutputTokens;
    }

    /**
     * Set the maxOutputTokens property: Maximum number of output tokens for a single assistant response, inclusive of
     * tool calls. Provide an integer between 1 and 4096 to limit output tokens, or "inf" for the maximum available
     * tokens for a given model. Defaults to "inf".
     * 
     * @param maxOutputTokens the maxOutputTokens value to set.
     * @return the RealtimeClientEventResponseCreateResponse object itself.
     */
    @Metadata(generated = true)
    public RealtimeClientEventResponseCreateResponse setMaxOutputTokens(BinaryData maxOutputTokens) {
        this.maxOutputTokens = maxOutputTokens;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("modalities", this.modalities, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("instructions", this.instructions);
        jsonWriter.writeStringField("voice", this.voice);
        jsonWriter.writeStringField("output_audio_format", this.outputAudioFormat);
        jsonWriter.writeArrayField("tools", this.tools, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("tool_choice", this.toolChoice);
        jsonWriter.writeNumberField("temperature", this.temperature);
        if (this.maxOutputTokens != null) {
            jsonWriter.writeUntypedField("max_output_tokens", this.maxOutputTokens.toObject(Object.class));
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RealtimeClientEventResponseCreateResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RealtimeClientEventResponseCreateResponse if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RealtimeClientEventResponseCreateResponse.
     */
    @Metadata(generated = true)
    public static RealtimeClientEventResponseCreateResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RealtimeClientEventResponseCreateResponse deserializedRealtimeClientEventResponseCreateResponse
                = new RealtimeClientEventResponseCreateResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("modalities".equals(fieldName)) {
                    List<String> modalities = reader.readArray(reader1 -> reader1.getString());
                    deserializedRealtimeClientEventResponseCreateResponse.modalities = modalities;
                } else if ("instructions".equals(fieldName)) {
                    deserializedRealtimeClientEventResponseCreateResponse.instructions = reader.getString();
                } else if ("voice".equals(fieldName)) {
                    deserializedRealtimeClientEventResponseCreateResponse.voice = reader.getString();
                } else if ("output_audio_format".equals(fieldName)) {
                    deserializedRealtimeClientEventResponseCreateResponse.outputAudioFormat = reader.getString();
                } else if ("tools".equals(fieldName)) {
                    List<RealtimeTool> tools = reader.readArray(reader1 -> RealtimeTool.fromJson(reader1));
                    deserializedRealtimeClientEventResponseCreateResponse.tools = tools;
                } else if ("tool_choice".equals(fieldName)) {
                    deserializedRealtimeClientEventResponseCreateResponse.toolChoice = reader.getString();
                } else if ("temperature".equals(fieldName)) {
                    deserializedRealtimeClientEventResponseCreateResponse.temperature
                        = reader.getNullable(JsonReader::getDouble);
                } else if ("max_output_tokens".equals(fieldName)) {
                    deserializedRealtimeClientEventResponseCreateResponse.maxOutputTokens
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRealtimeClientEventResponseCreateResponse;
        });
    }
}
