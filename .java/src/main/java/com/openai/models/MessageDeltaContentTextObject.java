// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;

/**
 * The text content that is part of a message.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class MessageDeltaContentTextObject extends MessageDeltaContent {
    /*
     * The discriminated type identifier for the content item.
     */
    @Metadata(generated = true)
    private String type = "text";

    /*
     * The index of the content part in the message.
     */
    @Metadata(generated = true)
    private final int index;

    /*
     * The text property.
     */
    @Metadata(generated = true)
    private MessageDeltaContentTextObjectText text;

    /**
     * Creates an instance of MessageDeltaContentTextObject class.
     * 
     * @param index the index value to set.
     */
    @Metadata(generated = true)
    private MessageDeltaContentTextObject(int index) {
        this.index = index;
    }

    /**
     * Get the type property: The discriminated type identifier for the content item.
     * 
     * @return the type value.
     */
    @Metadata(generated = true)
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the index property: The index of the content part in the message.
     * 
     * @return the index value.
     */
    @Metadata(generated = true)
    public int getIndex() {
        return this.index;
    }

    /**
     * Get the text property: The text property.
     * 
     * @return the text value.
     */
    @Metadata(generated = true)
    public MessageDeltaContentTextObjectText getText() {
        return this.text;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("index", this.index);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeJsonField("text", this.text);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MessageDeltaContentTextObject from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MessageDeltaContentTextObject if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MessageDeltaContentTextObject.
     */
    @Metadata(generated = true)
    public static MessageDeltaContentTextObject fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int index = 0;
            String type = "text";
            MessageDeltaContentTextObjectText text = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("index".equals(fieldName)) {
                    index = reader.getInt();
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("text".equals(fieldName)) {
                    text = MessageDeltaContentTextObjectText.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            MessageDeltaContentTextObject deserializedMessageDeltaContentTextObject
                = new MessageDeltaContentTextObject(index);
            deserializedMessageDeltaContentTextObject.type = type;
            deserializedMessageDeltaContentTextObject.text = text;

            return deserializedMessageDeltaContentTextObject;
        });
    }
}
