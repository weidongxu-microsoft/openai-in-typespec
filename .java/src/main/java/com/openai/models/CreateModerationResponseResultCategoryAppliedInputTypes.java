// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import io.clientcore.core.util.binarydata.BinaryData;
import java.io.IOException;
import java.util.List;

/**
 * The CreateModerationResponseResultCategoryAppliedInputTypes model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class CreateModerationResponseResultCategoryAppliedInputTypes
    implements JsonSerializable<CreateModerationResponseResultCategoryAppliedInputTypes> {
    /*
     * The applied input type(s) for the category 'hate'.
     */
    @Metadata(generated = true)
    private final List<ModerationAppliedInputType> hate;

    /*
     * The applied input type(s) for the category 'hate/threatening'.
     */
    @Metadata(generated = true)
    private final List<ModerationAppliedInputType> hateThreatening;

    /*
     * The applied input type(s) for the category 'harassment'.
     */
    @Metadata(generated = true)
    private final List<ModerationAppliedInputType> harassment;

    /*
     * The applied input type(s) for the category 'harassment/threatening'.
     */
    @Metadata(generated = true)
    private final List<ModerationAppliedInputType> harassmentThreatening;

    /*
     * The applied input type(s) for the category 'illicit'.
     */
    @Metadata(generated = true)
    private final List<ModerationAppliedInputType> illicit;

    /*
     * The applied input type(s) for the category 'illicit/violent'.
     */
    @Metadata(generated = true)
    private final List<ModerationAppliedInputType> illicitViolent;

    /*
     * The applied input type(s) for the category 'self-harm'.
     */
    @Metadata(generated = true)
    private final List<BinaryData> selfHarm;

    /*
     * The applied input type(s) for the category 'self-harm/intent'.
     */
    @Metadata(generated = true)
    private final List<BinaryData> selfHarmIntent;

    /*
     * The applied input type(s) for the category 'self-harm/instructions'.
     */
    @Metadata(generated = true)
    private final List<BinaryData> selfHarmInstructions;

    /*
     * The applied input type(s) for the category 'sexual'.
     */
    @Metadata(generated = true)
    private final List<BinaryData> sexual;

    /*
     * The applied input type(s) for the category 'sexual/minors'.
     */
    @Metadata(generated = true)
    private final List<ModerationAppliedInputType> sexualMinors;

    /*
     * The applied input type(s) for the category 'violence'.
     */
    @Metadata(generated = true)
    private final List<BinaryData> violence;

    /*
     * The applied input type(s) for the category 'violence/graphic'.
     */
    @Metadata(generated = true)
    private final List<BinaryData> violenceGraphic;

    /**
     * Creates an instance of CreateModerationResponseResultCategoryAppliedInputTypes class.
     * 
     * @param hate the hate value to set.
     * @param hateThreatening the hateThreatening value to set.
     * @param harassment the harassment value to set.
     * @param harassmentThreatening the harassmentThreatening value to set.
     * @param illicit the illicit value to set.
     * @param illicitViolent the illicitViolent value to set.
     * @param selfHarm the selfHarm value to set.
     * @param selfHarmIntent the selfHarmIntent value to set.
     * @param selfHarmInstructions the selfHarmInstructions value to set.
     * @param sexual the sexual value to set.
     * @param sexualMinors the sexualMinors value to set.
     * @param violence the violence value to set.
     * @param violenceGraphic the violenceGraphic value to set.
     */
    @Metadata(generated = true)
    private CreateModerationResponseResultCategoryAppliedInputTypes(List<ModerationAppliedInputType> hate,
        List<ModerationAppliedInputType> hateThreatening, List<ModerationAppliedInputType> harassment,
        List<ModerationAppliedInputType> harassmentThreatening, List<ModerationAppliedInputType> illicit,
        List<ModerationAppliedInputType> illicitViolent, List<BinaryData> selfHarm, List<BinaryData> selfHarmIntent,
        List<BinaryData> selfHarmInstructions, List<BinaryData> sexual, List<ModerationAppliedInputType> sexualMinors,
        List<BinaryData> violence, List<BinaryData> violenceGraphic) {
        this.hate = hate;
        this.hateThreatening = hateThreatening;
        this.harassment = harassment;
        this.harassmentThreatening = harassmentThreatening;
        this.illicit = illicit;
        this.illicitViolent = illicitViolent;
        this.selfHarm = selfHarm;
        this.selfHarmIntent = selfHarmIntent;
        this.selfHarmInstructions = selfHarmInstructions;
        this.sexual = sexual;
        this.sexualMinors = sexualMinors;
        this.violence = violence;
        this.violenceGraphic = violenceGraphic;
    }

    /**
     * Get the hate property: The applied input type(s) for the category 'hate'.
     * 
     * @return the hate value.
     */
    @Metadata(generated = true)
    public List<ModerationAppliedInputType> getHate() {
        return this.hate;
    }

    /**
     * Get the hateThreatening property: The applied input type(s) for the category 'hate/threatening'.
     * 
     * @return the hateThreatening value.
     */
    @Metadata(generated = true)
    public List<ModerationAppliedInputType> getHateThreatening() {
        return this.hateThreatening;
    }

    /**
     * Get the harassment property: The applied input type(s) for the category 'harassment'.
     * 
     * @return the harassment value.
     */
    @Metadata(generated = true)
    public List<ModerationAppliedInputType> getHarassment() {
        return this.harassment;
    }

    /**
     * Get the harassmentThreatening property: The applied input type(s) for the category 'harassment/threatening'.
     * 
     * @return the harassmentThreatening value.
     */
    @Metadata(generated = true)
    public List<ModerationAppliedInputType> getHarassmentThreatening() {
        return this.harassmentThreatening;
    }

    /**
     * Get the illicit property: The applied input type(s) for the category 'illicit'.
     * 
     * @return the illicit value.
     */
    @Metadata(generated = true)
    public List<ModerationAppliedInputType> getIllicit() {
        return this.illicit;
    }

    /**
     * Get the illicitViolent property: The applied input type(s) for the category 'illicit/violent'.
     * 
     * @return the illicitViolent value.
     */
    @Metadata(generated = true)
    public List<ModerationAppliedInputType> getIllicitViolent() {
        return this.illicitViolent;
    }

    /**
     * Get the selfHarm property: The applied input type(s) for the category 'self-harm'.
     * 
     * @return the selfHarm value.
     */
    @Metadata(generated = true)
    public List<BinaryData> getSelfHarm() {
        return this.selfHarm;
    }

    /**
     * Get the selfHarmIntent property: The applied input type(s) for the category 'self-harm/intent'.
     * 
     * @return the selfHarmIntent value.
     */
    @Metadata(generated = true)
    public List<BinaryData> getSelfHarmIntent() {
        return this.selfHarmIntent;
    }

    /**
     * Get the selfHarmInstructions property: The applied input type(s) for the category 'self-harm/instructions'.
     * 
     * @return the selfHarmInstructions value.
     */
    @Metadata(generated = true)
    public List<BinaryData> getSelfHarmInstructions() {
        return this.selfHarmInstructions;
    }

    /**
     * Get the sexual property: The applied input type(s) for the category 'sexual'.
     * 
     * @return the sexual value.
     */
    @Metadata(generated = true)
    public List<BinaryData> getSexual() {
        return this.sexual;
    }

    /**
     * Get the sexualMinors property: The applied input type(s) for the category 'sexual/minors'.
     * 
     * @return the sexualMinors value.
     */
    @Metadata(generated = true)
    public List<ModerationAppliedInputType> getSexualMinors() {
        return this.sexualMinors;
    }

    /**
     * Get the violence property: The applied input type(s) for the category 'violence'.
     * 
     * @return the violence value.
     */
    @Metadata(generated = true)
    public List<BinaryData> getViolence() {
        return this.violence;
    }

    /**
     * Get the violenceGraphic property: The applied input type(s) for the category 'violence/graphic'.
     * 
     * @return the violenceGraphic value.
     */
    @Metadata(generated = true)
    public List<BinaryData> getViolenceGraphic() {
        return this.violenceGraphic;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("hate", this.hate,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("hate/threatening", this.hateThreatening,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("harassment", this.harassment,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("harassment/threatening", this.harassmentThreatening,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("illicit", this.illicit,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("illicit/violent", this.illicitViolent,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("self-harm", this.selfHarm,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeArrayField("self-harm/intent", this.selfHarmIntent,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeArrayField("self-harm/instructions", this.selfHarmInstructions,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeArrayField("sexual", this.sexual,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeArrayField("sexual/minors", this.sexualMinors,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("violence", this.violence,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeArrayField("violence/graphic", this.violenceGraphic,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateModerationResponseResultCategoryAppliedInputTypes from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateModerationResponseResultCategoryAppliedInputTypes if the JsonReader was pointing to
     * an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateModerationResponseResultCategoryAppliedInputTypes.
     */
    @Metadata(generated = true)
    public static CreateModerationResponseResultCategoryAppliedInputTypes fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            List<ModerationAppliedInputType> hate = null;
            List<ModerationAppliedInputType> hateThreatening = null;
            List<ModerationAppliedInputType> harassment = null;
            List<ModerationAppliedInputType> harassmentThreatening = null;
            List<ModerationAppliedInputType> illicit = null;
            List<ModerationAppliedInputType> illicitViolent = null;
            List<BinaryData> selfHarm = null;
            List<BinaryData> selfHarmIntent = null;
            List<BinaryData> selfHarmInstructions = null;
            List<BinaryData> sexual = null;
            List<ModerationAppliedInputType> sexualMinors = null;
            List<BinaryData> violence = null;
            List<BinaryData> violenceGraphic = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hate".equals(fieldName)) {
                    hate = reader.readArray(reader1 -> ModerationAppliedInputType.fromString(reader1.getString()));
                } else if ("hate/threatening".equals(fieldName)) {
                    hateThreatening
                        = reader.readArray(reader1 -> ModerationAppliedInputType.fromString(reader1.getString()));
                } else if ("harassment".equals(fieldName)) {
                    harassment
                        = reader.readArray(reader1 -> ModerationAppliedInputType.fromString(reader1.getString()));
                } else if ("harassment/threatening".equals(fieldName)) {
                    harassmentThreatening
                        = reader.readArray(reader1 -> ModerationAppliedInputType.fromString(reader1.getString()));
                } else if ("illicit".equals(fieldName)) {
                    illicit = reader.readArray(reader1 -> ModerationAppliedInputType.fromString(reader1.getString()));
                } else if ("illicit/violent".equals(fieldName)) {
                    illicitViolent
                        = reader.readArray(reader1 -> ModerationAppliedInputType.fromString(reader1.getString()));
                } else if ("self-harm".equals(fieldName)) {
                    selfHarm = reader.readArray(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else if ("self-harm/intent".equals(fieldName)) {
                    selfHarmIntent = reader.readArray(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else if ("self-harm/instructions".equals(fieldName)) {
                    selfHarmInstructions = reader.readArray(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else if ("sexual".equals(fieldName)) {
                    sexual = reader.readArray(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else if ("sexual/minors".equals(fieldName)) {
                    sexualMinors
                        = reader.readArray(reader1 -> ModerationAppliedInputType.fromString(reader1.getString()));
                } else if ("violence".equals(fieldName)) {
                    violence = reader.readArray(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else if ("violence/graphic".equals(fieldName)) {
                    violenceGraphic = reader.readArray(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else {
                    reader.skipChildren();
                }
            }
            return new CreateModerationResponseResultCategoryAppliedInputTypes(hate, hateThreatening, harassment,
                harassmentThreatening, illicit, illicitViolent, selfHarm, selfHarmIntent, selfHarmInstructions, sexual,
                sexualMinors, violence, violenceGraphic);
        });
    }
}
