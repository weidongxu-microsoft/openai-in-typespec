// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;

/**
 * The MessageContentImageFileObjectImageFile model.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class MessageContentImageFileObjectImageFile
    implements JsonSerializable<MessageContentImageFileObjectImageFile> {
    /*
     * The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose="vision"` when
     * uploading the File if you need to later display the file content.
     */
    @Metadata(generated = true)
    private final String fileId;

    /*
     * Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high
     * resolution using `high`.
     */
    @Metadata(generated = true)
    private MessageContentImageFileObjectImageFileDetail detail;

    /**
     * Creates an instance of MessageContentImageFileObjectImageFile class.
     * 
     * @param fileId the fileId value to set.
     */
    @Metadata(generated = true)
    public MessageContentImageFileObjectImageFile(String fileId) {
        this.fileId = fileId;
    }

    /**
     * Get the fileId property: The [File](/docs/api-reference/files) ID of the image in the message content. Set
     * `purpose="vision"` when uploading the File if you need to later display the file content.
     * 
     * @return the fileId value.
     */
    @Metadata(generated = true)
    public String getFileId() {
        return this.fileId;
    }

    /**
     * Get the detail property: Specifies the detail level of the image if specified by the user. `low` uses fewer
     * tokens, you can opt in to high resolution using `high`.
     * 
     * @return the detail value.
     */
    @Metadata(generated = true)
    public MessageContentImageFileObjectImageFileDetail getDetail() {
        return this.detail;
    }

    /**
     * Set the detail property: Specifies the detail level of the image if specified by the user. `low` uses fewer
     * tokens, you can opt in to high resolution using `high`.
     * 
     * @param detail the detail value to set.
     * @return the MessageContentImageFileObjectImageFile object itself.
     */
    @Metadata(generated = true)
    public MessageContentImageFileObjectImageFile setDetail(MessageContentImageFileObjectImageFileDetail detail) {
        this.detail = detail;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("file_id", this.fileId);
        jsonWriter.writeStringField("detail", this.detail == null ? null : this.detail.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MessageContentImageFileObjectImageFile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MessageContentImageFileObjectImageFile if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MessageContentImageFileObjectImageFile.
     */
    @Metadata(generated = true)
    public static MessageContentImageFileObjectImageFile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String fileId = null;
            MessageContentImageFileObjectImageFileDetail detail = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("file_id".equals(fieldName)) {
                    fileId = reader.getString();
                } else if ("detail".equals(fieldName)) {
                    detail = MessageContentImageFileObjectImageFileDetail.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            MessageContentImageFileObjectImageFile deserializedMessageContentImageFileObjectImageFile
                = new MessageContentImageFileObjectImageFile(fileId);
            deserializedMessageContentImageFileObjectImageFile.detail = detail;

            return deserializedMessageContentImageFileObjectImageFile;
        });
    }
}
