// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The RunStepDetailsToolCallsCodeOutputImageObject model.
 */
@Immutable
public final class RunStepDetailsToolCallsCodeOutputImageObject
    extends RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsObject {
    /*
     * The discriminated type identifier for the details object.
     */
    @Generated
    private String type = "image";

    /*
     * The image property.
     */
    @Generated
    private final RunStepDetailsToolCallsCodeOutputImageObjectImage image;

    /**
     * Creates an instance of RunStepDetailsToolCallsCodeOutputImageObject class.
     * 
     * @param image the image value to set.
     */
    @Generated
    private RunStepDetailsToolCallsCodeOutputImageObject(RunStepDetailsToolCallsCodeOutputImageObjectImage image) {
        this.image = image;
    }

    /**
     * Get the type property: The discriminated type identifier for the details object.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the image property: The image property.
     * 
     * @return the image value.
     */
    @Generated
    public RunStepDetailsToolCallsCodeOutputImageObjectImage getImage() {
        return this.image;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("image", this.image);
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RunStepDetailsToolCallsCodeOutputImageObject from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RunStepDetailsToolCallsCodeOutputImageObject if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RunStepDetailsToolCallsCodeOutputImageObject.
     */
    @Generated
    public static RunStepDetailsToolCallsCodeOutputImageObject fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RunStepDetailsToolCallsCodeOutputImageObjectImage image = null;
            String type = "image";
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("image".equals(fieldName)) {
                    image = RunStepDetailsToolCallsCodeOutputImageObjectImage.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            RunStepDetailsToolCallsCodeOutputImageObject deserializedRunStepDetailsToolCallsCodeOutputImageObject
                = new RunStepDetailsToolCallsCodeOutputImageObject(image);
            deserializedRunStepDetailsToolCallsCodeOutputImageObject.type = type;

            return deserializedRunStepDetailsToolCallsCodeOutputImageObject;
        });
    }
}
