// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;

/**
 * Returned when an Item is done streaming. Also emitted when a Response is interrupted, incomplete, or cancelled.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class RealtimeServerEventResponseOutputItemDone extends RealtimeServerEvent {
    /*
     * The type property.
     */
    @Metadata(generated = true)
    private RealtimeServerEventType type = RealtimeServerEventType.RESPONSE_OUTPUT_ITEM_DONE;

    /*
     * The ID of the response to which the item belongs.
     */
    @Metadata(generated = true)
    private final String responseId;

    /*
     * The index of the output item in the response.
     */
    @Metadata(generated = true)
    private final int outputIndex;

    /*
     * The completed item.
     */
    @Metadata(generated = true)
    private final RealtimeResponseItem item;

    /**
     * Creates an instance of RealtimeServerEventResponseOutputItemDone class.
     * 
     * @param eventId the eventId value to set.
     * @param responseId the responseId value to set.
     * @param outputIndex the outputIndex value to set.
     * @param item the item value to set.
     */
    @Metadata(generated = true)
    private RealtimeServerEventResponseOutputItemDone(String eventId, String responseId, int outputIndex,
        RealtimeResponseItem item) {
        super(eventId);
        this.responseId = responseId;
        this.outputIndex = outputIndex;
        this.item = item;
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Metadata(generated = true)
    @Override
    public RealtimeServerEventType getType() {
        return this.type;
    }

    /**
     * Get the responseId property: The ID of the response to which the item belongs.
     * 
     * @return the responseId value.
     */
    @Metadata(generated = true)
    public String getResponseId() {
        return this.responseId;
    }

    /**
     * Get the outputIndex property: The index of the output item in the response.
     * 
     * @return the outputIndex value.
     */
    @Metadata(generated = true)
    public int getOutputIndex() {
        return this.outputIndex;
    }

    /**
     * Get the item property: The completed item.
     * 
     * @return the item value.
     */
    @Metadata(generated = true)
    public RealtimeResponseItem getItem() {
        return this.item;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event_id", getEventId());
        jsonWriter.writeStringField("response_id", this.responseId);
        jsonWriter.writeIntField("output_index", this.outputIndex);
        jsonWriter.writeJsonField("item", this.item);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RealtimeServerEventResponseOutputItemDone from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RealtimeServerEventResponseOutputItemDone if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RealtimeServerEventResponseOutputItemDone.
     */
    @Metadata(generated = true)
    public static RealtimeServerEventResponseOutputItemDone fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String eventId = null;
            String responseId = null;
            int outputIndex = 0;
            RealtimeResponseItem item = null;
            RealtimeServerEventType type = RealtimeServerEventType.RESPONSE_OUTPUT_ITEM_DONE;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("event_id".equals(fieldName)) {
                    eventId = reader.getString();
                } else if ("response_id".equals(fieldName)) {
                    responseId = reader.getString();
                } else if ("output_index".equals(fieldName)) {
                    outputIndex = reader.getInt();
                } else if ("item".equals(fieldName)) {
                    item = RealtimeResponseItem.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    type = RealtimeServerEventType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            RealtimeServerEventResponseOutputItemDone deserializedRealtimeServerEventResponseOutputItemDone
                = new RealtimeServerEventResponseOutputItemDone(eventId, responseId, outputIndex, item);
            deserializedRealtimeServerEventResponseOutputItemDone.type = type;

            return deserializedRealtimeServerEventResponseOutputItemDone;
        });
    }
}
