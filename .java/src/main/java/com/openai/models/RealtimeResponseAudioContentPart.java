// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;

/**
 * The RealtimeResponseAudioContentPart model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class RealtimeResponseAudioContentPart extends RealtimeContentPart {
    /*
     * The type property.
     */
    @Metadata(generated = true)
    private RealtimeContentPartType type = RealtimeContentPartType.AUDIO;

    /*
     * The transcript property.
     */
    @Metadata(generated = true)
    private final String transcript;

    /**
     * Creates an instance of RealtimeResponseAudioContentPart class.
     * 
     * @param transcript the transcript value to set.
     */
    @Metadata(generated = true)
    public RealtimeResponseAudioContentPart(String transcript) {
        this.transcript = transcript;
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Metadata(generated = true)
    @Override
    public RealtimeContentPartType getType() {
        return this.type;
    }

    /**
     * Get the transcript property: The transcript property.
     * 
     * @return the transcript value.
     */
    @Metadata(generated = true)
    public String getTranscript() {
        return this.transcript;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("transcript", this.transcript);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RealtimeResponseAudioContentPart from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RealtimeResponseAudioContentPart if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RealtimeResponseAudioContentPart.
     */
    @Metadata(generated = true)
    public static RealtimeResponseAudioContentPart fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String transcript = null;
            RealtimeContentPartType type = RealtimeContentPartType.AUDIO;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("transcript".equals(fieldName)) {
                    transcript = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = RealtimeContentPartType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            RealtimeResponseAudioContentPart deserializedRealtimeResponseAudioContentPart
                = new RealtimeResponseAudioContentPart(transcript);
            deserializedRealtimeResponseAudioContentPart.type = type;

            return deserializedRealtimeResponseAudioContentPart;
        });
    }
}
