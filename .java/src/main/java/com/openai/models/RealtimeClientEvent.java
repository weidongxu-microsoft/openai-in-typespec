// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;

/**
 * The RealtimeClientEvent model.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public class RealtimeClientEvent implements JsonSerializable<RealtimeClientEvent> {
    /*
     * The type property.
     */
    @Metadata(generated = true)
    private RealtimeClientEventType type = RealtimeClientEventType.fromString("RealtimeClientEvent");

    /*
     * The event_id property.
     */
    @Metadata(generated = true)
    private String eventId;

    /**
     * Creates an instance of RealtimeClientEvent class.
     */
    @Metadata(generated = true)
    public RealtimeClientEvent() {
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Metadata(generated = true)
    public RealtimeClientEventType getType() {
        return this.type;
    }

    /**
     * Get the eventId property: The event_id property.
     * 
     * @return the eventId value.
     */
    @Metadata(generated = true)
    public String getEventId() {
        return this.eventId;
    }

    /**
     * Set the eventId property: The event_id property.
     * 
     * @param eventId the eventId value to set.
     * @return the RealtimeClientEvent object itself.
     */
    @Metadata(generated = true)
    public RealtimeClientEvent setEventId(String eventId) {
        this.eventId = eventId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("event_id", this.eventId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RealtimeClientEvent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RealtimeClientEvent if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RealtimeClientEvent.
     */
    @Metadata(generated = true)
    public static RealtimeClientEvent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("session.update".equals(discriminatorValue)) {
                    return RealtimeClientEventSessionUpdate.fromJson(readerToUse.reset());
                } else if ("input_audio_buffer.append".equals(discriminatorValue)) {
                    return RealtimeClientEventInputAudioBufferAppend.fromJson(readerToUse.reset());
                } else if ("input_audio_buffer.commit".equals(discriminatorValue)) {
                    return RealtimeClientEventInputAudioBufferCommit.fromJson(readerToUse.reset());
                } else if ("input_audio_buffer.clear".equals(discriminatorValue)) {
                    return RealtimeClientEventInputAudioBufferClear.fromJson(readerToUse.reset());
                } else if ("conversation.item.create".equals(discriminatorValue)) {
                    return RealtimeClientEventConversationItemCreate.fromJson(readerToUse.reset());
                } else if ("conversation.item.truncate".equals(discriminatorValue)) {
                    return RealtimeClientEventConversationItemTruncate.fromJson(readerToUse.reset());
                } else if ("conversation.item.delete".equals(discriminatorValue)) {
                    return RealtimeClientEventConversationItemDelete.fromJson(readerToUse.reset());
                } else if ("response.create".equals(discriminatorValue)) {
                    return RealtimeClientEventResponseCreate.fromJson(readerToUse.reset());
                } else if ("response.cancel".equals(discriminatorValue)) {
                    return RealtimeClientEventResponseCancel.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Metadata(generated = true)
    static RealtimeClientEvent fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RealtimeClientEvent deserializedRealtimeClientEvent = new RealtimeClientEvent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedRealtimeClientEvent.type = RealtimeClientEventType.fromString(reader.getString());
                } else if ("event_id".equals(fieldName)) {
                    deserializedRealtimeClientEvent.eventId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRealtimeClientEvent;
        });
    }
}
