// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The MessageDeltaContentTextAnnotationsFilePathObjectFilePath model.
 */
@Immutable
public final class MessageDeltaContentTextAnnotationsFilePathObjectFilePath
    implements JsonSerializable<MessageDeltaContentTextAnnotationsFilePathObjectFilePath> {
    /*
     * The ID of the file that was generated.
     */
    @Generated
    private String fileId;

    /**
     * Creates an instance of MessageDeltaContentTextAnnotationsFilePathObjectFilePath class.
     */
    @Generated
    private MessageDeltaContentTextAnnotationsFilePathObjectFilePath() {
    }

    /**
     * Get the fileId property: The ID of the file that was generated.
     * 
     * @return the fileId value.
     */
    @Generated
    public String getFileId() {
        return this.fileId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("file_id", this.fileId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MessageDeltaContentTextAnnotationsFilePathObjectFilePath from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MessageDeltaContentTextAnnotationsFilePathObjectFilePath if the JsonReader was pointing to
     * an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the
     * MessageDeltaContentTextAnnotationsFilePathObjectFilePath.
     */
    @Generated
    public static MessageDeltaContentTextAnnotationsFilePathObjectFilePath fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            MessageDeltaContentTextAnnotationsFilePathObjectFilePath deserializedMessageDeltaContentTextAnnotationsFilePathObjectFilePath
                = new MessageDeltaContentTextAnnotationsFilePathObjectFilePath();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("file_id".equals(fieldName)) {
                    deserializedMessageDeltaContentTextAnnotationsFilePathObjectFilePath.fileId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMessageDeltaContentTextAnnotationsFilePathObjectFilePath;
        });
    }
}
