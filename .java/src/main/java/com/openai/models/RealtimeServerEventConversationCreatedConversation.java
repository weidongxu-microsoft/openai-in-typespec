// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;

/**
 * The RealtimeServerEventConversationCreatedConversation model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class RealtimeServerEventConversationCreatedConversation
    implements JsonSerializable<RealtimeServerEventConversationCreatedConversation> {
    /*
     * The unique ID of the conversation.
     */
    @Metadata(generated = true)
    private String id;

    /*
     * The object type, must be "realtime.conversation".
     */
    @Metadata(generated = true)
    private String object;

    /**
     * Creates an instance of RealtimeServerEventConversationCreatedConversation class.
     */
    @Metadata(generated = true)
    private RealtimeServerEventConversationCreatedConversation() {
    }

    /**
     * Get the id property: The unique ID of the conversation.
     * 
     * @return the id value.
     */
    @Metadata(generated = true)
    public String getId() {
        return this.id;
    }

    /**
     * Get the object property: The object type, must be "realtime.conversation".
     * 
     * @return the object value.
     */
    @Metadata(generated = true)
    public String getObject() {
        return this.object;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("object", this.object);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RealtimeServerEventConversationCreatedConversation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RealtimeServerEventConversationCreatedConversation if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RealtimeServerEventConversationCreatedConversation.
     */
    @Metadata(generated = true)
    public static RealtimeServerEventConversationCreatedConversation fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            RealtimeServerEventConversationCreatedConversation deserializedRealtimeServerEventConversationCreatedConversation
                = new RealtimeServerEventConversationCreatedConversation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedRealtimeServerEventConversationCreatedConversation.id = reader.getString();
                } else if ("object".equals(fieldName)) {
                    deserializedRealtimeServerEventConversationCreatedConversation.object = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRealtimeServerEventConversationCreatedConversation;
        });
    }
}
