// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The per-line training example of a fine-tuning input file for chat models.
 */
@Fluent
public final class FinetuneChatRequestInput implements JsonSerializable<FinetuneChatRequestInput> {
    /*
     * The messages property.
     */
    @Generated
    private List<BinaryData> messages;

    /*
     * A list of tools the model may generate JSON inputs for.
     */
    @Generated
    private List<ChatCompletionTool> tools;

    /*
     * The parallel_tool_calls property.
     */
    @Generated
    private Boolean parallelToolCalls;

    /*
     * A list of functions the model may generate JSON inputs for.
     */
    @Generated
    private List<ChatCompletionFunctions> functions;

    /**
     * Creates an instance of FinetuneChatRequestInput class.
     */
    @Generated
    public FinetuneChatRequestInput() {
    }

    /**
     * Get the messages property: The messages property.
     * 
     * @return the messages value.
     */
    @Generated
    public List<BinaryData> getMessages() {
        return this.messages;
    }

    /**
     * Set the messages property: The messages property.
     * 
     * @param messages the messages value to set.
     * @return the FinetuneChatRequestInput object itself.
     */
    @Generated
    public FinetuneChatRequestInput setMessages(List<BinaryData> messages) {
        this.messages = messages;
        return this;
    }

    /**
     * Get the tools property: A list of tools the model may generate JSON inputs for.
     * 
     * @return the tools value.
     */
    @Generated
    public List<ChatCompletionTool> getTools() {
        return this.tools;
    }

    /**
     * Set the tools property: A list of tools the model may generate JSON inputs for.
     * 
     * @param tools the tools value to set.
     * @return the FinetuneChatRequestInput object itself.
     */
    @Generated
    public FinetuneChatRequestInput setTools(List<ChatCompletionTool> tools) {
        this.tools = tools;
        return this;
    }

    /**
     * Get the parallelToolCalls property: The parallel_tool_calls property.
     * 
     * @return the parallelToolCalls value.
     */
    @Generated
    public Boolean isParallelToolCalls() {
        return this.parallelToolCalls;
    }

    /**
     * Set the parallelToolCalls property: The parallel_tool_calls property.
     * 
     * @param parallelToolCalls the parallelToolCalls value to set.
     * @return the FinetuneChatRequestInput object itself.
     */
    @Generated
    public FinetuneChatRequestInput setParallelToolCalls(Boolean parallelToolCalls) {
        this.parallelToolCalls = parallelToolCalls;
        return this;
    }

    /**
     * Get the functions property: A list of functions the model may generate JSON inputs for.
     * 
     * @return the functions value.
     */
    @Generated
    public List<ChatCompletionFunctions> getFunctions() {
        return this.functions;
    }

    /**
     * Set the functions property: A list of functions the model may generate JSON inputs for.
     * 
     * @param functions the functions value to set.
     * @return the FinetuneChatRequestInput object itself.
     */
    @Generated
    public FinetuneChatRequestInput setFunctions(List<ChatCompletionFunctions> functions) {
        this.functions = functions;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("messages", this.messages,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeArrayField("tools", this.tools, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("parallel_tool_calls", this.parallelToolCalls);
        jsonWriter.writeArrayField("functions", this.functions, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FinetuneChatRequestInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FinetuneChatRequestInput if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FinetuneChatRequestInput.
     */
    @Generated
    public static FinetuneChatRequestInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FinetuneChatRequestInput deserializedFinetuneChatRequestInput = new FinetuneChatRequestInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("messages".equals(fieldName)) {
                    List<BinaryData> messages = reader.readArray(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedFinetuneChatRequestInput.messages = messages;
                } else if ("tools".equals(fieldName)) {
                    List<ChatCompletionTool> tools = reader.readArray(reader1 -> ChatCompletionTool.fromJson(reader1));
                    deserializedFinetuneChatRequestInput.tools = tools;
                } else if ("parallel_tool_calls".equals(fieldName)) {
                    deserializedFinetuneChatRequestInput.parallelToolCalls = reader.getNullable(JsonReader::getBoolean);
                } else if ("functions".equals(fieldName)) {
                    List<ChatCompletionFunctions> functions
                        = reader.readArray(reader1 -> ChatCompletionFunctions.fromJson(reader1));
                    deserializedFinetuneChatRequestInput.functions = functions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFinetuneChatRequestInput;
        });
    }
}
