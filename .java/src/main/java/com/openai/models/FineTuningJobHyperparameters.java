// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The FineTuningJobHyperparameters model.
 */
@Immutable
public final class FineTuningJobHyperparameters implements JsonSerializable<FineTuningJobHyperparameters> {
    /*
     * The number of epochs to train the model for. An epoch refers to one full cycle
     * through the training dataset.
     */
    @Generated
    private final BinaryData nEpochs;

    /*
     * Number of examples in each batch. A larger batch size means that model parameters
     * are updated less frequently, but with lower variance.
     */
    @Generated
    private final BinaryData batchSize;

    /*
     * Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
     * overfitting.
     */
    @Generated
    private final BinaryData learningRateMultiplier;

    /**
     * Creates an instance of FineTuningJobHyperparameters class.
     * 
     * @param nEpochs the nEpochs value to set.
     * @param batchSize the batchSize value to set.
     * @param learningRateMultiplier the learningRateMultiplier value to set.
     */
    @Generated
    private FineTuningJobHyperparameters(BinaryData nEpochs, BinaryData batchSize, BinaryData learningRateMultiplier) {
        this.nEpochs = nEpochs;
        this.batchSize = batchSize;
        this.learningRateMultiplier = learningRateMultiplier;
    }

    /**
     * Get the nEpochs property: The number of epochs to train the model for. An epoch refers to one full cycle
     * through the training dataset.
     * 
     * @return the nEpochs value.
     */
    @Generated
    public BinaryData getNEpochs() {
        return this.nEpochs;
    }

    /**
     * Get the batchSize property: Number of examples in each batch. A larger batch size means that model parameters
     * are updated less frequently, but with lower variance.
     * 
     * @return the batchSize value.
     */
    @Generated
    public BinaryData getBatchSize() {
        return this.batchSize;
    }

    /**
     * Get the learningRateMultiplier property: Scaling factor for the learning rate. A smaller learning rate may be
     * useful to avoid
     * overfitting.
     * 
     * @return the learningRateMultiplier value.
     */
    @Generated
    public BinaryData getLearningRateMultiplier() {
        return this.learningRateMultiplier;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("n_epochs", this.nEpochs.toObject(Object.class));
        jsonWriter.writeUntypedField("batch_size", this.batchSize.toObject(Object.class));
        jsonWriter.writeUntypedField("learning_rate_multiplier", this.learningRateMultiplier.toObject(Object.class));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FineTuningJobHyperparameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FineTuningJobHyperparameters if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FineTuningJobHyperparameters.
     */
    @Generated
    public static FineTuningJobHyperparameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BinaryData nEpochs = null;
            BinaryData batchSize = null;
            BinaryData learningRateMultiplier = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("n_epochs".equals(fieldName)) {
                    nEpochs = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("batch_size".equals(fieldName)) {
                    batchSize = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("learning_rate_multiplier".equals(fieldName)) {
                    learningRateMultiplier
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else {
                    reader.skipChildren();
                }
            }
            return new FineTuningJobHyperparameters(nEpochs, batchSize, learningRateMultiplier);
        });
    }
}
