// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;

/**
 * References an image [File](/docs/api-reference/files) in the content of a message.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class MessageContentImageFileObject extends MessageContent {
    /*
     * Always `image_file`.
     */
    @Metadata(generated = true)
    private final String type = "image_file";

    /*
     * The image_file property.
     */
    @Metadata(generated = true)
    private final MessageContentImageFileObjectImageFile imageFile;

    /**
     * Creates an instance of MessageContentImageFileObject class.
     * 
     * @param imageFile the imageFile value to set.
     */
    @Metadata(generated = true)
    public MessageContentImageFileObject(MessageContentImageFileObjectImageFile imageFile) {
        this.imageFile = imageFile;
    }

    /**
     * Get the type property: Always `image_file`.
     * 
     * @return the type value.
     */
    @Metadata(generated = true)
    public String getType() {
        return this.type;
    }

    /**
     * Get the imageFile property: The image_file property.
     * 
     * @return the imageFile value.
     */
    @Metadata(generated = true)
    public MessageContentImageFileObjectImageFile getImageFile() {
        return this.imageFile;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeJsonField("image_file", this.imageFile);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MessageContentImageFileObject from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MessageContentImageFileObject if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MessageContentImageFileObject.
     */
    @Metadata(generated = true)
    public static MessageContentImageFileObject fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MessageContentImageFileObjectImageFile imageFile = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("image_file".equals(fieldName)) {
                    imageFile = MessageContentImageFileObjectImageFile.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new MessageContentImageFileObject(imageFile);
        });
    }
}
