// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;

/**
 * The CreateChatCompletionStreamResponseUsage model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class CreateChatCompletionStreamResponseUsage
    implements JsonSerializable<CreateChatCompletionStreamResponseUsage> {
    /*
     * Number of tokens in the generated completion.
     */
    @Metadata(generated = true)
    private final int completionTokens;

    /*
     * Number of tokens in the prompt.
     */
    @Metadata(generated = true)
    private final int promptTokens;

    /*
     * Total number of tokens used in the request (prompt + completion).
     */
    @Metadata(generated = true)
    private final int totalTokens;

    /**
     * Creates an instance of CreateChatCompletionStreamResponseUsage class.
     * 
     * @param completionTokens the completionTokens value to set.
     * @param promptTokens the promptTokens value to set.
     * @param totalTokens the totalTokens value to set.
     */
    @Metadata(generated = true)
    private CreateChatCompletionStreamResponseUsage(int completionTokens, int promptTokens, int totalTokens) {
        this.completionTokens = completionTokens;
        this.promptTokens = promptTokens;
        this.totalTokens = totalTokens;
    }

    /**
     * Get the completionTokens property: Number of tokens in the generated completion.
     * 
     * @return the completionTokens value.
     */
    @Metadata(generated = true)
    public int getCompletionTokens() {
        return this.completionTokens;
    }

    /**
     * Get the promptTokens property: Number of tokens in the prompt.
     * 
     * @return the promptTokens value.
     */
    @Metadata(generated = true)
    public int getPromptTokens() {
        return this.promptTokens;
    }

    /**
     * Get the totalTokens property: Total number of tokens used in the request (prompt + completion).
     * 
     * @return the totalTokens value.
     */
    @Metadata(generated = true)
    public int getTotalTokens() {
        return this.totalTokens;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("completion_tokens", this.completionTokens);
        jsonWriter.writeIntField("prompt_tokens", this.promptTokens);
        jsonWriter.writeIntField("total_tokens", this.totalTokens);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateChatCompletionStreamResponseUsage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateChatCompletionStreamResponseUsage if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateChatCompletionStreamResponseUsage.
     */
    @Metadata(generated = true)
    public static CreateChatCompletionStreamResponseUsage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int completionTokens = 0;
            int promptTokens = 0;
            int totalTokens = 0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("completion_tokens".equals(fieldName)) {
                    completionTokens = reader.getInt();
                } else if ("prompt_tokens".equals(fieldName)) {
                    promptTokens = reader.getInt();
                } else if ("total_tokens".equals(fieldName)) {
                    totalTokens = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }
            return new CreateChatCompletionStreamResponseUsage(completionTokens, promptTokens, totalTokens);
        });
    }
}
