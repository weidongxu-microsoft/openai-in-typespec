// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import io.clientcore.core.util.binarydata.BinaryData;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * The parameters the functions accepts, described as a JSON Schema object. See the
 * [guide](/docs/guides/function-calling) for examples, and the [JSON Schema
 * reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
 * 
 * Omitting `parameters` defines a function with an empty parameter list.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class FunctionParameters implements JsonSerializable<FunctionParameters> {
    /*
     * The parameters the functions accepts, described as a JSON Schema object. See the
     * [guide](/docs/guides/function-calling) for examples, and the [JSON Schema
     * reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
     * 
     * Omitting `parameters` defines a function with an empty parameter list.
     */
    @Metadata(generated = true)
    private Map<String, BinaryData> additionalProperties;

    /**
     * Creates an instance of FunctionParameters class.
     */
    @Metadata(generated = true)
    public FunctionParameters() {
    }

    /**
     * Get the additionalProperties property: The parameters the functions accepts, described as a JSON Schema object.
     * See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema
     * reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
     * 
     * Omitting `parameters` defines a function with an empty parameter list.
     * 
     * @return the additionalProperties value.
     */
    @Metadata(generated = true)
    public Map<String, BinaryData> getAdditionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: The parameters the functions accepts, described as a JSON Schema object.
     * See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema
     * reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
     * 
     * Omitting `parameters` defines a function with an empty parameter list.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the FunctionParameters object itself.
     */
    @Metadata(generated = true)
    public FunctionParameters setAdditionalProperties(Map<String, BinaryData> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (additionalProperties != null) {
            for (Map.Entry<String, BinaryData> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(),
                    additionalProperty.getValue() == null
                        ? null
                        : additionalProperty.getValue().toObject(Object.class));
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FunctionParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FunctionParameters if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FunctionParameters.
     */
    @Metadata(generated = true)
    public static FunctionParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FunctionParameters deserializedFunctionParameters = new FunctionParameters();
            Map<String, BinaryData> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if (additionalProperties == null) {
                    additionalProperties = new LinkedHashMap<>();
                }

                additionalProperties.put(fieldName,
                    reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
            }
            deserializedFunctionParameters.additionalProperties = additionalProperties;

            return deserializedFunctionParameters;
        });
    }
}
