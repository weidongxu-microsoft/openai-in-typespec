// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;

/**
 * The CreateChatCompletionFunctionResponseChoice model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class CreateChatCompletionFunctionResponseChoice
    implements JsonSerializable<CreateChatCompletionFunctionResponseChoice> {
    /*
     * The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a
     * provided stop sequence, `length` if the maximum number of tokens specified in the request was reached,
     * `content_filter` if content was omitted due to a flag from our content filters, or `function_call` if the model
     * called a function.
     */
    @Metadata(generated = true)
    private final CreateChatCompletionFunctionResponseChoiceFinishReason finishReason;

    /*
     * The index of the choice in the list of choices.
     */
    @Metadata(generated = true)
    private final int index;

    /*
     * The message property.
     */
    @Metadata(generated = true)
    private final ChatCompletionResponseMessage message;

    /**
     * Creates an instance of CreateChatCompletionFunctionResponseChoice class.
     * 
     * @param finishReason the finishReason value to set.
     * @param index the index value to set.
     * @param message the message value to set.
     */
    @Metadata(generated = true)
    private CreateChatCompletionFunctionResponseChoice(
        CreateChatCompletionFunctionResponseChoiceFinishReason finishReason, int index,
        ChatCompletionResponseMessage message) {
        this.finishReason = finishReason;
        this.index = index;
        this.message = message;
    }

    /**
     * Get the finishReason property: The reason the model stopped generating tokens. This will be `stop` if the model
     * hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the
     * request was reached, `content_filter` if content was omitted due to a flag from our content filters, or
     * `function_call` if the model called a function.
     * 
     * @return the finishReason value.
     */
    @Metadata(generated = true)
    public CreateChatCompletionFunctionResponseChoiceFinishReason getFinishReason() {
        return this.finishReason;
    }

    /**
     * Get the index property: The index of the choice in the list of choices.
     * 
     * @return the index value.
     */
    @Metadata(generated = true)
    public int getIndex() {
        return this.index;
    }

    /**
     * Get the message property: The message property.
     * 
     * @return the message value.
     */
    @Metadata(generated = true)
    public ChatCompletionResponseMessage getMessage() {
        return this.message;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("finish_reason", this.finishReason == null ? null : this.finishReason.toString());
        jsonWriter.writeIntField("index", this.index);
        jsonWriter.writeJsonField("message", this.message);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateChatCompletionFunctionResponseChoice from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateChatCompletionFunctionResponseChoice if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateChatCompletionFunctionResponseChoice.
     */
    @Metadata(generated = true)
    public static CreateChatCompletionFunctionResponseChoice fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CreateChatCompletionFunctionResponseChoiceFinishReason finishReason = null;
            int index = 0;
            ChatCompletionResponseMessage message = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("finish_reason".equals(fieldName)) {
                    finishReason
                        = CreateChatCompletionFunctionResponseChoiceFinishReason.fromString(reader.getString());
                } else if ("index".equals(fieldName)) {
                    index = reader.getInt();
                } else if ("message".equals(fieldName)) {
                    message = ChatCompletionResponseMessage.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new CreateChatCompletionFunctionResponseChoice(finishReason, index, message);
        });
    }
}
