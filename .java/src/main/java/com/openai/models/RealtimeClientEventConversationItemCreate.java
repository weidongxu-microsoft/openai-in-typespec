// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;

/**
 * Send this event when adding an item to the conversation.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class RealtimeClientEventConversationItemCreate extends RealtimeClientEvent {
    /*
     * The type property.
     */
    @Metadata(generated = true)
    private RealtimeClientEventType type = RealtimeClientEventType.CONVERSATION_ITEM_CREATE;

    /*
     * The ID of the preceding item after which the new item will be inserted.
     */
    @Metadata(generated = true)
    private String previousItemId;

    /*
     * The item to add to the conversation.
     */
    @Metadata(generated = true)
    private final RealtimeRequestItem item;

    /**
     * Creates an instance of RealtimeClientEventConversationItemCreate class.
     * 
     * @param item the item value to set.
     */
    @Metadata(generated = true)
    public RealtimeClientEventConversationItemCreate(RealtimeRequestItem item) {
        this.item = item;
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Metadata(generated = true)
    @Override
    public RealtimeClientEventType getType() {
        return this.type;
    }

    /**
     * Get the previousItemId property: The ID of the preceding item after which the new item will be inserted.
     * 
     * @return the previousItemId value.
     */
    @Metadata(generated = true)
    public String getPreviousItemId() {
        return this.previousItemId;
    }

    /**
     * Set the previousItemId property: The ID of the preceding item after which the new item will be inserted.
     * 
     * @param previousItemId the previousItemId value to set.
     * @return the RealtimeClientEventConversationItemCreate object itself.
     */
    @Metadata(generated = true)
    public RealtimeClientEventConversationItemCreate setPreviousItemId(String previousItemId) {
        this.previousItemId = previousItemId;
        return this;
    }

    /**
     * Get the item property: The item to add to the conversation.
     * 
     * @return the item value.
     */
    @Metadata(generated = true)
    public RealtimeRequestItem getItem() {
        return this.item;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public RealtimeClientEventConversationItemCreate setEventId(String eventId) {
        super.setEventId(eventId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event_id", getEventId());
        jsonWriter.writeJsonField("item", this.item);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("previous_item_id", this.previousItemId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RealtimeClientEventConversationItemCreate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RealtimeClientEventConversationItemCreate if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RealtimeClientEventConversationItemCreate.
     */
    @Metadata(generated = true)
    public static RealtimeClientEventConversationItemCreate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String eventId = null;
            RealtimeRequestItem item = null;
            RealtimeClientEventType type = RealtimeClientEventType.CONVERSATION_ITEM_CREATE;
            String previousItemId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("event_id".equals(fieldName)) {
                    eventId = reader.getString();
                } else if ("item".equals(fieldName)) {
                    item = RealtimeRequestItem.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    type = RealtimeClientEventType.fromString(reader.getString());
                } else if ("previous_item_id".equals(fieldName)) {
                    previousItemId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            RealtimeClientEventConversationItemCreate deserializedRealtimeClientEventConversationItemCreate
                = new RealtimeClientEventConversationItemCreate(item);
            deserializedRealtimeClientEventConversationItemCreate.setEventId(eventId);
            deserializedRealtimeClientEventConversationItemCreate.type = type;
            deserializedRealtimeClientEventConversationItemCreate.previousItemId = previousItemId;

            return deserializedRealtimeClientEventConversationItemCreate;
        });
    }
}
