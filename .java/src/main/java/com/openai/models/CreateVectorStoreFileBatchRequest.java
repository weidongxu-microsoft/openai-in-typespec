// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import io.clientcore.core.util.binarydata.BinaryData;
import java.io.IOException;
import java.util.List;

/**
 * The CreateVectorStoreFileBatchRequest model.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class CreateVectorStoreFileBatchRequest implements JsonSerializable<CreateVectorStoreFileBatchRequest> {
    /*
     * A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like
     * `file_search` that can access files.
     */
    @Metadata(generated = true)
    private final List<String> fileIds;

    /*
     * The chunking_strategy property.
     */
    @Metadata(generated = true)
    private BinaryData chunkingStrategy;

    /**
     * Creates an instance of CreateVectorStoreFileBatchRequest class.
     * 
     * @param fileIds the fileIds value to set.
     */
    @Metadata(generated = true)
    public CreateVectorStoreFileBatchRequest(List<String> fileIds) {
        this.fileIds = fileIds;
    }

    /**
     * Get the fileIds property: A list of [File](/docs/api-reference/files) IDs that the vector store should use.
     * Useful for tools like `file_search` that can access files.
     * 
     * @return the fileIds value.
     */
    @Metadata(generated = true)
    public List<String> getFileIds() {
        return this.fileIds;
    }

    /**
     * Get the chunkingStrategy property: The chunking_strategy property.
     * 
     * @return the chunkingStrategy value.
     */
    @Metadata(generated = true)
    public BinaryData getChunkingStrategy() {
        return this.chunkingStrategy;
    }

    /**
     * Set the chunkingStrategy property: The chunking_strategy property.
     * 
     * @param chunkingStrategy the chunkingStrategy value to set.
     * @return the CreateVectorStoreFileBatchRequest object itself.
     */
    @Metadata(generated = true)
    public CreateVectorStoreFileBatchRequest setChunkingStrategy(BinaryData chunkingStrategy) {
        this.chunkingStrategy = chunkingStrategy;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("file_ids", this.fileIds, (writer, element) -> writer.writeString(element));
        if (this.chunkingStrategy != null) {
            jsonWriter.writeUntypedField("chunking_strategy", this.chunkingStrategy.toObject(Object.class));
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateVectorStoreFileBatchRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateVectorStoreFileBatchRequest if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateVectorStoreFileBatchRequest.
     */
    @Metadata(generated = true)
    public static CreateVectorStoreFileBatchRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> fileIds = null;
            BinaryData chunkingStrategy = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("file_ids".equals(fieldName)) {
                    fileIds = reader.readArray(reader1 -> reader1.getString());
                } else if ("chunking_strategy".equals(fieldName)) {
                    chunkingStrategy
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else {
                    reader.skipChildren();
                }
            }
            CreateVectorStoreFileBatchRequest deserializedCreateVectorStoreFileBatchRequest
                = new CreateVectorStoreFileBatchRequest(fileIds);
            deserializedCreateVectorStoreFileBatchRequest.chunkingStrategy = chunkingStrategy;

            return deserializedCreateVectorStoreFileBatchRequest;
        });
    }
}
