// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The MessageDeltaObjectDelta model.
 */
@Immutable
public final class MessageDeltaObjectDelta implements JsonSerializable<MessageDeltaObjectDelta> {
    /*
     * The entity that produced the message. One of `user` or `assistant`.
     */
    @Generated
    private MessageDeltaObjectDeltaRole role;

    /*
     * The content of the message in array of text and/or images.
     */
    @Generated
    private List<MessageDeltaContent> content;

    /**
     * Creates an instance of MessageDeltaObjectDelta class.
     */
    @Generated
    private MessageDeltaObjectDelta() {
    }

    /**
     * Get the role property: The entity that produced the message. One of `user` or `assistant`.
     * 
     * @return the role value.
     */
    @Generated
    public MessageDeltaObjectDeltaRole getRole() {
        return this.role;
    }

    /**
     * Get the content property: The content of the message in array of text and/or images.
     * 
     * @return the content value.
     */
    @Generated
    public List<MessageDeltaContent> getContent() {
        return this.content;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("role", this.role == null ? null : this.role.toString());
        jsonWriter.writeArrayField("content", this.content, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MessageDeltaObjectDelta from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MessageDeltaObjectDelta if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MessageDeltaObjectDelta.
     */
    @Generated
    public static MessageDeltaObjectDelta fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MessageDeltaObjectDelta deserializedMessageDeltaObjectDelta = new MessageDeltaObjectDelta();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("role".equals(fieldName)) {
                    deserializedMessageDeltaObjectDelta.role
                        = MessageDeltaObjectDeltaRole.fromString(reader.getString());
                } else if ("content".equals(fieldName)) {
                    List<MessageDeltaContent> content
                        = reader.readArray(reader1 -> MessageDeltaContent.fromJson(reader1));
                    deserializedMessageDeltaObjectDelta.content = content;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMessageDeltaObjectDelta;
        });
    }
}
