// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.Map;

/**
 * Represents a step in execution of a run.
 */
@Immutable
public final class RunStepObject implements JsonSerializable<RunStepObject> {
    /*
     * The identifier of the run step, which can be referenced in API endpoints.
     */
    @Generated
    private final String id;

    /*
     * The object type, which is always `thread.run.step`.
     */
    @Generated
    private final String object = "thread.run.step";

    /*
     * The Unix timestamp (in seconds) for when the run step was created.
     */
    @Generated
    private final long createdAt;

    /*
     * The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
     */
    @Generated
    private final String assistantId;

    /*
     * The ID of the [thread](/docs/api-reference/threads) that was run.
     */
    @Generated
    private final String threadId;

    /*
     * The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
     */
    @Generated
    private final String runId;

    /*
     * The type of run step, which can be either `message_creation` or `tool_calls`.
     */
    @Generated
    private final RunStepObjectType type;

    /*
     * The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
     */
    @Generated
    private final RunStepObjectStatus status;

    /*
     * The details of the run step.
     */
    @Generated
    private final RunStepObjectStepDetails stepDetails;

    /*
     * The last error associated with this run step. Will be `null` if there are no errors.
     */
    @Generated
    private final RunStepObjectLastError lastError;

    /*
     * The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is
     * expired.
     */
    @Generated
    private final Long expiredAt;

    /*
     * The Unix timestamp (in seconds) for when the run step was cancelled.
     */
    @Generated
    private final Long cancelledAt;

    /*
     * The Unix timestamp (in seconds) for when the run step failed.
     */
    @Generated
    private final Long failedAt;

    /*
     * The Unix timestamp (in seconds) for when the run step completed.
     */
    @Generated
    private final Long completedAt;

    /*
     * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional
     * information about the object in a structured format. Keys can be a maximum of 64 characters long and values can
     * be a maximum of 512 characters long.
     */
    @Generated
    private final Map<String, String> metadata;

    /*
     * The usage property.
     */
    @Generated
    private final RunStepCompletionUsage usage;

    /**
     * Creates an instance of RunStepObject class.
     * 
     * @param id the id value to set.
     * @param createdAt the createdAt value to set.
     * @param assistantId the assistantId value to set.
     * @param threadId the threadId value to set.
     * @param runId the runId value to set.
     * @param type the type value to set.
     * @param status the status value to set.
     * @param stepDetails the stepDetails value to set.
     * @param lastError the lastError value to set.
     * @param expiredAt the expiredAt value to set.
     * @param cancelledAt the cancelledAt value to set.
     * @param failedAt the failedAt value to set.
     * @param completedAt the completedAt value to set.
     * @param metadata the metadata value to set.
     * @param usage the usage value to set.
     */
    @Generated
    private RunStepObject(String id, OffsetDateTime createdAt, String assistantId, String threadId, String runId,
        RunStepObjectType type, RunStepObjectStatus status, RunStepObjectStepDetails stepDetails,
        RunStepObjectLastError lastError, OffsetDateTime expiredAt, OffsetDateTime cancelledAt, OffsetDateTime failedAt,
        OffsetDateTime completedAt, Map<String, String> metadata, RunStepCompletionUsage usage) {
        this.id = id;
        if (createdAt == null) {
            this.createdAt = 0L;
        } else {
            this.createdAt = createdAt.toEpochSecond();
        }
        this.assistantId = assistantId;
        this.threadId = threadId;
        this.runId = runId;
        this.type = type;
        this.status = status;
        this.stepDetails = stepDetails;
        this.lastError = lastError;
        if (expiredAt == null) {
            this.expiredAt = null;
        } else {
            this.expiredAt = expiredAt.toEpochSecond();
        }
        if (cancelledAt == null) {
            this.cancelledAt = null;
        } else {
            this.cancelledAt = cancelledAt.toEpochSecond();
        }
        if (failedAt == null) {
            this.failedAt = null;
        } else {
            this.failedAt = failedAt.toEpochSecond();
        }
        if (completedAt == null) {
            this.completedAt = null;
        } else {
            this.completedAt = completedAt.toEpochSecond();
        }
        this.metadata = metadata;
        this.usage = usage;
    }

    /**
     * Get the id property: The identifier of the run step, which can be referenced in API endpoints.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the object property: The object type, which is always `thread.run.step`.
     * 
     * @return the object value.
     */
    @Generated
    public String getObject() {
        return this.object;
    }

    /**
     * Get the createdAt property: The Unix timestamp (in seconds) for when the run step was created.
     * 
     * @return the createdAt value.
     */
    @Generated
    public OffsetDateTime getCreatedAt() {
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.createdAt), ZoneOffset.UTC);
    }

    /**
     * Get the assistantId property: The ID of the [assistant](/docs/api-reference/assistants) associated with the run
     * step.
     * 
     * @return the assistantId value.
     */
    @Generated
    public String getAssistantId() {
        return this.assistantId;
    }

    /**
     * Get the threadId property: The ID of the [thread](/docs/api-reference/threads) that was run.
     * 
     * @return the threadId value.
     */
    @Generated
    public String getThreadId() {
        return this.threadId;
    }

    /**
     * Get the runId property: The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
     * 
     * @return the runId value.
     */
    @Generated
    public String getRunId() {
        return this.runId;
    }

    /**
     * Get the type property: The type of run step, which can be either `message_creation` or `tool_calls`.
     * 
     * @return the type value.
     */
    @Generated
    public RunStepObjectType getType() {
        return this.type;
    }

    /**
     * Get the status property: The status of the run step, which can be either `in_progress`, `cancelled`, `failed`,
     * `completed`, or `expired`.
     * 
     * @return the status value.
     */
    @Generated
    public RunStepObjectStatus getStatus() {
        return this.status;
    }

    /**
     * Get the stepDetails property: The details of the run step.
     * 
     * @return the stepDetails value.
     */
    @Generated
    public RunStepObjectStepDetails getStepDetails() {
        return this.stepDetails;
    }

    /**
     * Get the lastError property: The last error associated with this run step. Will be `null` if there are no errors.
     * 
     * @return the lastError value.
     */
    @Generated
    public RunStepObjectLastError getLastError() {
        return this.lastError;
    }

    /**
     * Get the expiredAt property: The Unix timestamp (in seconds) for when the run step expired. A step is considered
     * expired if the parent run is expired.
     * 
     * @return the expiredAt value.
     */
    @Generated
    public OffsetDateTime getExpiredAt() {
        if (this.expiredAt == null) {
            return null;
        }
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.expiredAt), ZoneOffset.UTC);
    }

    /**
     * Get the cancelledAt property: The Unix timestamp (in seconds) for when the run step was cancelled.
     * 
     * @return the cancelledAt value.
     */
    @Generated
    public OffsetDateTime getCancelledAt() {
        if (this.cancelledAt == null) {
            return null;
        }
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.cancelledAt), ZoneOffset.UTC);
    }

    /**
     * Get the failedAt property: The Unix timestamp (in seconds) for when the run step failed.
     * 
     * @return the failedAt value.
     */
    @Generated
    public OffsetDateTime getFailedAt() {
        if (this.failedAt == null) {
            return null;
        }
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.failedAt), ZoneOffset.UTC);
    }

    /**
     * Get the completedAt property: The Unix timestamp (in seconds) for when the run step completed.
     * 
     * @return the completedAt value.
     */
    @Generated
    public OffsetDateTime getCompletedAt() {
        if (this.completedAt == null) {
            return null;
        }
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.completedAt), ZoneOffset.UTC);
    }

    /**
     * Get the metadata property: Set of 16 key-value pairs that can be attached to an object. This can be useful for
     * storing additional information about the object in a structured format. Keys can be a maximum of 64 characters
     * long and values can be a maximum of 512 characters long.
     * 
     * @return the metadata value.
     */
    @Generated
    public Map<String, String> getMetadata() {
        return this.metadata;
    }

    /**
     * Get the usage property: The usage property.
     * 
     * @return the usage value.
     */
    @Generated
    public RunStepCompletionUsage getUsage() {
        return this.usage;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("object", this.object);
        jsonWriter.writeLongField("created_at", this.createdAt);
        jsonWriter.writeStringField("assistant_id", this.assistantId);
        jsonWriter.writeStringField("thread_id", this.threadId);
        jsonWriter.writeStringField("run_id", this.runId);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeJsonField("step_details", this.stepDetails);
        jsonWriter.writeJsonField("last_error", this.lastError);
        jsonWriter.writeNumberField("expired_at", this.expiredAt);
        jsonWriter.writeNumberField("cancelled_at", this.cancelledAt);
        jsonWriter.writeNumberField("failed_at", this.failedAt);
        jsonWriter.writeNumberField("completed_at", this.completedAt);
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("usage", this.usage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RunStepObject from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RunStepObject if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RunStepObject.
     */
    @Generated
    public static RunStepObject fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            OffsetDateTime createdAt = null;
            String assistantId = null;
            String threadId = null;
            String runId = null;
            RunStepObjectType type = null;
            RunStepObjectStatus status = null;
            RunStepObjectStepDetails stepDetails = null;
            RunStepObjectLastError lastError = null;
            OffsetDateTime expiredAt = null;
            OffsetDateTime cancelledAt = null;
            OffsetDateTime failedAt = null;
            OffsetDateTime completedAt = null;
            Map<String, String> metadata = null;
            RunStepCompletionUsage usage = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("created_at".equals(fieldName)) {
                    createdAt = OffsetDateTime.ofInstant(Instant.ofEpochSecond(reader.getLong()), ZoneOffset.UTC);
                } else if ("assistant_id".equals(fieldName)) {
                    assistantId = reader.getString();
                } else if ("thread_id".equals(fieldName)) {
                    threadId = reader.getString();
                } else if ("run_id".equals(fieldName)) {
                    runId = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = RunStepObjectType.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    status = RunStepObjectStatus.fromString(reader.getString());
                } else if ("step_details".equals(fieldName)) {
                    stepDetails = RunStepObjectStepDetails.fromJson(reader);
                } else if ("last_error".equals(fieldName)) {
                    lastError = RunStepObjectLastError.fromJson(reader);
                } else if ("expired_at".equals(fieldName)) {
                    Long expiredAtHolder = reader.getNullable(JsonReader::getLong);
                    if (expiredAtHolder != null) {
                        expiredAt = OffsetDateTime.ofInstant(Instant.ofEpochSecond(expiredAtHolder), ZoneOffset.UTC);
                    }
                } else if ("cancelled_at".equals(fieldName)) {
                    Long cancelledAtHolder = reader.getNullable(JsonReader::getLong);
                    if (cancelledAtHolder != null) {
                        cancelledAt
                            = OffsetDateTime.ofInstant(Instant.ofEpochSecond(cancelledAtHolder), ZoneOffset.UTC);
                    }
                } else if ("failed_at".equals(fieldName)) {
                    Long failedAtHolder = reader.getNullable(JsonReader::getLong);
                    if (failedAtHolder != null) {
                        failedAt = OffsetDateTime.ofInstant(Instant.ofEpochSecond(failedAtHolder), ZoneOffset.UTC);
                    }
                } else if ("completed_at".equals(fieldName)) {
                    Long completedAtHolder = reader.getNullable(JsonReader::getLong);
                    if (completedAtHolder != null) {
                        completedAt
                            = OffsetDateTime.ofInstant(Instant.ofEpochSecond(completedAtHolder), ZoneOffset.UTC);
                    }
                } else if ("metadata".equals(fieldName)) {
                    metadata = reader.readMap(reader1 -> reader1.getString());
                } else if ("usage".equals(fieldName)) {
                    usage = RunStepCompletionUsage.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new RunStepObject(id, createdAt, assistantId, threadId, runId, type, status, stepDetails, lastError,
                expiredAt, cancelledAt, failedAt, completedAt, metadata, usage);
        });
    }
}
