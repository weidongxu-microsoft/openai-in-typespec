// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;

/**
 * The CreateModerationResponseResultCategories model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class CreateModerationResponseResultCategories
    implements JsonSerializable<CreateModerationResponseResultCategories> {
    /*
     * Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual
     * orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is
     * harassment.
     */
    @Metadata(generated = true)
    private final boolean hate;

    /*
     * Hateful content that also includes violence or serious harm towards the targeted group based on race, gender,
     * ethnicity, religion, nationality, sexual orientation, disability status, or caste.
     */
    @Metadata(generated = true)
    private final boolean hateThreatening;

    /*
     * Content that expresses, incites, or promotes harassing language towards any target.
     */
    @Metadata(generated = true)
    private final boolean harassment;

    /*
     * Harassment content that also includes violence or serious harm towards any target.
     */
    @Metadata(generated = true)
    private final boolean harassmentThreatening;

    /*
     * Content that includes instructions or advice that facilitate the planning or execution of wrongdoing, or that
     * gives advice or instruction on how to commit illicit acts. For example, "how to shoplift" would fit this
     * category.
     */
    @Metadata(generated = true)
    private final boolean illicit;

    /*
     * Content that includes instructions or advice that facilitate the planning or execution of wrongdoing that also
     * includes violence, or that gives advice or instruction on the procurement of any weapon.
     */
    @Metadata(generated = true)
    private final boolean illicitViolent;

    /*
     * Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.
     */
    @Metadata(generated = true)
    private final boolean selfHarm;

    /*
     * Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as
     * suicide, cutting, and eating disorders.
     */
    @Metadata(generated = true)
    private final boolean selfHarmIntent;

    /*
     * Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that
     * gives instructions or advice on how to commit such acts.
     */
    @Metadata(generated = true)
    private final boolean selfHarmInstructions;

    /*
     * Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual
     * services (excluding sex education and wellness).
     */
    @Metadata(generated = true)
    private final boolean sexual;

    /*
     * Sexual content that includes an individual who is under 18 years old.
     */
    @Metadata(generated = true)
    private final boolean sexualMinors;

    /*
     * Content that depicts death, violence, or physical injury.
     */
    @Metadata(generated = true)
    private final boolean violence;

    /*
     * Content that depicts death, violence, or physical injury in graphic detail.
     */
    @Metadata(generated = true)
    private final boolean violenceGraphic;

    /**
     * Creates an instance of CreateModerationResponseResultCategories class.
     * 
     * @param hate the hate value to set.
     * @param hateThreatening the hateThreatening value to set.
     * @param harassment the harassment value to set.
     * @param harassmentThreatening the harassmentThreatening value to set.
     * @param illicit the illicit value to set.
     * @param illicitViolent the illicitViolent value to set.
     * @param selfHarm the selfHarm value to set.
     * @param selfHarmIntent the selfHarmIntent value to set.
     * @param selfHarmInstructions the selfHarmInstructions value to set.
     * @param sexual the sexual value to set.
     * @param sexualMinors the sexualMinors value to set.
     * @param violence the violence value to set.
     * @param violenceGraphic the violenceGraphic value to set.
     */
    @Metadata(generated = true)
    private CreateModerationResponseResultCategories(boolean hate, boolean hateThreatening, boolean harassment,
        boolean harassmentThreatening, boolean illicit, boolean illicitViolent, boolean selfHarm,
        boolean selfHarmIntent, boolean selfHarmInstructions, boolean sexual, boolean sexualMinors, boolean violence,
        boolean violenceGraphic) {
        this.hate = hate;
        this.hateThreatening = hateThreatening;
        this.harassment = harassment;
        this.harassmentThreatening = harassmentThreatening;
        this.illicit = illicit;
        this.illicitViolent = illicitViolent;
        this.selfHarm = selfHarm;
        this.selfHarmIntent = selfHarmIntent;
        this.selfHarmInstructions = selfHarmInstructions;
        this.sexual = sexual;
        this.sexualMinors = sexualMinors;
        this.violence = violence;
        this.violenceGraphic = violenceGraphic;
    }

    /**
     * Get the hate property: Content that expresses, incites, or promotes hate based on race, gender, ethnicity,
     * religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected
     * groups (e.g., chess players) is harassment.
     * 
     * @return the hate value.
     */
    @Metadata(generated = true)
    public boolean isHate() {
        return this.hate;
    }

    /**
     * Get the hateThreatening property: Hateful content that also includes violence or serious harm towards the
     * targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or
     * caste.
     * 
     * @return the hateThreatening value.
     */
    @Metadata(generated = true)
    public boolean isHateThreatening() {
        return this.hateThreatening;
    }

    /**
     * Get the harassment property: Content that expresses, incites, or promotes harassing language towards any target.
     * 
     * @return the harassment value.
     */
    @Metadata(generated = true)
    public boolean isHarassment() {
        return this.harassment;
    }

    /**
     * Get the harassmentThreatening property: Harassment content that also includes violence or serious harm towards
     * any target.
     * 
     * @return the harassmentThreatening value.
     */
    @Metadata(generated = true)
    public boolean isHarassmentThreatening() {
        return this.harassmentThreatening;
    }

    /**
     * Get the illicit property: Content that includes instructions or advice that facilitate the planning or execution
     * of wrongdoing, or that gives advice or instruction on how to commit illicit acts. For example, "how to shoplift"
     * would fit this category.
     * 
     * @return the illicit value.
     */
    @Metadata(generated = true)
    public boolean isIllicit() {
        return this.illicit;
    }

    /**
     * Get the illicitViolent property: Content that includes instructions or advice that facilitate the planning or
     * execution of wrongdoing that also includes violence, or that gives advice or instruction on the procurement of
     * any weapon.
     * 
     * @return the illicitViolent value.
     */
    @Metadata(generated = true)
    public boolean isIllicitViolent() {
        return this.illicitViolent;
    }

    /**
     * Get the selfHarm property: Content that promotes, encourages, or depicts acts of self-harm, such as suicide,
     * cutting, and eating disorders.
     * 
     * @return the selfHarm value.
     */
    @Metadata(generated = true)
    public boolean isSelfHarm() {
        return this.selfHarm;
    }

    /**
     * Get the selfHarmIntent property: Content where the speaker expresses that they are engaging or intend to engage
     * in acts of self-harm, such as suicide, cutting, and eating disorders.
     * 
     * @return the selfHarmIntent value.
     */
    @Metadata(generated = true)
    public boolean isSelfHarmIntent() {
        return this.selfHarmIntent;
    }

    /**
     * Get the selfHarmInstructions property: Content that encourages performing acts of self-harm, such as suicide,
     * cutting, and eating disorders, or that gives instructions or advice on how to commit such acts.
     * 
     * @return the selfHarmInstructions value.
     */
    @Metadata(generated = true)
    public boolean isSelfHarmInstructions() {
        return this.selfHarmInstructions;
    }

    /**
     * Get the sexual property: Content meant to arouse sexual excitement, such as the description of sexual activity,
     * or that promotes sexual services (excluding sex education and wellness).
     * 
     * @return the sexual value.
     */
    @Metadata(generated = true)
    public boolean isSexual() {
        return this.sexual;
    }

    /**
     * Get the sexualMinors property: Sexual content that includes an individual who is under 18 years old.
     * 
     * @return the sexualMinors value.
     */
    @Metadata(generated = true)
    public boolean isSexualMinors() {
        return this.sexualMinors;
    }

    /**
     * Get the violence property: Content that depicts death, violence, or physical injury.
     * 
     * @return the violence value.
     */
    @Metadata(generated = true)
    public boolean isViolence() {
        return this.violence;
    }

    /**
     * Get the violenceGraphic property: Content that depicts death, violence, or physical injury in graphic detail.
     * 
     * @return the violenceGraphic value.
     */
    @Metadata(generated = true)
    public boolean isViolenceGraphic() {
        return this.violenceGraphic;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("hate", this.hate);
        jsonWriter.writeBooleanField("hate/threatening", this.hateThreatening);
        jsonWriter.writeBooleanField("harassment", this.harassment);
        jsonWriter.writeBooleanField("harassment/threatening", this.harassmentThreatening);
        jsonWriter.writeBooleanField("illicit", this.illicit);
        jsonWriter.writeBooleanField("illicit/violent", this.illicitViolent);
        jsonWriter.writeBooleanField("self-harm", this.selfHarm);
        jsonWriter.writeBooleanField("self-harm/intent", this.selfHarmIntent);
        jsonWriter.writeBooleanField("self-harm/instructions", this.selfHarmInstructions);
        jsonWriter.writeBooleanField("sexual", this.sexual);
        jsonWriter.writeBooleanField("sexual/minors", this.sexualMinors);
        jsonWriter.writeBooleanField("violence", this.violence);
        jsonWriter.writeBooleanField("violence/graphic", this.violenceGraphic);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateModerationResponseResultCategories from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateModerationResponseResultCategories if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateModerationResponseResultCategories.
     */
    @Metadata(generated = true)
    public static CreateModerationResponseResultCategories fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean hate = false;
            boolean hateThreatening = false;
            boolean harassment = false;
            boolean harassmentThreatening = false;
            boolean illicit = false;
            boolean illicitViolent = false;
            boolean selfHarm = false;
            boolean selfHarmIntent = false;
            boolean selfHarmInstructions = false;
            boolean sexual = false;
            boolean sexualMinors = false;
            boolean violence = false;
            boolean violenceGraphic = false;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hate".equals(fieldName)) {
                    hate = reader.getBoolean();
                } else if ("hate/threatening".equals(fieldName)) {
                    hateThreatening = reader.getBoolean();
                } else if ("harassment".equals(fieldName)) {
                    harassment = reader.getBoolean();
                } else if ("harassment/threatening".equals(fieldName)) {
                    harassmentThreatening = reader.getBoolean();
                } else if ("illicit".equals(fieldName)) {
                    illicit = reader.getBoolean();
                } else if ("illicit/violent".equals(fieldName)) {
                    illicitViolent = reader.getBoolean();
                } else if ("self-harm".equals(fieldName)) {
                    selfHarm = reader.getBoolean();
                } else if ("self-harm/intent".equals(fieldName)) {
                    selfHarmIntent = reader.getBoolean();
                } else if ("self-harm/instructions".equals(fieldName)) {
                    selfHarmInstructions = reader.getBoolean();
                } else if ("sexual".equals(fieldName)) {
                    sexual = reader.getBoolean();
                } else if ("sexual/minors".equals(fieldName)) {
                    sexualMinors = reader.getBoolean();
                } else if ("violence".equals(fieldName)) {
                    violence = reader.getBoolean();
                } else if ("violence/graphic".equals(fieldName)) {
                    violenceGraphic = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }
            return new CreateModerationResponseResultCategories(hate, hateThreatening, harassment,
                harassmentThreatening, illicit, illicitViolent, selfHarm, selfHarmIntent, selfHarmInstructions, sexual,
                sexualMinors, violence, violenceGraphic);
        });
    }
}
