// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.util.ExpandableEnum;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * The available set of mode-level, string literal tool_choice options for the realtime endpoint.
 */
public final class RealtimeToolChoiceLiteral implements ExpandableEnum<String> {
    private static final Map<String, RealtimeToolChoiceLiteral> VALUES = new ConcurrentHashMap<>();

    /**
     * Specifies that the model should freely determine which tool or tools, if any, to call.
     */
    @Metadata(generated = true)
    public static final RealtimeToolChoiceLiteral AUTO = fromString("auto");

    /**
     * Specifies that the model should call no tools whatsoever.
     */
    @Metadata(generated = true)
    public static final RealtimeToolChoiceLiteral NONE = fromString("none");

    /**
     * Specifies that the model should call at least one tool.
     */
    @Metadata(generated = true)
    public static final RealtimeToolChoiceLiteral REQUIRED = fromString("required");

    private final String name;

    private RealtimeToolChoiceLiteral(String name) {
        this.name = name;
    }

    /**
     * Creates or finds a RealtimeToolChoiceLiteral.
     * 
     * @param name a name to look for.
     * @return the corresponding RealtimeToolChoiceLiteral.
     */
    @Metadata(generated = true)
    public static RealtimeToolChoiceLiteral fromString(String name) {
        if (name == null) {
            return null;
        }
        RealtimeToolChoiceLiteral value = VALUES.get(name);
        if (value != null) {
            return value;
        }
        return VALUES.computeIfAbsent(name, key -> new RealtimeToolChoiceLiteral(key));
    }

    /**
     * Gets the value of the RealtimeToolChoiceLiteral instance.
     * 
     * @return the value of the RealtimeToolChoiceLiteral instance.
     */
    @Metadata(generated = true)
    @Override
    public String getValue() {
        return this.name;
    }

    @Metadata(generated = true)
    @Override
    public String toString() {
        return name;
    }
}
