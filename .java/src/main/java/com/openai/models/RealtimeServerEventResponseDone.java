// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;

/**
 * Returned when a Response is done streaming. Always emitted, no matter the final state.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class RealtimeServerEventResponseDone extends RealtimeServerEvent {
    /*
     * The type property.
     */
    @Metadata(generated = true)
    private RealtimeServerEventType type = RealtimeServerEventType.RESPONSE_DONE;

    /*
     * The response resource.
     */
    @Metadata(generated = true)
    private final RealtimeResponse response;

    /**
     * Creates an instance of RealtimeServerEventResponseDone class.
     * 
     * @param eventId the eventId value to set.
     * @param response the response value to set.
     */
    @Metadata(generated = true)
    private RealtimeServerEventResponseDone(String eventId, RealtimeResponse response) {
        super(eventId);
        this.response = response;
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Metadata(generated = true)
    @Override
    public RealtimeServerEventType getType() {
        return this.type;
    }

    /**
     * Get the response property: The response resource.
     * 
     * @return the response value.
     */
    @Metadata(generated = true)
    public RealtimeResponse getResponse() {
        return this.response;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event_id", getEventId());
        jsonWriter.writeJsonField("response", this.response);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RealtimeServerEventResponseDone from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RealtimeServerEventResponseDone if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RealtimeServerEventResponseDone.
     */
    @Metadata(generated = true)
    public static RealtimeServerEventResponseDone fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String eventId = null;
            RealtimeResponse response = null;
            RealtimeServerEventType type = RealtimeServerEventType.RESPONSE_DONE;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("event_id".equals(fieldName)) {
                    eventId = reader.getString();
                } else if ("response".equals(fieldName)) {
                    response = RealtimeResponse.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    type = RealtimeServerEventType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            RealtimeServerEventResponseDone deserializedRealtimeServerEventResponseDone
                = new RealtimeServerEventResponseDone(eventId, response);
            deserializedRealtimeServerEventResponseDone.type = type;

            return deserializedRealtimeServerEventResponseDone;
        });
    }
}
