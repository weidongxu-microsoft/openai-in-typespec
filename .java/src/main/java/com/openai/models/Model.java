// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;

/**
 * Describes an OpenAI model offering that can be used with the API.
 */
@Immutable
public final class Model implements JsonSerializable<Model> {
    /*
     * The model identifier, which can be referenced in the API endpoints.
     */
    @Generated
    private final String id;

    /*
     * The Unix timestamp (in seconds) when the model was created.
     */
    @Generated
    private final long created;

    /*
     * The object type, which is always "model".
     */
    @Generated
    private final String object = "model";

    /*
     * The organization that owns the model.
     */
    @Generated
    private final String ownedBy;

    /**
     * Creates an instance of Model class.
     * 
     * @param id the id value to set.
     * @param created the created value to set.
     * @param ownedBy the ownedBy value to set.
     */
    @Generated
    private Model(String id, OffsetDateTime created, String ownedBy) {
        this.id = id;
        if (created == null) {
            this.created = 0L;
        } else {
            this.created = created.toEpochSecond();
        }
        this.ownedBy = ownedBy;
    }

    /**
     * Get the id property: The model identifier, which can be referenced in the API endpoints.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the created property: The Unix timestamp (in seconds) when the model was created.
     * 
     * @return the created value.
     */
    @Generated
    public OffsetDateTime getCreated() {
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.created), ZoneOffset.UTC);
    }

    /**
     * Get the object property: The object type, which is always "model".
     * 
     * @return the object value.
     */
    @Generated
    public String getObject() {
        return this.object;
    }

    /**
     * Get the ownedBy property: The organization that owns the model.
     * 
     * @return the ownedBy value.
     */
    @Generated
    public String getOwnedBy() {
        return this.ownedBy;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeLongField("created", this.created);
        jsonWriter.writeStringField("object", this.object);
        jsonWriter.writeStringField("owned_by", this.ownedBy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Model from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Model if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Model.
     */
    @Generated
    public static Model fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            OffsetDateTime created = null;
            String ownedBy = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("created".equals(fieldName)) {
                    created = OffsetDateTime.ofInstant(Instant.ofEpochSecond(reader.getLong()), ZoneOffset.UTC);
                } else if ("owned_by".equals(fieldName)) {
                    ownedBy = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new Model(id, created, ownedBy);
        });
    }
}
