// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The CreateCompletionResponseChoice model.
 */
@Immutable
public final class CreateCompletionResponseChoice implements JsonSerializable<CreateCompletionResponseChoice> {
    /*
     * The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a
     * provided stop sequence,
     * `length` if the maximum number of tokens specified in the request was reached,
     * or `content_filter` if content was omitted due to a flag from our content filters.
     */
    @Generated
    private final CreateCompletionResponseChoiceFinishReason finishReason;

    /*
     * The index property.
     */
    @Generated
    private final int index;

    /*
     * The logprobs property.
     */
    @Generated
    private final CreateCompletionResponseChoiceLogprobs logprobs;

    /*
     * The text property.
     */
    @Generated
    private final String text;

    /**
     * Creates an instance of CreateCompletionResponseChoice class.
     * 
     * @param finishReason the finishReason value to set.
     * @param index the index value to set.
     * @param logprobs the logprobs value to set.
     * @param text the text value to set.
     */
    @Generated
    private CreateCompletionResponseChoice(CreateCompletionResponseChoiceFinishReason finishReason, int index,
        CreateCompletionResponseChoiceLogprobs logprobs, String text) {
        this.finishReason = finishReason;
        this.index = index;
        this.logprobs = logprobs;
        this.text = text;
    }

    /**
     * Get the finishReason property: The reason the model stopped generating tokens. This will be `stop` if the model
     * hit a natural stop point or a provided stop sequence,
     * `length` if the maximum number of tokens specified in the request was reached,
     * or `content_filter` if content was omitted due to a flag from our content filters.
     * 
     * @return the finishReason value.
     */
    @Generated
    public CreateCompletionResponseChoiceFinishReason getFinishReason() {
        return this.finishReason;
    }

    /**
     * Get the index property: The index property.
     * 
     * @return the index value.
     */
    @Generated
    public int getIndex() {
        return this.index;
    }

    /**
     * Get the logprobs property: The logprobs property.
     * 
     * @return the logprobs value.
     */
    @Generated
    public CreateCompletionResponseChoiceLogprobs getLogprobs() {
        return this.logprobs;
    }

    /**
     * Get the text property: The text property.
     * 
     * @return the text value.
     */
    @Generated
    public String getText() {
        return this.text;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("finish_reason", this.finishReason == null ? null : this.finishReason.toString());
        jsonWriter.writeIntField("index", this.index);
        jsonWriter.writeJsonField("logprobs", this.logprobs);
        jsonWriter.writeStringField("text", this.text);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateCompletionResponseChoice from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateCompletionResponseChoice if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateCompletionResponseChoice.
     */
    @Generated
    public static CreateCompletionResponseChoice fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CreateCompletionResponseChoiceFinishReason finishReason = null;
            int index = 0;
            CreateCompletionResponseChoiceLogprobs logprobs = null;
            String text = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("finish_reason".equals(fieldName)) {
                    finishReason = CreateCompletionResponseChoiceFinishReason.fromString(reader.getString());
                } else if ("index".equals(fieldName)) {
                    index = reader.getInt();
                } else if ("logprobs".equals(fieldName)) {
                    logprobs = CreateCompletionResponseChoiceLogprobs.fromJson(reader);
                } else if ("text".equals(fieldName)) {
                    text = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new CreateCompletionResponseChoice(finishReason, index, logprobs, text);
        });
    }
}
