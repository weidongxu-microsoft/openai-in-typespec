// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.Map;

/**
 * A vector store is a collection of processed files can be used by the `file_search` tool.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class VectorStoreObject implements JsonSerializable<VectorStoreObject> {
    /*
     * The identifier, which can be referenced in API endpoints.
     */
    @Metadata(generated = true)
    private final String id;

    /*
     * The object type, which is always `vector_store`.
     */
    @Metadata(generated = true)
    private final String object = "vector_store";

    /*
     * The Unix timestamp (in seconds) for when the vector store was created.
     */
    @Metadata(generated = true)
    private final long createdAt;

    /*
     * The name of the vector store.
     */
    @Metadata(generated = true)
    private final String name;

    /*
     * The total number of bytes used by the files in the vector store.
     */
    @Metadata(generated = true)
    private final int usageBytes;

    /*
     * The file_counts property.
     */
    @Metadata(generated = true)
    private final VectorStoreObjectFileCounts fileCounts;

    /*
     * The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of
     * `completed` indicates that the vector store is ready for use.
     */
    @Metadata(generated = true)
    private final VectorStoreObjectStatus status;

    /*
     * The expires_after property.
     */
    @Metadata(generated = true)
    private VectorStoreExpirationAfter expiresAfter;

    /*
     * The Unix timestamp (in seconds) for when the vector store will expire.
     */
    @Metadata(generated = true)
    private Long expiresAt;

    /*
     * The Unix timestamp (in seconds) for when the vector store was last active.
     */
    @Metadata(generated = true)
    private final Long lastActiveAt;

    /*
     * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional
     * information about the object in a structured format. Keys can be a maximum of 64 characters long and values can
     * be a maximum of 512 characters long.
     */
    @Metadata(generated = true)
    private final Map<String, String> metadata;

    /**
     * Creates an instance of VectorStoreObject class.
     * 
     * @param id the id value to set.
     * @param createdAt the createdAt value to set.
     * @param name the name value to set.
     * @param usageBytes the usageBytes value to set.
     * @param fileCounts the fileCounts value to set.
     * @param status the status value to set.
     * @param lastActiveAt the lastActiveAt value to set.
     * @param metadata the metadata value to set.
     */
    @Metadata(generated = true)
    private VectorStoreObject(String id, OffsetDateTime createdAt, String name, int usageBytes,
        VectorStoreObjectFileCounts fileCounts, VectorStoreObjectStatus status, OffsetDateTime lastActiveAt,
        Map<String, String> metadata) {
        this.id = id;
        if (createdAt == null) {
            this.createdAt = 0L;
        } else {
            this.createdAt = createdAt.toEpochSecond();
        }
        this.name = name;
        this.usageBytes = usageBytes;
        this.fileCounts = fileCounts;
        this.status = status;
        if (lastActiveAt == null) {
            this.lastActiveAt = null;
        } else {
            this.lastActiveAt = lastActiveAt.toEpochSecond();
        }
        this.metadata = metadata;
    }

    /**
     * Get the id property: The identifier, which can be referenced in API endpoints.
     * 
     * @return the id value.
     */
    @Metadata(generated = true)
    public String getId() {
        return this.id;
    }

    /**
     * Get the object property: The object type, which is always `vector_store`.
     * 
     * @return the object value.
     */
    @Metadata(generated = true)
    public String getObject() {
        return this.object;
    }

    /**
     * Get the createdAt property: The Unix timestamp (in seconds) for when the vector store was created.
     * 
     * @return the createdAt value.
     */
    @Metadata(generated = true)
    public OffsetDateTime getCreatedAt() {
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.createdAt), ZoneOffset.UTC);
    }

    /**
     * Get the name property: The name of the vector store.
     * 
     * @return the name value.
     */
    @Metadata(generated = true)
    public String getName() {
        return this.name;
    }

    /**
     * Get the usageBytes property: The total number of bytes used by the files in the vector store.
     * 
     * @return the usageBytes value.
     */
    @Metadata(generated = true)
    public int getUsageBytes() {
        return this.usageBytes;
    }

    /**
     * Get the fileCounts property: The file_counts property.
     * 
     * @return the fileCounts value.
     */
    @Metadata(generated = true)
    public VectorStoreObjectFileCounts getFileCounts() {
        return this.fileCounts;
    }

    /**
     * Get the status property: The status of the vector store, which can be either `expired`, `in_progress`, or
     * `completed`. A status of `completed` indicates that the vector store is ready for use.
     * 
     * @return the status value.
     */
    @Metadata(generated = true)
    public VectorStoreObjectStatus getStatus() {
        return this.status;
    }

    /**
     * Get the expiresAfter property: The expires_after property.
     * 
     * @return the expiresAfter value.
     */
    @Metadata(generated = true)
    public VectorStoreExpirationAfter getExpiresAfter() {
        return this.expiresAfter;
    }

    /**
     * Get the expiresAt property: The Unix timestamp (in seconds) for when the vector store will expire.
     * 
     * @return the expiresAt value.
     */
    @Metadata(generated = true)
    public OffsetDateTime getExpiresAt() {
        if (this.expiresAt == null) {
            return null;
        }
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.expiresAt), ZoneOffset.UTC);
    }

    /**
     * Get the lastActiveAt property: The Unix timestamp (in seconds) for when the vector store was last active.
     * 
     * @return the lastActiveAt value.
     */
    @Metadata(generated = true)
    public OffsetDateTime getLastActiveAt() {
        if (this.lastActiveAt == null) {
            return null;
        }
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.lastActiveAt), ZoneOffset.UTC);
    }

    /**
     * Get the metadata property: Set of 16 key-value pairs that can be attached to an object. This can be useful for
     * storing additional information about the object in a structured format. Keys can be a maximum of 64 characters
     * long and values can be a maximum of 512 characters long.
     * 
     * @return the metadata value.
     */
    @Metadata(generated = true)
    public Map<String, String> getMetadata() {
        return this.metadata;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("object", this.object);
        jsonWriter.writeLongField("created_at", this.createdAt);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeIntField("usage_bytes", this.usageBytes);
        jsonWriter.writeJsonField("file_counts", this.fileCounts);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeNumberField("last_active_at", this.lastActiveAt);
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("expires_after", this.expiresAfter);
        jsonWriter.writeNumberField("expires_at", this.expiresAt);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VectorStoreObject from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VectorStoreObject if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VectorStoreObject.
     */
    @Metadata(generated = true)
    public static VectorStoreObject fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            OffsetDateTime createdAt = null;
            String name = null;
            int usageBytes = 0;
            VectorStoreObjectFileCounts fileCounts = null;
            VectorStoreObjectStatus status = null;
            OffsetDateTime lastActiveAt = null;
            Map<String, String> metadata = null;
            VectorStoreExpirationAfter expiresAfter = null;
            Long expiresAt = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("created_at".equals(fieldName)) {
                    createdAt = OffsetDateTime.ofInstant(Instant.ofEpochSecond(reader.getLong()), ZoneOffset.UTC);
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("usage_bytes".equals(fieldName)) {
                    usageBytes = reader.getInt();
                } else if ("file_counts".equals(fieldName)) {
                    fileCounts = VectorStoreObjectFileCounts.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    status = VectorStoreObjectStatus.fromString(reader.getString());
                } else if ("last_active_at".equals(fieldName)) {
                    Long lastActiveAtHolder = reader.getNullable(JsonReader::getLong);
                    if (lastActiveAtHolder != null) {
                        lastActiveAt
                            = OffsetDateTime.ofInstant(Instant.ofEpochSecond(lastActiveAtHolder), ZoneOffset.UTC);
                    }
                } else if ("metadata".equals(fieldName)) {
                    metadata = reader.readMap(reader1 -> reader1.getString());
                } else if ("expires_after".equals(fieldName)) {
                    expiresAfter = VectorStoreExpirationAfter.fromJson(reader);
                } else if ("expires_at".equals(fieldName)) {
                    expiresAt = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }
            VectorStoreObject deserializedVectorStoreObject
                = new VectorStoreObject(id, createdAt, name, usageBytes, fileCounts, status, lastActiveAt, metadata);
            deserializedVectorStoreObject.expiresAfter = expiresAfter;
            deserializedVectorStoreObject.expiresAt = expiresAt;

            return deserializedVectorStoreObject;
        });
    }
}
