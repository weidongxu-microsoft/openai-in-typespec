// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The UpdateVectorStoreRequest model.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class UpdateVectorStoreRequest implements JsonSerializable<UpdateVectorStoreRequest> {
    /*
     * The name of the vector store.
     */
    @Metadata(generated = true)
    private String name;

    /*
     * The expires_after property.
     */
    @Metadata(generated = true)
    private VectorStoreExpirationAfter expiresAfter;

    /*
     * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional
     * information about the object in a structured format. Keys can be a maximum of 64 characters long and values can
     * be a maximum of 512 characters long.
     */
    @Metadata(generated = true)
    private Map<String, String> metadata;

    /**
     * Creates an instance of UpdateVectorStoreRequest class.
     */
    @Metadata(generated = true)
    public UpdateVectorStoreRequest() {
    }

    /**
     * Get the name property: The name of the vector store.
     * 
     * @return the name value.
     */
    @Metadata(generated = true)
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The name of the vector store.
     * 
     * @param name the name value to set.
     * @return the UpdateVectorStoreRequest object itself.
     */
    @Metadata(generated = true)
    public UpdateVectorStoreRequest setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the expiresAfter property: The expires_after property.
     * 
     * @return the expiresAfter value.
     */
    @Metadata(generated = true)
    public VectorStoreExpirationAfter getExpiresAfter() {
        return this.expiresAfter;
    }

    /**
     * Set the expiresAfter property: The expires_after property.
     * 
     * @param expiresAfter the expiresAfter value to set.
     * @return the UpdateVectorStoreRequest object itself.
     */
    @Metadata(generated = true)
    public UpdateVectorStoreRequest setExpiresAfter(VectorStoreExpirationAfter expiresAfter) {
        this.expiresAfter = expiresAfter;
        return this;
    }

    /**
     * Get the metadata property: Set of 16 key-value pairs that can be attached to an object. This can be useful for
     * storing additional information about the object in a structured format. Keys can be a maximum of 64 characters
     * long and values can be a maximum of 512 characters long.
     * 
     * @return the metadata value.
     */
    @Metadata(generated = true)
    public Map<String, String> getMetadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Set of 16 key-value pairs that can be attached to an object. This can be useful for
     * storing additional information about the object in a structured format. Keys can be a maximum of 64 characters
     * long and values can be a maximum of 512 characters long.
     * 
     * @param metadata the metadata value to set.
     * @return the UpdateVectorStoreRequest object itself.
     */
    @Metadata(generated = true)
    public UpdateVectorStoreRequest setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("expires_after", this.expiresAfter);
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateVectorStoreRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateVectorStoreRequest if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpdateVectorStoreRequest.
     */
    @Metadata(generated = true)
    public static UpdateVectorStoreRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateVectorStoreRequest deserializedUpdateVectorStoreRequest = new UpdateVectorStoreRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedUpdateVectorStoreRequest.name = reader.getString();
                } else if ("expires_after".equals(fieldName)) {
                    deserializedUpdateVectorStoreRequest.expiresAfter = VectorStoreExpirationAfter.fromJson(reader);
                } else if ("metadata".equals(fieldName)) {
                    Map<String, String> metadata = reader.readMap(reader1 -> reader1.getString());
                    deserializedUpdateVectorStoreRequest.metadata = metadata;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateVectorStoreRequest;
        });
    }
}
