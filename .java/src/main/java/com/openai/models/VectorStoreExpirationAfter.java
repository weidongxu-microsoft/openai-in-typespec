// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The expiration policy for a vector store.
 */
@Immutable
public final class VectorStoreExpirationAfter implements JsonSerializable<VectorStoreExpirationAfter> {
    /*
     * Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.
     */
    @Generated
    private final String anchor = "last_active_at";

    /*
     * The number of days after the anchor time that the vector store will expire.
     */
    @Generated
    private final int days;

    /**
     * Creates an instance of VectorStoreExpirationAfter class.
     * 
     * @param days the days value to set.
     */
    @Generated
    public VectorStoreExpirationAfter(int days) {
        this.days = days;
    }

    /**
     * Get the anchor property: Anchor timestamp after which the expiration policy applies. Supported anchors:
     * `last_active_at`.
     * 
     * @return the anchor value.
     */
    @Generated
    public String getAnchor() {
        return this.anchor;
    }

    /**
     * Get the days property: The number of days after the anchor time that the vector store will expire.
     * 
     * @return the days value.
     */
    @Generated
    public int getDays() {
        return this.days;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("anchor", this.anchor);
        jsonWriter.writeIntField("days", this.days);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VectorStoreExpirationAfter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VectorStoreExpirationAfter if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VectorStoreExpirationAfter.
     */
    @Generated
    public static VectorStoreExpirationAfter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int days = 0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("days".equals(fieldName)) {
                    days = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }
            return new VectorStoreExpirationAfter(days);
        });
    }
}
