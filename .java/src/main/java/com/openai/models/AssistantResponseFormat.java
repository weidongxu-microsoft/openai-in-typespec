// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;

/**
 * The AssistantResponseFormat model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public class AssistantResponseFormat implements JsonSerializable<AssistantResponseFormat> {
    /*
     * The type property.
     */
    @Metadata(generated = true)
    private String type = "AssistantResponseFormat";

    /**
     * Creates an instance of AssistantResponseFormat class.
     */
    @Metadata(generated = true)
    public AssistantResponseFormat() {
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Metadata(generated = true)
    public String getType() {
        return this.type;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssistantResponseFormat from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssistantResponseFormat if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssistantResponseFormat.
     */
    @Metadata(generated = true)
    public static AssistantResponseFormat fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("text".equals(discriminatorValue)) {
                    return AssistantResponseFormatText.fromJson(readerToUse.reset());
                } else if ("json_object".equals(discriminatorValue)) {
                    return AssistantResponseFormatJsonObject.fromJson(readerToUse.reset());
                } else if ("json_schema".equals(discriminatorValue)) {
                    return AssistantResponseFormatJsonSchema.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Metadata(generated = true)
    static AssistantResponseFormat fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssistantResponseFormat deserializedAssistantResponseFormat = new AssistantResponseFormat();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedAssistantResponseFormat.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssistantResponseFormat;
        });
    }
}
