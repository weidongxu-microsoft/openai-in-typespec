// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;

/**
 * The RealtimeResponseItem model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public class RealtimeResponseItem implements JsonSerializable<RealtimeResponseItem> {
    /*
     * The type property.
     */
    @Metadata(generated = true)
    private RealtimeItemType type = RealtimeItemType.fromString("RealtimeResponseItem");

    /*
     * The object property.
     */
    @Metadata(generated = true)
    private final String object = "realtime.item";

    /*
     * The id property.
     */
    @Metadata(generated = true)
    private final String id;

    /**
     * Creates an instance of RealtimeResponseItem class.
     * 
     * @param id the id value to set.
     */
    @Metadata(generated = true)
    protected RealtimeResponseItem(String id) {
        this.id = id;
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Metadata(generated = true)
    public RealtimeItemType getType() {
        return this.type;
    }

    /**
     * Get the object property: The object property.
     * 
     * @return the object value.
     */
    @Metadata(generated = true)
    public String getObject() {
        return this.object;
    }

    /**
     * Get the id property: The id property.
     * 
     * @return the id value.
     */
    @Metadata(generated = true)
    public String getId() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("object", this.object);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RealtimeResponseItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RealtimeResponseItem if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RealtimeResponseItem.
     */
    @Metadata(generated = true)
    public static RealtimeResponseItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("message".equals(discriminatorValue)) {
                    return RealtimeResponseMessageItem.fromJson(readerToUse.reset());
                } else if ("function_call".equals(discriminatorValue)) {
                    return RealtimeResponseFunctionCallItem.fromJson(readerToUse.reset());
                } else if ("function_call_output".equals(discriminatorValue)) {
                    return RealtimeResponseFunctionCallOutputItem.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Metadata(generated = true)
    static RealtimeResponseItem fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            RealtimeItemType type = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = RealtimeItemType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            RealtimeResponseItem deserializedRealtimeResponseItem = new RealtimeResponseItem(id);
            deserializedRealtimeResponseItem.type = type;

            return deserializedRealtimeResponseItem;
        });
    }
}
