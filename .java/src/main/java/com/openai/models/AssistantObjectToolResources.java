// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The AssistantObjectToolResources model.
 */
@Immutable
public final class AssistantObjectToolResources implements JsonSerializable<AssistantObjectToolResources> {
    /*
     * The code_interpreter property.
     */
    @Generated
    private AssistantObjectToolResourcesCodeInterpreter codeInterpreter;

    /*
     * The file_search property.
     */
    @Generated
    private ToolResourcesFileSearchIdsOnly fileSearch;

    /**
     * Creates an instance of AssistantObjectToolResources class.
     */
    @Generated
    private AssistantObjectToolResources() {
    }

    /**
     * Get the codeInterpreter property: The code_interpreter property.
     * 
     * @return the codeInterpreter value.
     */
    @Generated
    public AssistantObjectToolResourcesCodeInterpreter getCodeInterpreter() {
        return this.codeInterpreter;
    }

    /**
     * Get the fileSearch property: The file_search property.
     * 
     * @return the fileSearch value.
     */
    @Generated
    public ToolResourcesFileSearchIdsOnly getFileSearch() {
        return this.fileSearch;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("code_interpreter", this.codeInterpreter);
        jsonWriter.writeJsonField("file_search", this.fileSearch);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssistantObjectToolResources from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssistantObjectToolResources if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssistantObjectToolResources.
     */
    @Generated
    public static AssistantObjectToolResources fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssistantObjectToolResources deserializedAssistantObjectToolResources = new AssistantObjectToolResources();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("code_interpreter".equals(fieldName)) {
                    deserializedAssistantObjectToolResources.codeInterpreter
                        = AssistantObjectToolResourcesCodeInterpreter.fromJson(reader);
                } else if ("file_search".equals(fieldName)) {
                    deserializedAssistantObjectToolResources.fileSearch
                        = ToolResourcesFileSearchIdsOnly.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssistantObjectToolResources;
        });
    }
}
