// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The ChatCompletionTokenLogprobTopLogprob model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class ChatCompletionTokenLogprobTopLogprob
    implements JsonSerializable<ChatCompletionTokenLogprobTopLogprob> {
    /*
     * The token.
     */
    @Metadata(generated = true)
    private final String token;

    /*
     * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0`
     * is used to signify that the token is very unlikely.
     */
    @Metadata(generated = true)
    private final double logprob;

    /*
     * A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters
     * are represented by multiple tokens and their byte representations must be combined to generate the correct text
     * representation. Can be `null` if there is no bytes representation for the token.
     */
    @Metadata(generated = true)
    private final List<Integer> bytes;

    /**
     * Creates an instance of ChatCompletionTokenLogprobTopLogprob class.
     * 
     * @param token the token value to set.
     * @param logprob the logprob value to set.
     * @param bytes the bytes value to set.
     */
    @Metadata(generated = true)
    private ChatCompletionTokenLogprobTopLogprob(String token, double logprob, List<Integer> bytes) {
        this.token = token;
        this.logprob = logprob;
        this.bytes = bytes;
    }

    /**
     * Get the token property: The token.
     * 
     * @return the token value.
     */
    @Metadata(generated = true)
    public String getToken() {
        return this.token;
    }

    /**
     * Get the logprob property: The log probability of this token, if it is within the top 20 most likely tokens.
     * Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
     * 
     * @return the logprob value.
     */
    @Metadata(generated = true)
    public double getLogprob() {
        return this.logprob;
    }

    /**
     * Get the bytes property: A list of integers representing the UTF-8 bytes representation of the token. Useful in
     * instances where characters are represented by multiple tokens and their byte representations must be combined to
     * generate the correct text representation. Can be `null` if there is no bytes representation for the token.
     * 
     * @return the bytes value.
     */
    @Metadata(generated = true)
    public List<Integer> getBytes() {
        return this.bytes;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("token", this.token);
        jsonWriter.writeDoubleField("logprob", this.logprob);
        jsonWriter.writeArrayField("bytes", this.bytes, (writer, element) -> writer.writeInt(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatCompletionTokenLogprobTopLogprob from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatCompletionTokenLogprobTopLogprob if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChatCompletionTokenLogprobTopLogprob.
     */
    @Metadata(generated = true)
    public static ChatCompletionTokenLogprobTopLogprob fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String token = null;
            double logprob = 0.0;
            List<Integer> bytes = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("token".equals(fieldName)) {
                    token = reader.getString();
                } else if ("logprob".equals(fieldName)) {
                    logprob = reader.getDouble();
                } else if ("bytes".equals(fieldName)) {
                    bytes = reader.readArray(reader1 -> reader1.getInt());
                } else {
                    reader.skipChildren();
                }
            }
            return new ChatCompletionTokenLogprobTopLogprob(token, logprob, bytes);
        });
    }
}
