// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The CreateCompletionResponseChoiceLogprobs model.
 */
@Immutable
public final class CreateCompletionResponseChoiceLogprobs
    implements JsonSerializable<CreateCompletionResponseChoiceLogprobs> {
    /*
     * The text_offset property.
     */
    @Generated
    private List<Integer> textOffset;

    /*
     * The token_logprobs property.
     */
    @Generated
    private List<Double> tokenLogprobs;

    /*
     * The tokens property.
     */
    @Generated
    private List<String> tokens;

    /*
     * The top_logprobs property.
     */
    @Generated
    private List<Map<String, Double>> topLogprobs;

    /**
     * Creates an instance of CreateCompletionResponseChoiceLogprobs class.
     */
    @Generated
    private CreateCompletionResponseChoiceLogprobs() {
    }

    /**
     * Get the textOffset property: The text_offset property.
     * 
     * @return the textOffset value.
     */
    @Generated
    public List<Integer> getTextOffset() {
        return this.textOffset;
    }

    /**
     * Get the tokenLogprobs property: The token_logprobs property.
     * 
     * @return the tokenLogprobs value.
     */
    @Generated
    public List<Double> getTokenLogprobs() {
        return this.tokenLogprobs;
    }

    /**
     * Get the tokens property: The tokens property.
     * 
     * @return the tokens value.
     */
    @Generated
    public List<String> getTokens() {
        return this.tokens;
    }

    /**
     * Get the topLogprobs property: The top_logprobs property.
     * 
     * @return the topLogprobs value.
     */
    @Generated
    public List<Map<String, Double>> getTopLogprobs() {
        return this.topLogprobs;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("text_offset", this.textOffset, (writer, element) -> writer.writeInt(element));
        jsonWriter.writeArrayField("token_logprobs", this.tokenLogprobs,
            (writer, element) -> writer.writeDouble(element));
        jsonWriter.writeArrayField("tokens", this.tokens, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("top_logprobs", this.topLogprobs,
            (writer, element) -> writer.writeMap(element, (writer1, element1) -> writer1.writeDouble(element1)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateCompletionResponseChoiceLogprobs from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateCompletionResponseChoiceLogprobs if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CreateCompletionResponseChoiceLogprobs.
     */
    @Generated
    public static CreateCompletionResponseChoiceLogprobs fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CreateCompletionResponseChoiceLogprobs deserializedCreateCompletionResponseChoiceLogprobs
                = new CreateCompletionResponseChoiceLogprobs();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("text_offset".equals(fieldName)) {
                    List<Integer> textOffset = reader.readArray(reader1 -> reader1.getInt());
                    deserializedCreateCompletionResponseChoiceLogprobs.textOffset = textOffset;
                } else if ("token_logprobs".equals(fieldName)) {
                    List<Double> tokenLogprobs = reader.readArray(reader1 -> reader1.getDouble());
                    deserializedCreateCompletionResponseChoiceLogprobs.tokenLogprobs = tokenLogprobs;
                } else if ("tokens".equals(fieldName)) {
                    List<String> tokens = reader.readArray(reader1 -> reader1.getString());
                    deserializedCreateCompletionResponseChoiceLogprobs.tokens = tokens;
                } else if ("top_logprobs".equals(fieldName)) {
                    List<Map<String, Double>> topLogprobs
                        = reader.readArray(reader1 -> reader1.readMap(reader2 -> reader2.getDouble()));
                    deserializedCreateCompletionResponseChoiceLogprobs.topLogprobs = topLogprobs;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCreateCompletionResponseChoiceLogprobs;
        });
    }
}
