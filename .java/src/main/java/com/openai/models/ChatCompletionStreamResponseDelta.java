// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A chat completion delta generated by streamed model responses.
 */
@Immutable
public final class ChatCompletionStreamResponseDelta implements JsonSerializable<ChatCompletionStreamResponseDelta> {
    /*
     * The contents of the chunk message.
     */
    @Generated
    private String content;

    /*
     * Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated
     * by the model.
     */
    @Generated
    private ChatCompletionStreamResponseDeltaFunctionCall functionCall;

    /*
     * The tool_calls property.
     */
    @Generated
    private List<ChatCompletionMessageToolCallChunk> toolCalls;

    /*
     * The role of the author of this message.
     */
    @Generated
    private ChatCompletionStreamResponseDeltaRole role;

    /*
     * The refusal message generated by the model.
     */
    @Generated
    private String refusal;

    /**
     * Creates an instance of ChatCompletionStreamResponseDelta class.
     */
    @Generated
    private ChatCompletionStreamResponseDelta() {
    }

    /**
     * Get the content property: The contents of the chunk message.
     * 
     * @return the content value.
     */
    @Generated
    public String getContent() {
        return this.content;
    }

    /**
     * Get the functionCall property: Deprecated and replaced by `tool_calls`. The name and arguments of a function that
     * should be called, as generated by the model.
     * 
     * @return the functionCall value.
     */
    @Generated
    public ChatCompletionStreamResponseDeltaFunctionCall getFunctionCall() {
        return this.functionCall;
    }

    /**
     * Get the toolCalls property: The tool_calls property.
     * 
     * @return the toolCalls value.
     */
    @Generated
    public List<ChatCompletionMessageToolCallChunk> getToolCalls() {
        return this.toolCalls;
    }

    /**
     * Get the role property: The role of the author of this message.
     * 
     * @return the role value.
     */
    @Generated
    public ChatCompletionStreamResponseDeltaRole getRole() {
        return this.role;
    }

    /**
     * Get the refusal property: The refusal message generated by the model.
     * 
     * @return the refusal value.
     */
    @Generated
    public String getRefusal() {
        return this.refusal;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("content", this.content);
        jsonWriter.writeJsonField("function_call", this.functionCall);
        jsonWriter.writeArrayField("tool_calls", this.toolCalls, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("role", this.role == null ? null : this.role.toString());
        jsonWriter.writeStringField("refusal", this.refusal);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatCompletionStreamResponseDelta from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatCompletionStreamResponseDelta if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ChatCompletionStreamResponseDelta.
     */
    @Generated
    public static ChatCompletionStreamResponseDelta fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ChatCompletionStreamResponseDelta deserializedChatCompletionStreamResponseDelta
                = new ChatCompletionStreamResponseDelta();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("content".equals(fieldName)) {
                    deserializedChatCompletionStreamResponseDelta.content = reader.getString();
                } else if ("function_call".equals(fieldName)) {
                    deserializedChatCompletionStreamResponseDelta.functionCall
                        = ChatCompletionStreamResponseDeltaFunctionCall.fromJson(reader);
                } else if ("tool_calls".equals(fieldName)) {
                    List<ChatCompletionMessageToolCallChunk> toolCalls
                        = reader.readArray(reader1 -> ChatCompletionMessageToolCallChunk.fromJson(reader1));
                    deserializedChatCompletionStreamResponseDelta.toolCalls = toolCalls;
                } else if ("role".equals(fieldName)) {
                    deserializedChatCompletionStreamResponseDelta.role
                        = ChatCompletionStreamResponseDeltaRole.fromString(reader.getString());
                } else if ("refusal".equals(fieldName)) {
                    deserializedChatCompletionStreamResponseDelta.refusal = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedChatCompletionStreamResponseDelta;
        });
    }
}
