// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The CreateThreadAndRunRequestToolResourcesCodeInterpreter model.
 */
@Fluent
public final class CreateThreadAndRunRequestToolResourcesCodeInterpreter
    implements JsonSerializable<CreateThreadAndRunRequestToolResourcesCodeInterpreter> {
    /*
     * A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a
     * maximum of 20 files associated with the tool.
     */
    @Generated
    private List<String> fileIds;

    /**
     * Creates an instance of CreateThreadAndRunRequestToolResourcesCodeInterpreter class.
     */
    @Generated
    public CreateThreadAndRunRequestToolResourcesCodeInterpreter() {
    }

    /**
     * Get the fileIds property: A list of [file](/docs/api-reference/files) IDs made available to the
     * `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
     * 
     * @return the fileIds value.
     */
    @Generated
    public List<String> getFileIds() {
        return this.fileIds;
    }

    /**
     * Set the fileIds property: A list of [file](/docs/api-reference/files) IDs made available to the
     * `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
     * 
     * @param fileIds the fileIds value to set.
     * @return the CreateThreadAndRunRequestToolResourcesCodeInterpreter object itself.
     */
    @Generated
    public CreateThreadAndRunRequestToolResourcesCodeInterpreter setFileIds(List<String> fileIds) {
        this.fileIds = fileIds;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("file_ids", this.fileIds, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateThreadAndRunRequestToolResourcesCodeInterpreter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateThreadAndRunRequestToolResourcesCodeInterpreter if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CreateThreadAndRunRequestToolResourcesCodeInterpreter.
     */
    @Generated
    public static CreateThreadAndRunRequestToolResourcesCodeInterpreter fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            CreateThreadAndRunRequestToolResourcesCodeInterpreter deserializedCreateThreadAndRunRequestToolResourcesCodeInterpreter
                = new CreateThreadAndRunRequestToolResourcesCodeInterpreter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("file_ids".equals(fieldName)) {
                    List<String> fileIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedCreateThreadAndRunRequestToolResourcesCodeInterpreter.fileIds = fileIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCreateThreadAndRunRequestToolResourcesCodeInterpreter;
        });
    }
}
