// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Details of the tool call.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class RunStepDeltaStepDetailsToolCallsObject extends RunStepDeltaStepDetails {
    /*
     * The discriminated type identifier for the details object.
     */
    @Metadata(generated = true)
    private String type = "tool_calls";

    /*
     * An array of tool calls the run step was involved in. These can be associated with one of three types of tools:
     * `code_interpreter`, `file_search`, or `function`.
     */
    @Metadata(generated = true)
    private List<RunStepDeltaStepDetailsToolCallsObjectToolCallsObject> toolCalls;

    /**
     * Creates an instance of RunStepDeltaStepDetailsToolCallsObject class.
     */
    @Metadata(generated = true)
    private RunStepDeltaStepDetailsToolCallsObject() {
    }

    /**
     * Get the type property: The discriminated type identifier for the details object.
     * 
     * @return the type value.
     */
    @Metadata(generated = true)
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the toolCalls property: An array of tool calls the run step was involved in. These can be associated with one
     * of three types of tools: `code_interpreter`, `file_search`, or `function`.
     * 
     * @return the toolCalls value.
     */
    @Metadata(generated = true)
    public List<RunStepDeltaStepDetailsToolCallsObjectToolCallsObject> getToolCalls() {
        return this.toolCalls;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeArrayField("tool_calls", this.toolCalls, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RunStepDeltaStepDetailsToolCallsObject from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RunStepDeltaStepDetailsToolCallsObject if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RunStepDeltaStepDetailsToolCallsObject.
     */
    @Metadata(generated = true)
    public static RunStepDeltaStepDetailsToolCallsObject fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RunStepDeltaStepDetailsToolCallsObject deserializedRunStepDeltaStepDetailsToolCallsObject
                = new RunStepDeltaStepDetailsToolCallsObject();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedRunStepDeltaStepDetailsToolCallsObject.type = reader.getString();
                } else if ("tool_calls".equals(fieldName)) {
                    List<RunStepDeltaStepDetailsToolCallsObjectToolCallsObject> toolCalls = reader
                        .readArray(reader1 -> RunStepDeltaStepDetailsToolCallsObjectToolCallsObject.fromJson(reader1));
                    deserializedRunStepDeltaStepDetailsToolCallsObject.toolCalls = toolCalls;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRunStepDeltaStepDetailsToolCallsObject;
        });
    }
}
