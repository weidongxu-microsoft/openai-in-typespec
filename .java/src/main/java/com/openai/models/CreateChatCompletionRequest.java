// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import io.clientcore.core.util.binarydata.BinaryData;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The CreateChatCompletionRequest model.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class CreateChatCompletionRequest implements JsonSerializable<CreateChatCompletionRequest> {
    /*
     * A list of messages comprising the conversation so far. Depending on the [model](/docs/models) you use, different
     * message types (modalities) are supported, like [text](/docs/guides/text-generation),
     * [images](/docs/guides/vision), and audio.
     */
    @Metadata(generated = true)
    private final List<ChatCompletionRequestMessage> messages;

    /*
     * ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table
     * for details on which models work with the Chat API.
     */
    @Metadata(generated = true)
    private final CreateChatCompletionRequestModel model;

    /*
     * Whether or not to store the output of this chat completion request
     * for use in our [model distillation](/docs/guides/distillation) or [evals](/docs/guides/evals) products.
     */
    @Metadata(generated = true)
    private Boolean store;

    /*
     * Developer-defined tags and values used for filtering completions
     * in the [dashboard](https://platform.openai.com/chat-completions).
     */
    @Metadata(generated = true)
    private Map<String, String> metadata;

    /*
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so
     * far, decreasing the model's likelihood to repeat the same line verbatim.
     * 
     * [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
     */
    @Metadata(generated = true)
    private Double frequencyPenalty;

    /*
     * Modify the likelihood of specified tokens appearing in the completion.
     * 
     * Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value
     * from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The
     * exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of
     * selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     */
    @Metadata(generated = true)
    private Map<String, Integer> logitBias;

    /*
     * Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each
     * output token returned in the `content` of `message`.
     */
    @Metadata(generated = true)
    private Boolean logprobs;

    /*
     * An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each
     * with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
     */
    @Metadata(generated = true)
    private Integer topLogprobs;

    /*
     * The maximum number of [tokens](/tokenizer) that can be generated in the chat completion. This value can be used
     * to control [costs](https://openai.com/api/pricing/) for text generated via API.
     * 
     * This value is now deprecated in favor of `max_completion_tokens`, and is not compatible with [o1 series
     * models](/docs/guides/reasoning).
     */
    @Metadata(generated = true)
    private Integer maxTokens;

    /*
     * An upper bound for the number of tokens that can be generated for a completion, including visible output tokens
     * and [reasoning tokens](/docs/guides/reasoning).
     */
    @Metadata(generated = true)
    private Integer maxCompletionTokens;

    /*
     * How many chat completion choices to generate for each input message. Note that you will be charged based on the
     * number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
     */
    @Metadata(generated = true)
    private Integer n;

    /*
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far,
     * increasing the model's likelihood to talk about new topics.
     * 
     * [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
     */
    @Metadata(generated = true)
    private Double presencePenalty;

    /*
     * An object specifying the format that the model must output. Compatible with [GPT-4o](/docs/models/gpt-4o),
     * [GPT-4o mini](/docs/models/gpt-4o-mini), [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo
     * models newer than `gpt-3.5-turbo-1106`.
     * 
     * Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model
     * will match your supplied JSON schema. Learn more in the [Structured Outputs
     * guide](/docs/guides/structured-outputs).
     * 
     * Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid
     * JSON.
     * 
     * **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system
     * or user message. Without this, the model may generate an unending stream of whitespace until the generation
     * reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message
     * content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded
     * `max_tokens` or the conversation exceeded the max context length.
     */
    @Metadata(generated = true)
    private ChatResponseFormat responseFormat;

    /*
     * This feature is in Beta.
     * If specified, our system will make a best effort to sample deterministically, such that repeated requests with
     * the same `seed` and parameters should return the same result.
     * Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor
     * changes in the backend.
     */
    @Metadata(generated = true)
    private Long seed;

    /*
     * Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed
     * to the scale tier service:
     * - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they
     * are exhausted.
     * - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default
     * service tier with a lower uptime SLA and no latency guarentee.
     * - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and
     * no latency guarentee.
     * - When not set, the default behavior is 'auto'.
     * 
     * When this parameter is set, the response body will include the `service_tier` utilized.
     */
    @Metadata(generated = true)
    private CreateChatCompletionRequestServiceTier serviceTier;

    /*
     * Up to 4 sequences where the API will stop generating further tokens.
     */
    @Metadata(generated = true)
    private BinaryData stop;

    /*
     * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent
     * events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#
     * Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example
     * Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
     */
    @Metadata(generated = true)
    private Boolean stream;

    /*
     * The stream_options property.
     */
    @Metadata(generated = true)
    private ChatCompletionStreamOptions streamOptions;

    /*
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while
     * lower values like 0.2 will make it more focused and deterministic.
     * 
     * We generally recommend altering this or `top_p` but not both.
     */
    @Metadata(generated = true)
    private Double temperature;

    /*
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of
     * the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are
     * considered.
     * 
     * We generally recommend altering this or `temperature` but not both.
     */
    @Metadata(generated = true)
    private Double topP;

    /*
     * A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list
     * of functions the model may generate JSON inputs for. A max of 128 functions are supported.
     */
    @Metadata(generated = true)
    private List<ChatCompletionTool> tools;

    /*
     * The tool_choice property.
     */
    @Metadata(generated = true)
    private BinaryData toolChoice;

    /*
     * The parallel_tool_calls property.
     */
    @Metadata(generated = true)
    private Boolean parallelToolCalls;

    /*
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn
     * more](/docs/guides/safety-best-practices/end-user-ids).
     */
    @Metadata(generated = true)
    private String user;

    /*
     * Deprecated in favor of `tool_choice`.
     * 
     * Controls which (if any) function is called by the model.
     * `none` means the model will not call a function and instead generates a message.
     * `auto` means the model can pick between generating a message or calling a function.
     * Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
     * 
     * `none` is the default when no functions are present. `auto` is the default if functions are present.
     */
    @Metadata(generated = true)
    private BinaryData functionCall;

    /*
     * Deprecated in favor of `tools`.
     * 
     * A list of functions the model may generate JSON inputs for.
     */
    @Metadata(generated = true)
    private List<ChatCompletionFunctions> functions;

    /**
     * Creates an instance of CreateChatCompletionRequest class.
     * 
     * @param messages the messages value to set.
     * @param model the model value to set.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequest(List<ChatCompletionRequestMessage> messages,
        CreateChatCompletionRequestModel model) {
        this.messages = messages;
        this.model = model;
    }

    /**
     * Get the messages property: A list of messages comprising the conversation so far. Depending on the
     * [model](/docs/models) you use, different message types (modalities) are supported, like
     * [text](/docs/guides/text-generation), [images](/docs/guides/vision), and audio.
     * 
     * @return the messages value.
     */
    @Metadata(generated = true)
    public List<ChatCompletionRequestMessage> getMessages() {
        return this.messages;
    }

    /**
     * Get the model property: ID of the model to use. See the [model endpoint
     * compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat
     * API.
     * 
     * @return the model value.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequestModel getModel() {
        return this.model;
    }

    /**
     * Get the store property: Whether or not to store the output of this chat completion request
     * for use in our [model distillation](/docs/guides/distillation) or [evals](/docs/guides/evals) products.
     * 
     * @return the store value.
     */
    @Metadata(generated = true)
    public Boolean isStore() {
        return this.store;
    }

    /**
     * Set the store property: Whether or not to store the output of this chat completion request
     * for use in our [model distillation](/docs/guides/distillation) or [evals](/docs/guides/evals) products.
     * 
     * @param store the store value to set.
     * @return the CreateChatCompletionRequest object itself.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequest setStore(Boolean store) {
        this.store = store;
        return this;
    }

    /**
     * Get the metadata property: Developer-defined tags and values used for filtering completions
     * in the [dashboard](https://platform.openai.com/chat-completions).
     * 
     * @return the metadata value.
     */
    @Metadata(generated = true)
    public Map<String, String> getMetadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Developer-defined tags and values used for filtering completions
     * in the [dashboard](https://platform.openai.com/chat-completions).
     * 
     * @param metadata the metadata value to set.
     * @return the CreateChatCompletionRequest object itself.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequest setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the frequencyPenalty property: Number between -2.0 and 2.0. Positive values penalize new tokens based on
     * their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
     * 
     * [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details).
     * 
     * @return the frequencyPenalty value.
     */
    @Metadata(generated = true)
    public Double getFrequencyPenalty() {
        return this.frequencyPenalty;
    }

    /**
     * Set the frequencyPenalty property: Number between -2.0 and 2.0. Positive values penalize new tokens based on
     * their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
     * 
     * [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details).
     * 
     * @param frequencyPenalty the frequencyPenalty value to set.
     * @return the CreateChatCompletionRequest object itself.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequest setFrequencyPenalty(Double frequencyPenalty) {
        this.frequencyPenalty = frequencyPenalty;
        return this;
    }

    /**
     * Get the logitBias property: Modify the likelihood of specified tokens appearing in the completion.
     * 
     * Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value
     * from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The
     * exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of
     * selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     * 
     * @return the logitBias value.
     */
    @Metadata(generated = true)
    public Map<String, Integer> getLogitBias() {
        return this.logitBias;
    }

    /**
     * Set the logitBias property: Modify the likelihood of specified tokens appearing in the completion.
     * 
     * Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value
     * from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The
     * exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of
     * selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     * 
     * @param logitBias the logitBias value to set.
     * @return the CreateChatCompletionRequest object itself.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequest setLogitBias(Map<String, Integer> logitBias) {
        this.logitBias = logitBias;
        return this;
    }

    /**
     * Get the logprobs property: Whether to return log probabilities of the output tokens or not. If true, returns the
     * log probabilities of each output token returned in the `content` of `message`.
     * 
     * @return the logprobs value.
     */
    @Metadata(generated = true)
    public Boolean isLogprobs() {
        return this.logprobs;
    }

    /**
     * Set the logprobs property: Whether to return log probabilities of the output tokens or not. If true, returns the
     * log probabilities of each output token returned in the `content` of `message`.
     * 
     * @param logprobs the logprobs value to set.
     * @return the CreateChatCompletionRequest object itself.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequest setLogprobs(Boolean logprobs) {
        this.logprobs = logprobs;
        return this;
    }

    /**
     * Get the topLogprobs property: An integer between 0 and 20 specifying the number of most likely tokens to return
     * at each token position, each with an associated log probability. `logprobs` must be set to `true` if this
     * parameter is used.
     * 
     * @return the topLogprobs value.
     */
    @Metadata(generated = true)
    public Integer getTopLogprobs() {
        return this.topLogprobs;
    }

    /**
     * Set the topLogprobs property: An integer between 0 and 20 specifying the number of most likely tokens to return
     * at each token position, each with an associated log probability. `logprobs` must be set to `true` if this
     * parameter is used.
     * 
     * @param topLogprobs the topLogprobs value to set.
     * @return the CreateChatCompletionRequest object itself.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequest setTopLogprobs(Integer topLogprobs) {
        this.topLogprobs = topLogprobs;
        return this;
    }

    /**
     * Get the maxTokens property: The maximum number of [tokens](/tokenizer) that can be generated in the chat
     * completion. This value can be used to control [costs](https://openai.com/api/pricing/) for text generated via
     * API.
     * 
     * This value is now deprecated in favor of `max_completion_tokens`, and is not compatible with [o1 series
     * models](/docs/guides/reasoning).
     * 
     * @return the maxTokens value.
     */
    @Metadata(generated = true)
    public Integer getMaxTokens() {
        return this.maxTokens;
    }

    /**
     * Set the maxTokens property: The maximum number of [tokens](/tokenizer) that can be generated in the chat
     * completion. This value can be used to control [costs](https://openai.com/api/pricing/) for text generated via
     * API.
     * 
     * This value is now deprecated in favor of `max_completion_tokens`, and is not compatible with [o1 series
     * models](/docs/guides/reasoning).
     * 
     * @param maxTokens the maxTokens value to set.
     * @return the CreateChatCompletionRequest object itself.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequest setMaxTokens(Integer maxTokens) {
        this.maxTokens = maxTokens;
        return this;
    }

    /**
     * Get the maxCompletionTokens property: An upper bound for the number of tokens that can be generated for a
     * completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).
     * 
     * @return the maxCompletionTokens value.
     */
    @Metadata(generated = true)
    public Integer getMaxCompletionTokens() {
        return this.maxCompletionTokens;
    }

    /**
     * Set the maxCompletionTokens property: An upper bound for the number of tokens that can be generated for a
     * completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).
     * 
     * @param maxCompletionTokens the maxCompletionTokens value to set.
     * @return the CreateChatCompletionRequest object itself.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequest setMaxCompletionTokens(Integer maxCompletionTokens) {
        this.maxCompletionTokens = maxCompletionTokens;
        return this;
    }

    /**
     * Get the n property: How many chat completion choices to generate for each input message. Note that you will be
     * charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
     * 
     * @return the n value.
     */
    @Metadata(generated = true)
    public Integer getN() {
        return this.n;
    }

    /**
     * Set the n property: How many chat completion choices to generate for each input message. Note that you will be
     * charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
     * 
     * @param n the n value to set.
     * @return the CreateChatCompletionRequest object itself.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequest setN(Integer n) {
        this.n = n;
        return this;
    }

    /**
     * Get the presencePenalty property: Number between -2.0 and 2.0. Positive values penalize new tokens based on
     * whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
     * 
     * [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details).
     * 
     * @return the presencePenalty value.
     */
    @Metadata(generated = true)
    public Double getPresencePenalty() {
        return this.presencePenalty;
    }

    /**
     * Set the presencePenalty property: Number between -2.0 and 2.0. Positive values penalize new tokens based on
     * whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
     * 
     * [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details).
     * 
     * @param presencePenalty the presencePenalty value to set.
     * @return the CreateChatCompletionRequest object itself.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequest setPresencePenalty(Double presencePenalty) {
        this.presencePenalty = presencePenalty;
        return this;
    }

    /**
     * Get the responseFormat property: An object specifying the format that the model must output. Compatible with
     * [GPT-4o](/docs/models/gpt-4o), [GPT-4o mini](/docs/models/gpt-4o-mini), [GPT-4
     * Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.
     * 
     * Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model
     * will match your supplied JSON schema. Learn more in the [Structured Outputs
     * guide](/docs/guides/structured-outputs).
     * 
     * Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid
     * JSON.
     * 
     * **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system
     * or user message. Without this, the model may generate an unending stream of whitespace until the generation
     * reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message
     * content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded
     * `max_tokens` or the conversation exceeded the max context length.
     * 
     * @return the responseFormat value.
     */
    @Metadata(generated = true)
    public ChatResponseFormat getResponseFormat() {
        return this.responseFormat;
    }

    /**
     * Set the responseFormat property: An object specifying the format that the model must output. Compatible with
     * [GPT-4o](/docs/models/gpt-4o), [GPT-4o mini](/docs/models/gpt-4o-mini), [GPT-4
     * Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.
     * 
     * Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model
     * will match your supplied JSON schema. Learn more in the [Structured Outputs
     * guide](/docs/guides/structured-outputs).
     * 
     * Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid
     * JSON.
     * 
     * **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system
     * or user message. Without this, the model may generate an unending stream of whitespace until the generation
     * reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message
     * content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded
     * `max_tokens` or the conversation exceeded the max context length.
     * 
     * @param responseFormat the responseFormat value to set.
     * @return the CreateChatCompletionRequest object itself.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequest setResponseFormat(ChatResponseFormat responseFormat) {
        this.responseFormat = responseFormat;
        return this;
    }

    /**
     * Get the seed property: This feature is in Beta.
     * If specified, our system will make a best effort to sample deterministically, such that repeated requests with
     * the same `seed` and parameters should return the same result.
     * Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor
     * changes in the backend.
     * 
     * @return the seed value.
     */
    @Metadata(generated = true)
    public Long getSeed() {
        return this.seed;
    }

    /**
     * Set the seed property: This feature is in Beta.
     * If specified, our system will make a best effort to sample deterministically, such that repeated requests with
     * the same `seed` and parameters should return the same result.
     * Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor
     * changes in the backend.
     * 
     * @param seed the seed value to set.
     * @return the CreateChatCompletionRequest object itself.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequest setSeed(Long seed) {
        this.seed = seed;
        return this;
    }

    /**
     * Get the serviceTier property: Specifies the latency tier to use for processing the request. This parameter is
     * relevant for customers subscribed to the scale tier service:
     * - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they
     * are exhausted.
     * - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default
     * service tier with a lower uptime SLA and no latency guarentee.
     * - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and
     * no latency guarentee.
     * - When not set, the default behavior is 'auto'.
     * 
     * When this parameter is set, the response body will include the `service_tier` utilized.
     * 
     * @return the serviceTier value.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequestServiceTier getServiceTier() {
        return this.serviceTier;
    }

    /**
     * Set the serviceTier property: Specifies the latency tier to use for processing the request. This parameter is
     * relevant for customers subscribed to the scale tier service:
     * - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they
     * are exhausted.
     * - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default
     * service tier with a lower uptime SLA and no latency guarentee.
     * - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and
     * no latency guarentee.
     * - When not set, the default behavior is 'auto'.
     * 
     * When this parameter is set, the response body will include the `service_tier` utilized.
     * 
     * @param serviceTier the serviceTier value to set.
     * @return the CreateChatCompletionRequest object itself.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequest setServiceTier(CreateChatCompletionRequestServiceTier serviceTier) {
        this.serviceTier = serviceTier;
        return this;
    }

    /**
     * Get the stop property: Up to 4 sequences where the API will stop generating further tokens.
     * 
     * @return the stop value.
     */
    @Metadata(generated = true)
    public BinaryData getStop() {
        return this.stop;
    }

    /**
     * Set the stop property: Up to 4 sequences where the API will stop generating further tokens.
     * 
     * @param stop the stop value to set.
     * @return the CreateChatCompletionRequest object itself.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequest setStop(BinaryData stop) {
        this.stop = stop;
        return this;
    }

    /**
     * Get the stream property: If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as
     * data-only [server-sent
     * events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
     * as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python
     * code](https://cookbook.openai.com/examples/how_to_stream_completions).
     * 
     * @return the stream value.
     */
    @Metadata(generated = true)
    public Boolean isStream() {
        return this.stream;
    }

    /**
     * Set the stream property: If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as
     * data-only [server-sent
     * events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
     * as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python
     * code](https://cookbook.openai.com/examples/how_to_stream_completions).
     * 
     * @param stream the stream value to set.
     * @return the CreateChatCompletionRequest object itself.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequest setStream(Boolean stream) {
        this.stream = stream;
        return this;
    }

    /**
     * Get the streamOptions property: The stream_options property.
     * 
     * @return the streamOptions value.
     */
    @Metadata(generated = true)
    public ChatCompletionStreamOptions getStreamOptions() {
        return this.streamOptions;
    }

    /**
     * Set the streamOptions property: The stream_options property.
     * 
     * @param streamOptions the streamOptions value to set.
     * @return the CreateChatCompletionRequest object itself.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequest setStreamOptions(ChatCompletionStreamOptions streamOptions) {
        this.streamOptions = streamOptions;
        return this;
    }

    /**
     * Get the temperature property: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make
     * the output more random, while lower values like 0.2 will make it more focused and deterministic.
     * 
     * We generally recommend altering this or `top_p` but not both.
     * 
     * @return the temperature value.
     */
    @Metadata(generated = true)
    public Double getTemperature() {
        return this.temperature;
    }

    /**
     * Set the temperature property: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make
     * the output more random, while lower values like 0.2 will make it more focused and deterministic.
     * 
     * We generally recommend altering this or `top_p` but not both.
     * 
     * @param temperature the temperature value to set.
     * @return the CreateChatCompletionRequest object itself.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequest setTemperature(Double temperature) {
        this.temperature = temperature;
        return this;
    }

    /**
     * Get the topP property: An alternative to sampling with temperature, called nucleus sampling, where the model
     * considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top
     * 10% probability mass are considered.
     * 
     * We generally recommend altering this or `temperature` but not both.
     * 
     * @return the topP value.
     */
    @Metadata(generated = true)
    public Double getTopP() {
        return this.topP;
    }

    /**
     * Set the topP property: An alternative to sampling with temperature, called nucleus sampling, where the model
     * considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top
     * 10% probability mass are considered.
     * 
     * We generally recommend altering this or `temperature` but not both.
     * 
     * @param topP the topP value to set.
     * @return the CreateChatCompletionRequest object itself.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequest setTopP(Double topP) {
        this.topP = topP;
        return this;
    }

    /**
     * Get the tools property: A list of tools the model may call. Currently, only functions are supported as a tool.
     * Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are
     * supported.
     * 
     * @return the tools value.
     */
    @Metadata(generated = true)
    public List<ChatCompletionTool> getTools() {
        return this.tools;
    }

    /**
     * Set the tools property: A list of tools the model may call. Currently, only functions are supported as a tool.
     * Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are
     * supported.
     * 
     * @param tools the tools value to set.
     * @return the CreateChatCompletionRequest object itself.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequest setTools(List<ChatCompletionTool> tools) {
        this.tools = tools;
        return this;
    }

    /**
     * Get the toolChoice property: The tool_choice property.
     * 
     * @return the toolChoice value.
     */
    @Metadata(generated = true)
    public BinaryData getToolChoice() {
        return this.toolChoice;
    }

    /**
     * Set the toolChoice property: The tool_choice property.
     * 
     * @param toolChoice the toolChoice value to set.
     * @return the CreateChatCompletionRequest object itself.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequest setToolChoice(BinaryData toolChoice) {
        this.toolChoice = toolChoice;
        return this;
    }

    /**
     * Get the parallelToolCalls property: The parallel_tool_calls property.
     * 
     * @return the parallelToolCalls value.
     */
    @Metadata(generated = true)
    public Boolean isParallelToolCalls() {
        return this.parallelToolCalls;
    }

    /**
     * Set the parallelToolCalls property: The parallel_tool_calls property.
     * 
     * @param parallelToolCalls the parallelToolCalls value to set.
     * @return the CreateChatCompletionRequest object itself.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequest setParallelToolCalls(Boolean parallelToolCalls) {
        this.parallelToolCalls = parallelToolCalls;
        return this;
    }

    /**
     * Get the user property: A unique identifier representing your end-user, which can help OpenAI to monitor and
     * detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     * 
     * @return the user value.
     */
    @Metadata(generated = true)
    public String getUser() {
        return this.user;
    }

    /**
     * Set the user property: A unique identifier representing your end-user, which can help OpenAI to monitor and
     * detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     * 
     * @param user the user value to set.
     * @return the CreateChatCompletionRequest object itself.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequest setUser(String user) {
        this.user = user;
        return this;
    }

    /**
     * Get the functionCall property: Deprecated in favor of `tool_choice`.
     * 
     * Controls which (if any) function is called by the model.
     * `none` means the model will not call a function and instead generates a message.
     * `auto` means the model can pick between generating a message or calling a function.
     * Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
     * 
     * `none` is the default when no functions are present. `auto` is the default if functions are present.
     * 
     * @return the functionCall value.
     */
    @Metadata(generated = true)
    public BinaryData getFunctionCall() {
        return this.functionCall;
    }

    /**
     * Set the functionCall property: Deprecated in favor of `tool_choice`.
     * 
     * Controls which (if any) function is called by the model.
     * `none` means the model will not call a function and instead generates a message.
     * `auto` means the model can pick between generating a message or calling a function.
     * Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
     * 
     * `none` is the default when no functions are present. `auto` is the default if functions are present.
     * 
     * @param functionCall the functionCall value to set.
     * @return the CreateChatCompletionRequest object itself.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequest setFunctionCall(BinaryData functionCall) {
        this.functionCall = functionCall;
        return this;
    }

    /**
     * Get the functions property: Deprecated in favor of `tools`.
     * 
     * A list of functions the model may generate JSON inputs for.
     * 
     * @return the functions value.
     */
    @Metadata(generated = true)
    public List<ChatCompletionFunctions> getFunctions() {
        return this.functions;
    }

    /**
     * Set the functions property: Deprecated in favor of `tools`.
     * 
     * A list of functions the model may generate JSON inputs for.
     * 
     * @param functions the functions value to set.
     * @return the CreateChatCompletionRequest object itself.
     */
    @Metadata(generated = true)
    public CreateChatCompletionRequest setFunctions(List<ChatCompletionFunctions> functions) {
        this.functions = functions;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("messages", this.messages, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("model", this.model == null ? null : this.model.toString());
        jsonWriter.writeBooleanField("store", this.store);
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("frequency_penalty", this.frequencyPenalty);
        jsonWriter.writeMapField("logit_bias", this.logitBias, (writer, element) -> writer.writeInt(element));
        jsonWriter.writeBooleanField("logprobs", this.logprobs);
        jsonWriter.writeNumberField("top_logprobs", this.topLogprobs);
        jsonWriter.writeNumberField("max_tokens", this.maxTokens);
        jsonWriter.writeNumberField("max_completion_tokens", this.maxCompletionTokens);
        jsonWriter.writeNumberField("n", this.n);
        jsonWriter.writeNumberField("presence_penalty", this.presencePenalty);
        jsonWriter.writeJsonField("response_format", this.responseFormat);
        jsonWriter.writeNumberField("seed", this.seed);
        jsonWriter.writeStringField("service_tier", this.serviceTier == null ? null : this.serviceTier.toString());
        if (this.stop != null) {
            jsonWriter.writeUntypedField("stop", this.stop.toObject(Object.class));
        }
        jsonWriter.writeBooleanField("stream", this.stream);
        jsonWriter.writeJsonField("stream_options", this.streamOptions);
        jsonWriter.writeNumberField("temperature", this.temperature);
        jsonWriter.writeNumberField("top_p", this.topP);
        jsonWriter.writeArrayField("tools", this.tools, (writer, element) -> writer.writeJson(element));
        if (this.toolChoice != null) {
            jsonWriter.writeUntypedField("tool_choice", this.toolChoice.toObject(Object.class));
        }
        jsonWriter.writeBooleanField("parallel_tool_calls", this.parallelToolCalls);
        jsonWriter.writeStringField("user", this.user);
        if (this.functionCall != null) {
            jsonWriter.writeUntypedField("function_call", this.functionCall.toObject(Object.class));
        }
        jsonWriter.writeArrayField("functions", this.functions, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateChatCompletionRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateChatCompletionRequest if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateChatCompletionRequest.
     */
    @Metadata(generated = true)
    public static CreateChatCompletionRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<ChatCompletionRequestMessage> messages = null;
            CreateChatCompletionRequestModel model = null;
            Boolean store = null;
            Map<String, String> metadata = null;
            Double frequencyPenalty = null;
            Map<String, Integer> logitBias = null;
            Boolean logprobs = null;
            Integer topLogprobs = null;
            Integer maxTokens = null;
            Integer maxCompletionTokens = null;
            Integer n = null;
            Double presencePenalty = null;
            ChatResponseFormat responseFormat = null;
            Long seed = null;
            CreateChatCompletionRequestServiceTier serviceTier = null;
            BinaryData stop = null;
            Boolean stream = null;
            ChatCompletionStreamOptions streamOptions = null;
            Double temperature = null;
            Double topP = null;
            List<ChatCompletionTool> tools = null;
            BinaryData toolChoice = null;
            Boolean parallelToolCalls = null;
            String user = null;
            BinaryData functionCall = null;
            List<ChatCompletionFunctions> functions = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("messages".equals(fieldName)) {
                    messages = reader.readArray(reader1 -> ChatCompletionRequestMessage.fromJson(reader1));
                } else if ("model".equals(fieldName)) {
                    model = CreateChatCompletionRequestModel.fromString(reader.getString());
                } else if ("store".equals(fieldName)) {
                    store = reader.getNullable(JsonReader::getBoolean);
                } else if ("metadata".equals(fieldName)) {
                    metadata = reader.readMap(reader1 -> reader1.getString());
                } else if ("frequency_penalty".equals(fieldName)) {
                    frequencyPenalty = reader.getNullable(JsonReader::getDouble);
                } else if ("logit_bias".equals(fieldName)) {
                    logitBias = reader.readMap(reader1 -> reader1.getInt());
                } else if ("logprobs".equals(fieldName)) {
                    logprobs = reader.getNullable(JsonReader::getBoolean);
                } else if ("top_logprobs".equals(fieldName)) {
                    topLogprobs = reader.getNullable(JsonReader::getInt);
                } else if ("max_tokens".equals(fieldName)) {
                    maxTokens = reader.getNullable(JsonReader::getInt);
                } else if ("max_completion_tokens".equals(fieldName)) {
                    maxCompletionTokens = reader.getNullable(JsonReader::getInt);
                } else if ("n".equals(fieldName)) {
                    n = reader.getNullable(JsonReader::getInt);
                } else if ("presence_penalty".equals(fieldName)) {
                    presencePenalty = reader.getNullable(JsonReader::getDouble);
                } else if ("response_format".equals(fieldName)) {
                    responseFormat = ChatResponseFormat.fromJson(reader);
                } else if ("seed".equals(fieldName)) {
                    seed = reader.getNullable(JsonReader::getLong);
                } else if ("service_tier".equals(fieldName)) {
                    serviceTier = CreateChatCompletionRequestServiceTier.fromString(reader.getString());
                } else if ("stop".equals(fieldName)) {
                    stop = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("stream".equals(fieldName)) {
                    stream = reader.getNullable(JsonReader::getBoolean);
                } else if ("stream_options".equals(fieldName)) {
                    streamOptions = ChatCompletionStreamOptions.fromJson(reader);
                } else if ("temperature".equals(fieldName)) {
                    temperature = reader.getNullable(JsonReader::getDouble);
                } else if ("top_p".equals(fieldName)) {
                    topP = reader.getNullable(JsonReader::getDouble);
                } else if ("tools".equals(fieldName)) {
                    tools = reader.readArray(reader1 -> ChatCompletionTool.fromJson(reader1));
                } else if ("tool_choice".equals(fieldName)) {
                    toolChoice
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("parallel_tool_calls".equals(fieldName)) {
                    parallelToolCalls = reader.getNullable(JsonReader::getBoolean);
                } else if ("user".equals(fieldName)) {
                    user = reader.getString();
                } else if ("function_call".equals(fieldName)) {
                    functionCall
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("functions".equals(fieldName)) {
                    functions = reader.readArray(reader1 -> ChatCompletionFunctions.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            CreateChatCompletionRequest deserializedCreateChatCompletionRequest
                = new CreateChatCompletionRequest(messages, model);
            deserializedCreateChatCompletionRequest.store = store;
            deserializedCreateChatCompletionRequest.metadata = metadata;
            deserializedCreateChatCompletionRequest.frequencyPenalty = frequencyPenalty;
            deserializedCreateChatCompletionRequest.logitBias = logitBias;
            deserializedCreateChatCompletionRequest.logprobs = logprobs;
            deserializedCreateChatCompletionRequest.topLogprobs = topLogprobs;
            deserializedCreateChatCompletionRequest.maxTokens = maxTokens;
            deserializedCreateChatCompletionRequest.maxCompletionTokens = maxCompletionTokens;
            deserializedCreateChatCompletionRequest.n = n;
            deserializedCreateChatCompletionRequest.presencePenalty = presencePenalty;
            deserializedCreateChatCompletionRequest.responseFormat = responseFormat;
            deserializedCreateChatCompletionRequest.seed = seed;
            deserializedCreateChatCompletionRequest.serviceTier = serviceTier;
            deserializedCreateChatCompletionRequest.stop = stop;
            deserializedCreateChatCompletionRequest.stream = stream;
            deserializedCreateChatCompletionRequest.streamOptions = streamOptions;
            deserializedCreateChatCompletionRequest.temperature = temperature;
            deserializedCreateChatCompletionRequest.topP = topP;
            deserializedCreateChatCompletionRequest.tools = tools;
            deserializedCreateChatCompletionRequest.toolChoice = toolChoice;
            deserializedCreateChatCompletionRequest.parallelToolCalls = parallelToolCalls;
            deserializedCreateChatCompletionRequest.user = user;
            deserializedCreateChatCompletionRequest.functionCall = functionCall;
            deserializedCreateChatCompletionRequest.functions = functions;

            return deserializedCreateChatCompletionRequest;
        });
    }
}
