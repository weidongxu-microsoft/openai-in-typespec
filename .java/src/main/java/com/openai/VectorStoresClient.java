// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai;

import com.openai.implementation.VectorStoresImpl;
import com.openai.models.CreateVectorStoreFileBatchRequest;
import com.openai.models.CreateVectorStoreFileRequest;
import com.openai.models.CreateVectorStoreRequest;
import com.openai.models.DeleteVectorStoreFileResponse;
import com.openai.models.DeleteVectorStoreResponse;
import com.openai.models.ListFilesInVectorStoreBatchRequestOrder;
import com.openai.models.ListVectorStoreFilesFilter;
import com.openai.models.ListVectorStoreFilesRequestOrder;
import com.openai.models.ListVectorStoreFilesResponse;
import com.openai.models.ListVectorStoresRequestOrder;
import com.openai.models.ListVectorStoresResponse;
import com.openai.models.UpdateVectorStoreRequest;
import com.openai.models.VectorStoreFileBatchObject;
import com.openai.models.VectorStoreFileObject;
import com.openai.models.VectorStoreObject;
import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.ServiceClient;
import io.clientcore.core.http.exception.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.util.binarydata.BinaryData;

/**
 * Initializes a new instance of the synchronous VectorStores type.
 */
@ServiceClient(builder = OpenAIClientBuilder.class)
public final class VectorStoresClient {
    @Metadata(generated = true)
    private final VectorStoresImpl serviceClient;

    /**
     * Initializes an instance of VectorStoresClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Metadata(generated = true)
    VectorStoresClient(VectorStoresImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Returns a list of vector-stores.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<ListVectorStoresResponse> listVectorStoresWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listVectorStoresWithResponse(requestOptions);
    }

    /**
     * Creates a vector store.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     file_ids (Optional): [
     *         String (Optional)
     *     ]
     *     name: String (Optional)
     *     expires_after (Optional): {
     *         anchor: String (Required)
     *         days: int (Required)
     *     }
     *     chunking_strategy: BinaryData (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a vector store is a collection of processed files can be used by the `file_search` tool.
     */
    @Metadata(generated = true)
    public Response<VectorStoreObject> createVectorStoreWithResponse(BinaryData requestBody,
        RequestOptions requestOptions) {
        return this.serviceClient.createVectorStoreWithResponse(requestBody, requestOptions);
    }

    /**
     * Retrieves a vector store.
     * 
     * @param vectorStoreId The ID of the vector store to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a vector store is a collection of processed files can be used by the `file_search` tool.
     */
    @Metadata(generated = true)
    public Response<VectorStoreObject> getVectorStoreWithResponse(String vectorStoreId, RequestOptions requestOptions) {
        return this.serviceClient.getVectorStoreWithResponse(vectorStoreId, requestOptions);
    }

    /**
     * Modifies a vector store.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Optional)
     *     expires_after (Optional): {
     *         anchor: String (Required)
     *         days: int (Required)
     *     }
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param vectorStoreId The ID of the vector store to modify.
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a vector store is a collection of processed files can be used by the `file_search` tool.
     */
    @Metadata(generated = true)
    public Response<VectorStoreObject> modifyVectorStoreWithResponse(String vectorStoreId, BinaryData requestBody,
        RequestOptions requestOptions) {
        return this.serviceClient.modifyVectorStoreWithResponse(vectorStoreId, requestBody, requestOptions);
    }

    /**
     * Delete a vector store.
     * 
     * @param vectorStoreId The ID of the vector store to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<DeleteVectorStoreResponse> deleteVectorStoreWithResponse(String vectorStoreId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteVectorStoreWithResponse(vectorStoreId, requestOptions);
    }

    /**
     * Returns a list of vector store files.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter by file status. One of `in_progress`, `completed`,
     * `failed`, `cancelled`. Allowed values: "in_progress", "completed", "failed", "cancelled".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param vectorStoreId The ID of the vector store that the files belong to.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<ListVectorStoreFilesResponse> listVectorStoreFilesWithResponse(String vectorStoreId,
        RequestOptions requestOptions) {
        return this.serviceClient.listVectorStoreFilesWithResponse(vectorStoreId, requestOptions);
    }

    /**
     * Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector
     * store](/docs/api-reference/vector-stores/object).
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     file_id: String (Required)
     *     chunking_strategy: BinaryData (Optional)
     * }
     * }
     * </pre>
     * 
     * @param vectorStoreId The ID of the vector store for which to create a File.
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a list of files attached to a vector store.
     */
    @Metadata(generated = true)
    public Response<VectorStoreFileObject> createVectorStoreFileWithResponse(String vectorStoreId,
        BinaryData requestBody, RequestOptions requestOptions) {
        return this.serviceClient.createVectorStoreFileWithResponse(vectorStoreId, requestBody, requestOptions);
    }

    /**
     * Retrieves a vector store file.
     * 
     * @param vectorStoreId The ID of the vector store that the file belongs to.
     * @param fileId The ID of the file being retrieved.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a list of files attached to a vector store.
     */
    @Metadata(generated = true)
    public Response<VectorStoreFileObject> getVectorStoreFileWithResponse(String vectorStoreId, String fileId,
        RequestOptions requestOptions) {
        return this.serviceClient.getVectorStoreFileWithResponse(vectorStoreId, fileId, requestOptions);
    }

    /**
     * Delete a vector store file. This will remove the file from the vector store but the file itself will not be
     * deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
     * 
     * @param vectorStoreId The ID of the vector store that the file belongs to.
     * @param fileId The ID of the file to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<DeleteVectorStoreFileResponse> deleteVectorStoreFileWithResponse(String vectorStoreId,
        String fileId, RequestOptions requestOptions) {
        return this.serviceClient.deleteVectorStoreFileWithResponse(vectorStoreId, fileId, requestOptions);
    }

    /**
     * Create a vector store file batch.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     chunking_strategy: BinaryData (Optional)
     * }
     * }
     * </pre>
     * 
     * @param vectorStoreId The ID of the vector store for which to create a file batch.
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a batch of files attached to a vector store.
     */
    @Metadata(generated = true)
    public Response<VectorStoreFileBatchObject> createVectorStoreFileBatchWithResponse(String vectorStoreId,
        BinaryData requestBody, RequestOptions requestOptions) {
        return this.serviceClient.createVectorStoreFileBatchWithResponse(vectorStoreId, requestBody, requestOptions);
    }

    /**
     * Retrieves a vector store file batch.
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to.
     * @param batchId The ID of the file batch being retrieved.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a batch of files attached to a vector store.
     */
    @Metadata(generated = true)
    public Response<VectorStoreFileBatchObject> getVectorStoreFileBatchWithResponse(String vectorStoreId,
        String batchId, RequestOptions requestOptions) {
        return this.serviceClient.getVectorStoreFileBatchWithResponse(vectorStoreId, batchId, requestOptions);
    }

    /**
     * Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as
     * possible.
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to.
     * @param batchId The ID of the file batch to cancel.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a batch of files attached to a vector store.
     */
    @Metadata(generated = true)
    public Response<VectorStoreFileBatchObject> cancelVectorStoreFileBatchWithResponse(String vectorStoreId,
        String batchId, RequestOptions requestOptions) {
        return this.serviceClient.cancelVectorStoreFileBatchWithResponse(vectorStoreId, batchId, requestOptions);
    }

    /**
     * Returns a list of vector store files in a batch.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter by file status. One of `in_progress`, `completed`,
     * `failed`, `cancelled`. Allowed values: "in_progress", "completed", "failed", "cancelled".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to.
     * @param batchId The ID of the file batch that the files belong to.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<ListVectorStoreFilesResponse> listFilesInVectorStoreBatchWithResponse(String vectorStoreId,
        String batchId, RequestOptions requestOptions) {
        return this.serviceClient.listFilesInVectorStoreBatchWithResponse(vectorStoreId, batchId, requestOptions);
    }

    /**
     * Returns a list of vector-stores.
     * 
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
     * default is 20.
     * @param order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
     * for descending order.
     * @param after A cursor for use in pagination. `after` is an object ID that defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.
     * @param before A cursor for use in pagination. `before` is an object ID that defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public ListVectorStoresResponse listVectorStores(Integer limit, ListVectorStoresRequestOrder order, String after,
        String before) {
        // Generated convenience method for listVectorStoresWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit));
        }
        if (order != null) {
            requestOptions.addQueryParam("order", order.toString());
        }
        if (after != null) {
            requestOptions.addQueryParam("after", after);
        }
        if (before != null) {
            requestOptions.addQueryParam("before", before);
        }
        return listVectorStoresWithResponse(requestOptions).getValue();
    }

    /**
     * Returns a list of vector-stores.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public ListVectorStoresResponse listVectorStores() {
        // Generated convenience method for listVectorStoresWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listVectorStoresWithResponse(requestOptions).getValue();
    }

    /**
     * Creates a vector store.
     * 
     * @param requestBody The requestBody parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a vector store is a collection of processed files can be used by the `file_search` tool.
     */
    @Metadata(generated = true)
    public VectorStoreObject createVectorStore(CreateVectorStoreRequest requestBody) {
        // Generated convenience method for createVectorStoreWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createVectorStoreWithResponse(BinaryData.fromObject(requestBody), requestOptions).getValue();
    }

    /**
     * Retrieves a vector store.
     * 
     * @param vectorStoreId The ID of the vector store to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a vector store is a collection of processed files can be used by the `file_search` tool.
     */
    @Metadata(generated = true)
    public VectorStoreObject getVectorStore(String vectorStoreId) {
        // Generated convenience method for getVectorStoreWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getVectorStoreWithResponse(vectorStoreId, requestOptions).getValue();
    }

    /**
     * Modifies a vector store.
     * 
     * @param vectorStoreId The ID of the vector store to modify.
     * @param requestBody The requestBody parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a vector store is a collection of processed files can be used by the `file_search` tool.
     */
    @Metadata(generated = true)
    public VectorStoreObject modifyVectorStore(String vectorStoreId, UpdateVectorStoreRequest requestBody) {
        // Generated convenience method for modifyVectorStoreWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return modifyVectorStoreWithResponse(vectorStoreId, BinaryData.fromObject(requestBody), requestOptions)
            .getValue();
    }

    /**
     * Delete a vector store.
     * 
     * @param vectorStoreId The ID of the vector store to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public DeleteVectorStoreResponse deleteVectorStore(String vectorStoreId) {
        // Generated convenience method for deleteVectorStoreWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteVectorStoreWithResponse(vectorStoreId, requestOptions).getValue();
    }

    /**
     * Returns a list of vector store files.
     * 
     * @param vectorStoreId The ID of the vector store that the files belong to.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
     * default is 20.
     * @param order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
     * for descending order.
     * @param after A cursor for use in pagination. `after` is an object ID that defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.
     * @param before A cursor for use in pagination. `before` is an object ID that defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.
     * @param filter Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public ListVectorStoreFilesResponse listVectorStoreFiles(String vectorStoreId, Integer limit,
        ListVectorStoreFilesRequestOrder order, String after, String before, ListVectorStoreFilesFilter filter) {
        // Generated convenience method for listVectorStoreFilesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit));
        }
        if (order != null) {
            requestOptions.addQueryParam("order", order.toString());
        }
        if (after != null) {
            requestOptions.addQueryParam("after", after);
        }
        if (before != null) {
            requestOptions.addQueryParam("before", before);
        }
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter.toString());
        }
        return listVectorStoreFilesWithResponse(vectorStoreId, requestOptions).getValue();
    }

    /**
     * Returns a list of vector store files.
     * 
     * @param vectorStoreId The ID of the vector store that the files belong to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public ListVectorStoreFilesResponse listVectorStoreFiles(String vectorStoreId) {
        // Generated convenience method for listVectorStoreFilesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listVectorStoreFilesWithResponse(vectorStoreId, requestOptions).getValue();
    }

    /**
     * Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector
     * store](/docs/api-reference/vector-stores/object).
     * 
     * @param vectorStoreId The ID of the vector store for which to create a File.
     * @param requestBody The requestBody parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of files attached to a vector store.
     */
    @Metadata(generated = true)
    public VectorStoreFileObject createVectorStoreFile(String vectorStoreId, CreateVectorStoreFileRequest requestBody) {
        // Generated convenience method for createVectorStoreFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createVectorStoreFileWithResponse(vectorStoreId, BinaryData.fromObject(requestBody), requestOptions)
            .getValue();
    }

    /**
     * Retrieves a vector store file.
     * 
     * @param vectorStoreId The ID of the vector store that the file belongs to.
     * @param fileId The ID of the file being retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of files attached to a vector store.
     */
    @Metadata(generated = true)
    public VectorStoreFileObject getVectorStoreFile(String vectorStoreId, String fileId) {
        // Generated convenience method for getVectorStoreFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getVectorStoreFileWithResponse(vectorStoreId, fileId, requestOptions).getValue();
    }

    /**
     * Delete a vector store file. This will remove the file from the vector store but the file itself will not be
     * deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
     * 
     * @param vectorStoreId The ID of the vector store that the file belongs to.
     * @param fileId The ID of the file to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public DeleteVectorStoreFileResponse deleteVectorStoreFile(String vectorStoreId, String fileId) {
        // Generated convenience method for deleteVectorStoreFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteVectorStoreFileWithResponse(vectorStoreId, fileId, requestOptions).getValue();
    }

    /**
     * Create a vector store file batch.
     * 
     * @param vectorStoreId The ID of the vector store for which to create a file batch.
     * @param requestBody The requestBody parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a batch of files attached to a vector store.
     */
    @Metadata(generated = true)
    public VectorStoreFileBatchObject createVectorStoreFileBatch(String vectorStoreId,
        CreateVectorStoreFileBatchRequest requestBody) {
        // Generated convenience method for createVectorStoreFileBatchWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createVectorStoreFileBatchWithResponse(vectorStoreId, BinaryData.fromObject(requestBody), requestOptions)
            .getValue();
    }

    /**
     * Retrieves a vector store file batch.
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to.
     * @param batchId The ID of the file batch being retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a batch of files attached to a vector store.
     */
    @Metadata(generated = true)
    public VectorStoreFileBatchObject getVectorStoreFileBatch(String vectorStoreId, String batchId) {
        // Generated convenience method for getVectorStoreFileBatchWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getVectorStoreFileBatchWithResponse(vectorStoreId, batchId, requestOptions).getValue();
    }

    /**
     * Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as
     * possible.
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to.
     * @param batchId The ID of the file batch to cancel.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a batch of files attached to a vector store.
     */
    @Metadata(generated = true)
    public VectorStoreFileBatchObject cancelVectorStoreFileBatch(String vectorStoreId, String batchId) {
        // Generated convenience method for cancelVectorStoreFileBatchWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cancelVectorStoreFileBatchWithResponse(vectorStoreId, batchId, requestOptions).getValue();
    }

    /**
     * Returns a list of vector store files in a batch.
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to.
     * @param batchId The ID of the file batch that the files belong to.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
     * default is 20.
     * @param order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
     * for descending order.
     * @param after A cursor for use in pagination. `after` is an object ID that defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.
     * @param before A cursor for use in pagination. `before` is an object ID that defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.
     * @param filter Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public ListVectorStoreFilesResponse listFilesInVectorStoreBatch(String vectorStoreId, String batchId, Integer limit,
        ListFilesInVectorStoreBatchRequestOrder order, String after, String before, ListVectorStoreFilesFilter filter) {
        // Generated convenience method for listFilesInVectorStoreBatchWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit));
        }
        if (order != null) {
            requestOptions.addQueryParam("order", order.toString());
        }
        if (after != null) {
            requestOptions.addQueryParam("after", after);
        }
        if (before != null) {
            requestOptions.addQueryParam("before", before);
        }
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter.toString());
        }
        return listFilesInVectorStoreBatchWithResponse(vectorStoreId, batchId, requestOptions).getValue();
    }

    /**
     * Returns a list of vector store files in a batch.
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to.
     * @param batchId The ID of the file batch that the files belong to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public ListVectorStoreFilesResponse listFilesInVectorStoreBatch(String vectorStoreId, String batchId) {
        // Generated convenience method for listFilesInVectorStoreBatchWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listFilesInVectorStoreBatchWithResponse(vectorStoreId, batchId, requestOptions).getValue();
    }
}
