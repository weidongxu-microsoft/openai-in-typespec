// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai;

import com.openai.implementation.ModerationsImpl;
import com.openai.models.CreateModerationRequest;
import com.openai.models.CreateModerationResponse;
import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.ServiceClient;
import io.clientcore.core.http.exception.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.util.binarydata.BinaryData;

/**
 * Initializes a new instance of the synchronous Moderations type.
 */
@ServiceClient(builder = OpenAIClientBuilder.class)
public final class ModerationsClient {
    @Metadata(generated = true)
    private final ModerationsImpl serviceClient;

    /**
     * Initializes an instance of ModerationsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Metadata(generated = true)
    ModerationsClient(ModerationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Classifies if text is potentially harmful.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     input: BinaryData (Required)
     *     model: String(omni-moderation-latest/omni-moderation-2024-09-26/text-moderation-latest/text-moderation-stable) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represents if a given text input is potentially harmful.
     */
    @Metadata(generated = true)
    public Response<CreateModerationResponse> createModerationWithResponse(BinaryData requestBody,
        RequestOptions requestOptions) {
        return this.serviceClient.createModerationWithResponse(requestBody, requestOptions);
    }

    /**
     * Classifies if text is potentially harmful.
     * 
     * @param requestBody The requestBody parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents if a given text input is potentially harmful.
     */
    @Metadata(generated = true)
    public CreateModerationResponse createModeration(CreateModerationRequest requestBody) {
        // Generated convenience method for createModerationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createModerationWithResponse(BinaryData.fromObject(requestBody), requestOptions).getValue();
    }
}
