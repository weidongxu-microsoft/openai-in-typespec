// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai;

import com.openai.implementation.RealtimeImpl;
import com.openai.models.RealtimeClientEvent;
import com.openai.models.RealtimeServerEvent;
import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.ServiceClient;
import io.clientcore.core.http.exception.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.util.binarydata.BinaryData;
import java.util.List;

/**
 * Initializes a new instance of the synchronous Realtime type.
 */
@ServiceClient(builder = OpenAIClientBuilder.class)
public final class RealtimeClient {
    @Metadata(generated = true)
    private final RealtimeImpl serviceClient;

    /**
     * Initializes an instance of RealtimeClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Metadata(generated = true)
    RealtimeClient(RealtimeImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Starts a real-time conversation session.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         type: String(session.update/input_audio_buffer.append/input_audio_buffer.commit/input_audio_buffer.clear/conversation.item.create/conversation.item.delete/conversation.item.truncate/response.create/response.cancel) (Required)
     *         event_id: String (Optional)
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param requestMessages The requestMessages parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<List<RealtimeServerEvent>> startRealtimeSessionWithResponse(BinaryData requestMessages,
        RequestOptions requestOptions) {
        return this.serviceClient.startRealtimeSessionWithResponse(requestMessages, requestOptions);
    }

    /**
     * Starts a real-time conversation session.
     * 
     * @param requestMessages The requestMessages parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public List<RealtimeServerEvent> startRealtimeSession(List<RealtimeClientEvent> requestMessages) {
        // Generated convenience method for startRealtimeSessionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return startRealtimeSessionWithResponse(BinaryData.fromObject(requestMessages), requestOptions).getValue();
    }
}
