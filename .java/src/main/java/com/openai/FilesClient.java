// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai;

import com.openai.implementation.FilesImpl;
import com.openai.implementation.MultipartFormDataHelper;
import com.openai.models.CreateFileRequest;
import com.openai.models.DeleteFileResponse;
import com.openai.models.ListFilesResponse;
import com.openai.models.OpenAIFile;
import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.ServiceClient;
import io.clientcore.core.http.exception.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.util.binarydata.BinaryData;
import java.util.Objects;

/**
 * Initializes a new instance of the synchronous Files type.
 */
@ServiceClient(builder = OpenAIClientBuilder.class)
public final class FilesClient {
    @Metadata(generated = true)
    private final FilesImpl serviceClient;

    /**
     * Initializes an instance of FilesClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Metadata(generated = true)
    FilesClient(FilesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Upload a file that can be used across various endpoints. The size of all the files uploaded by
     * one organization can be up to 100 GB.
     * 
     * The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See
     * the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files
     * supported. The Fine-tuning API only supports `.jsonl` files.
     * 
     * Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the `File` object represents a document that has been uploaded to OpenAI.
     */
    @Metadata(generated = true)
    Response<OpenAIFile> createFileWithResponse(BinaryData requestBody, RequestOptions requestOptions) {
        // Protocol API requires serialization of parts with content-disposition and data, as operation 'createFile' is
        // 'multipart/form-data'
        return this.serviceClient.createFileWithResponse(requestBody, requestOptions);
    }

    /**
     * Returns a list of files that belong to the user's organization.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>purpose</td><td>String</td><td>No</td><td>Only return files with the given purpose.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<ListFilesResponse> listFilesWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listFilesWithResponse(requestOptions);
    }

    /**
     * Returns information about a specific file.
     * 
     * @param fileId The ID of the file to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the `File` object represents a document that has been uploaded to OpenAI.
     */
    @Metadata(generated = true)
    public Response<OpenAIFile> retrieveFileWithResponse(String fileId, RequestOptions requestOptions) {
        return this.serviceClient.retrieveFileWithResponse(fileId, requestOptions);
    }

    /**
     * Delete a file.
     * 
     * @param fileId The ID of the file to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<DeleteFileResponse> deleteFileWithResponse(String fileId, RequestOptions requestOptions) {
        return this.serviceClient.deleteFileWithResponse(fileId, requestOptions);
    }

    /**
     * Returns the contents of the specified file.
     * 
     * @param fileId The ID of the file to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represent a byte array.
     */
    @Metadata(generated = true)
    public Response<byte[]> downloadFileWithResponse(String fileId, RequestOptions requestOptions) {
        return this.serviceClient.downloadFileWithResponse(fileId, requestOptions);
    }

    /**
     * Upload a file that can be used across various endpoints. The size of all the files uploaded by
     * one organization can be up to 100 GB.
     * 
     * The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See
     * the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files
     * supported. The Fine-tuning API only supports `.jsonl` files.
     * 
     * Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
     * 
     * @param requestBody The requestBody parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the `File` object represents a document that has been uploaded to OpenAI.
     */
    @Metadata(generated = true)
    public OpenAIFile createFile(CreateFileRequest requestBody) {
        // Generated convenience method for createFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createFileWithResponse(new MultipartFormDataHelper(requestOptions)
            .serializeFileField("file", requestBody.getFile().getContent(), requestBody.getFile().getContentType(),
                requestBody.getFile().getFilename())
            .serializeTextField("purpose", Objects.toString(requestBody.getPurpose()))
            .end()
            .getRequestBody(), requestOptions).getValue();
    }

    /**
     * Returns a list of files that belong to the user's organization.
     * 
     * @param purpose Only return files with the given purpose.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public ListFilesResponse listFiles(String purpose) {
        // Generated convenience method for listFilesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (purpose != null) {
            requestOptions.addQueryParam("purpose", purpose);
        }
        return listFilesWithResponse(requestOptions).getValue();
    }

    /**
     * Returns a list of files that belong to the user's organization.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public ListFilesResponse listFiles() {
        // Generated convenience method for listFilesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listFilesWithResponse(requestOptions).getValue();
    }

    /**
     * Returns information about a specific file.
     * 
     * @param fileId The ID of the file to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the `File` object represents a document that has been uploaded to OpenAI.
     */
    @Metadata(generated = true)
    public OpenAIFile retrieveFile(String fileId) {
        // Generated convenience method for retrieveFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return retrieveFileWithResponse(fileId, requestOptions).getValue();
    }

    /**
     * Delete a file.
     * 
     * @param fileId The ID of the file to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public DeleteFileResponse deleteFile(String fileId) {
        // Generated convenience method for deleteFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteFileWithResponse(fileId, requestOptions).getValue();
    }

    /**
     * Returns the contents of the specified file.
     * 
     * @param fileId The ID of the file to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represent a byte array.
     */
    @Metadata(generated = true)
    public byte[] downloadFile(String fileId) {
        // Generated convenience method for downloadFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return downloadFileWithResponse(fileId, requestOptions).getValue();
    }
}
