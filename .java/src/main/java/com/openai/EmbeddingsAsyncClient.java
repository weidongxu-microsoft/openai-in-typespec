// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.openai.implementation.EmbeddingsImpl;
import com.openai.models.CreateEmbeddingRequest;
import com.openai.models.CreateEmbeddingResponse;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous Embeddings type.
 */
@ServiceClient(builder = OpenAIClientBuilder.class, isAsync = true)
public final class EmbeddingsAsyncClient {
    @Generated
    private final EmbeddingsImpl serviceClient;

    /**
     * Initializes an instance of EmbeddingsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    EmbeddingsAsyncClient(EmbeddingsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates an embedding vector representing the input text.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     input: BinaryData (Required)
     *     model: String(text-embedding-ada-002/text-embedding-3-small/text-embedding-3-large) (Required)
     *     encoding_format: String(float/base64) (Optional)
     *     dimensions: Integer (Optional)
     *     user: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     data (Required): [
     *          (Required){
     *             index: int (Required)
     *             embedding: BinaryData (Required)
     *             object: String (Required)
     *         }
     *     ]
     *     model: String (Required)
     *     object: String (Required)
     *     usage (Required): {
     *         prompt_tokens: int (Required)
     *         total_tokens: int (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createEmbeddingWithResponse(BinaryData requestBody,
        RequestOptions requestOptions) {
        return this.serviceClient.createEmbeddingWithResponseAsync(requestBody, requestOptions);
    }

    /**
     * Creates an embedding vector representing the input text.
     * 
     * @param requestBody The requestBody parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CreateEmbeddingResponse> createEmbedding(CreateEmbeddingRequest requestBody) {
        // Generated convenience method for createEmbeddingWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createEmbeddingWithResponse(BinaryData.fromObject(requestBody), requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CreateEmbeddingResponse.class));
    }
}
