// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai;

import com.openai.implementation.AudioImpl;
import com.openai.implementation.MultipartFormDataHelper;
import com.openai.models.CreateSpeechRequest;
import com.openai.models.CreateTranscriptionRequest;
import com.openai.models.CreateTranslationRequest;
import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.ServiceClient;
import io.clientcore.core.http.exception.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.util.binarydata.BinaryData;
import java.util.Objects;

/**
 * Initializes a new instance of the synchronous Audio type.
 */
@ServiceClient(builder = OpenAIClientBuilder.class)
public final class AudioClient {
    @Metadata(generated = true)
    private final AudioImpl serviceClient;

    /**
     * Initializes an instance of AudioClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Metadata(generated = true)
    AudioClient(AudioImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Generates audio from the input text.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     model: String(tts-1/tts-1-hd) (Required)
     *     input: String (Required)
     *     voice: String(alloy/echo/fable/onyx/nova/shimmer) (Required)
     *     response_format: String(mp3/opus/aac/flac/wav/pcm) (Optional)
     *     speed: Double (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<BinaryData> createSpeechWithResponse(BinaryData requestBody, RequestOptions requestOptions) {
        return this.serviceClient.createSpeechWithResponse(requestBody, requestOptions);
    }

    /**
     * Transcribes audio into the input language.
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    Response<String> createTranscriptionWithResponse(BinaryData requestBody, RequestOptions requestOptions) {
        // Protocol API requires serialization of parts with content-disposition and data, as operation
        // 'createTranscription' is 'multipart/form-data'
        return this.serviceClient.createTranscriptionWithResponse(requestBody, requestOptions);
    }

    /**
     * Translates audio into English..
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    Response<String> createTranslationWithResponse(BinaryData requestBody, RequestOptions requestOptions) {
        // Protocol API requires serialization of parts with content-disposition and data, as operation
        // 'createTranslation' is 'multipart/form-data'
        return this.serviceClient.createTranslationWithResponse(requestBody, requestOptions);
    }

    /**
     * Generates audio from the input text.
     * 
     * @param requestBody The requestBody parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public BinaryData createSpeech(CreateSpeechRequest requestBody) {
        // Generated convenience method for createSpeechWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createSpeechWithResponse(BinaryData.fromObject(requestBody), requestOptions).getValue();
    }

    /**
     * Transcribes audio into the input language.
     * 
     * @param requestBody The requestBody parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public String createTranscription(CreateTranscriptionRequest requestBody) {
        // Generated convenience method for createTranscriptionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createTranscriptionWithResponse(new MultipartFormDataHelper(requestOptions)
            .serializeFileField("file", requestBody.getFile().getContent(), requestBody.getFile().getContentType(),
                requestBody.getFile().getFilename())
            .serializeTextField("model", Objects.toString(requestBody.getModel()))
            .serializeTextField("language", requestBody.getLanguage())
            .serializeTextField("prompt", requestBody.getPrompt())
            .serializeTextField("response_format", Objects.toString(requestBody.getResponseFormat()))
            .serializeTextField("temperature", Objects.toString(requestBody.getTemperature()))
            .serializeJsonField("timestamp_granularities[]", requestBody.getTimestampGranularities())
            .end()
            .getRequestBody(), requestOptions).getValue();
    }

    /**
     * Translates audio into English..
     * 
     * @param requestBody The requestBody parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters.
     */
    @Metadata(generated = true)
    public String createTranslation(CreateTranslationRequest requestBody) {
        // Generated convenience method for createTranslationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createTranslationWithResponse(new MultipartFormDataHelper(requestOptions)
            .serializeFileField("file", requestBody.getFile().getContent(), requestBody.getFile().getContentType(),
                requestBody.getFile().getFilename())
            .serializeTextField("model", Objects.toString(requestBody.getModel()))
            .serializeTextField("prompt", requestBody.getPrompt())
            .serializeTextField("response_format", Objects.toString(requestBody.getResponseFormat()))
            .serializeTextField("temperature", Objects.toString(requestBody.getTemperature()))
            .end()
            .getRequestBody(), requestOptions).getValue();
    }
}
