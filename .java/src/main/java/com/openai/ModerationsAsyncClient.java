// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.openai.implementation.ModerationsImpl;
import com.openai.models.CreateModerationRequest;
import com.openai.models.CreateModerationResponse;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous Moderations type.
 */
@ServiceClient(builder = OpenAIClientBuilder.class, isAsync = true)
public final class ModerationsAsyncClient {
    @Generated
    private final ModerationsImpl serviceClient;

    /**
     * Initializes an instance of ModerationsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    ModerationsAsyncClient(ModerationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Classifies if text is potentially harmful.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     input: BinaryData (Required)
     *     model: String(omni-moderation-latest/omni-moderation-2024-09-26/text-moderation-latest/text-moderation-stable) (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     model: String (Required)
     *     results (Required): [
     *          (Required){
     *             flagged: boolean (Required)
     *             categories (Required): {
     *                 hate: boolean (Required)
     *                 hate/threatening: boolean (Required)
     *                 harassment: boolean (Required)
     *                 harassment/threatening: boolean (Required)
     *                 illicit: boolean (Required)
     *                 illicit/violent: boolean (Required)
     *                 self-harm: boolean (Required)
     *                 self-harm/intent: boolean (Required)
     *                 self-harm/instructions: boolean (Required)
     *                 sexual: boolean (Required)
     *                 sexual/minors: boolean (Required)
     *                 violence: boolean (Required)
     *                 violence/graphic: boolean (Required)
     *             }
     *             category_scores (Required): {
     *                 hate: double (Required)
     *                 hate/threatening: double (Required)
     *                 harassment: double (Required)
     *                 harassment/threatening: double (Required)
     *                 illicit: double (Required)
     *                 illicit/violent: double (Required)
     *                 self-harm: double (Required)
     *                 self-harm/intent: double (Required)
     *                 self-harm/instructions: double (Required)
     *                 sexual: double (Required)
     *                 sexual/minors: double (Required)
     *                 violence: double (Required)
     *                 violence/graphic: double (Required)
     *             }
     *             category_applied_input_types (Required): {
     *                 hate (Required): [
     *                     String(text/image) (Required)
     *                 ]
     *                 hate/threatening (Required): [
     *                     String(text/image) (Required)
     *                 ]
     *                 harassment (Required): [
     *                     String(text/image) (Required)
     *                 ]
     *                 harassment/threatening (Required): [
     *                     String(text/image) (Required)
     *                 ]
     *                 illicit (Required): [
     *                     String(text/image) (Required)
     *                 ]
     *                 illicit/violent (Required): [
     *                     String(text/image) (Required)
     *                 ]
     *                 self-harm (Required): [
     *                     BinaryData (Required)
     *                 ]
     *                 self-harm/intent (Required): [
     *                     BinaryData (Required)
     *                 ]
     *                 self-harm/instructions (Required): [
     *                     BinaryData (Required)
     *                 ]
     *                 sexual (Required): [
     *                     BinaryData (Required)
     *                 ]
     *                 sexual/minors (Required): [
     *                     String(text/image) (Required)
     *                 ]
     *                 violence (Required): [
     *                     BinaryData (Required)
     *                 ]
     *                 violence/graphic (Required): [
     *                     BinaryData (Required)
     *                 ]
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents if a given text input is potentially harmful along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createModerationWithResponse(BinaryData requestBody,
        RequestOptions requestOptions) {
        return this.serviceClient.createModerationWithResponseAsync(requestBody, requestOptions);
    }

    /**
     * Classifies if text is potentially harmful.
     * 
     * @param requestBody The requestBody parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents if a given text input is potentially harmful on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CreateModerationResponse> createModeration(CreateModerationRequest requestBody) {
        // Generated convenience method for createModerationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createModerationWithResponse(BinaryData.fromObject(requestBody), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CreateModerationResponse.class));
    }
}
