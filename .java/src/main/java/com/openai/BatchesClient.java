// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai;

import com.openai.implementation.BatchesImpl;
import com.openai.implementation.models.CreateBatchRequest;
import com.openai.models.Batch;
import com.openai.models.CreateBatchRequestEndpoint;
import com.openai.models.ListBatchesResponse;
import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.ServiceClient;
import io.clientcore.core.http.exception.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.util.binarydata.BinaryData;
import java.util.Map;

/**
 * Initializes a new instance of the synchronous Batches type.
 */
@ServiceClient(builder = OpenAIClientBuilder.class)
public final class BatchesClient {
    @Metadata(generated = true)
    private final BatchesImpl serviceClient;

    /**
     * Initializes an instance of BatchesClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Metadata(generated = true)
    BatchesClient(BatchesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates and executes a batch from an uploaded file of requests.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     input_file_id: String (Required)
     *     endpoint: String(/v1/chat/completions//v1/embeddings) (Required)
     *     completion_window: String (Required)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param createBatchRequest The createBatchRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Batch> createBatchWithResponse(BinaryData createBatchRequest, RequestOptions requestOptions) {
        return this.serviceClient.createBatchWithResponse(createBatchRequest, requestOptions);
    }

    /**
     * List your organization's batches.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<ListBatchesResponse> listBatchesWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listBatchesWithResponse(requestOptions);
    }

    /**
     * Retrieves a batch.
     * 
     * @param batchId The ID of the batch to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Batch> retrieveBatchWithResponse(String batchId, RequestOptions requestOptions) {
        return this.serviceClient.retrieveBatchWithResponse(batchId, requestOptions);
    }

    /**
     * Cancels an in-progress batch.
     * 
     * @param batchId The ID of the batch to cancel.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Batch> cancelBatchWithResponse(String batchId, RequestOptions requestOptions) {
        return this.serviceClient.cancelBatchWithResponse(batchId, requestOptions);
    }

    /**
     * Creates and executes a batch from an uploaded file of requests.
     * 
     * @param inputFileId The ID of an uploaded file that contains requests for the new batch.
     * 
     * See [upload file](/docs/api-reference/files/create) for how to upload a file.
     * 
     * Your input file must be formatted as a [JSONL file](/docs/api-reference/batch/requestInput),
     * and must be uploaded with the purpose `batch`.
     * @param endpoint The endpoint to be used for all requests in the batch. Currently `/v1/chat/completions` and
     * `/v1/embeddings` are supported.
     * @param metadata Optional custom metadata for the batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Batch createBatch(String inputFileId, CreateBatchRequestEndpoint endpoint, Map<String, String> metadata) {
        // Generated convenience method for createBatchWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateBatchRequest createBatchRequestObj = new CreateBatchRequest(inputFileId, endpoint).setMetadata(metadata);
        BinaryData createBatchRequest = BinaryData.fromObject(createBatchRequestObj);
        return createBatchWithResponse(createBatchRequest, requestOptions).getValue();
    }

    /**
     * Creates and executes a batch from an uploaded file of requests.
     * 
     * @param inputFileId The ID of an uploaded file that contains requests for the new batch.
     * 
     * See [upload file](/docs/api-reference/files/create) for how to upload a file.
     * 
     * Your input file must be formatted as a [JSONL file](/docs/api-reference/batch/requestInput),
     * and must be uploaded with the purpose `batch`.
     * @param endpoint The endpoint to be used for all requests in the batch. Currently `/v1/chat/completions` and
     * `/v1/embeddings` are supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Batch createBatch(String inputFileId, CreateBatchRequestEndpoint endpoint) {
        // Generated convenience method for createBatchWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateBatchRequest createBatchRequestObj = new CreateBatchRequest(inputFileId, endpoint);
        BinaryData createBatchRequest = BinaryData.fromObject(createBatchRequestObj);
        return createBatchWithResponse(createBatchRequest, requestOptions).getValue();
    }

    /**
     * List your organization's batches.
     * 
     * @param after A cursor for use in pagination. `after` is an object ID that defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
     * default is 20.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public ListBatchesResponse listBatches(String after, Integer limit) {
        // Generated convenience method for listBatchesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (after != null) {
            requestOptions.addQueryParam("after", after);
        }
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit));
        }
        return listBatchesWithResponse(requestOptions).getValue();
    }

    /**
     * List your organization's batches.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public ListBatchesResponse listBatches() {
        // Generated convenience method for listBatchesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listBatchesWithResponse(requestOptions).getValue();
    }

    /**
     * Retrieves a batch.
     * 
     * @param batchId The ID of the batch to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Batch retrieveBatch(String batchId) {
        // Generated convenience method for retrieveBatchWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return retrieveBatchWithResponse(batchId, requestOptions).getValue();
    }

    /**
     * Cancels an in-progress batch.
     * 
     * @param batchId The ID of the batch to cancel.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Batch cancelBatch(String batchId) {
        // Generated convenience method for cancelBatchWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cancelBatchWithResponse(batchId, requestOptions).getValue();
    }
}
