// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai;

import com.openai.implementation.OpenAIClientImpl;
import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.ServiceClient;

/**
 * Initializes a new instance of the synchronous OpenAIClient type.
 */
@ServiceClient(builder = OpenAIClientBuilder.class)
public final class OpenAIClient {
    @Metadata(generated = true)
    private final OpenAIClientImpl serviceClient;

    /**
     * Initializes an instance of OpenAIClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Metadata(generated = true)
    OpenAIClient(OpenAIClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Gets an instance of AudioClient class.
     * 
     * @return an instance of AudioClientclass.
     */
    public AudioClient getAudioClient() {
        return new AudioClient(serviceClient.getAudio());
    }

    /**
     * Gets an instance of AssistantsClient class.
     * 
     * @return an instance of AssistantsClientclass.
     */
    public AssistantsClient getAssistantsClient() {
        return new AssistantsClient(serviceClient.getAssistants());
    }

    /**
     * Gets an instance of BatchesClient class.
     * 
     * @return an instance of BatchesClientclass.
     */
    public BatchesClient getBatchesClient() {
        return new BatchesClient(serviceClient.getBatches());
    }

    /**
     * Gets an instance of ChatClient class.
     * 
     * @return an instance of ChatClientclass.
     */
    public ChatClient getChatClient() {
        return new ChatClient(serviceClient.getChat());
    }

    /**
     * Gets an instance of CompletionsClient class.
     * 
     * @return an instance of CompletionsClientclass.
     */
    public CompletionsClient getCompletionsClient() {
        return new CompletionsClient(serviceClient.getCompletions());
    }

    /**
     * Gets an instance of EmbeddingsClient class.
     * 
     * @return an instance of EmbeddingsClientclass.
     */
    public EmbeddingsClient getEmbeddingsClient() {
        return new EmbeddingsClient(serviceClient.getEmbeddings());
    }

    /**
     * Gets an instance of FilesClient class.
     * 
     * @return an instance of FilesClientclass.
     */
    public FilesClient getFilesClient() {
        return new FilesClient(serviceClient.getFiles());
    }

    /**
     * Gets an instance of FineTuningClient class.
     * 
     * @return an instance of FineTuningClientclass.
     */
    public FineTuningClient getFineTuningClient() {
        return new FineTuningClient(serviceClient.getFineTuning());
    }

    /**
     * Gets an instance of ImagesClient class.
     * 
     * @return an instance of ImagesClientclass.
     */
    public ImagesClient getImagesClient() {
        return new ImagesClient(serviceClient.getImages());
    }

    /**
     * Gets an instance of MessagesClient class.
     * 
     * @return an instance of MessagesClientclass.
     */
    public MessagesClient getMessagesClient() {
        return new MessagesClient(serviceClient.getMessages());
    }

    /**
     * Gets an instance of ModelsClient class.
     * 
     * @return an instance of ModelsClientclass.
     */
    public ModelsClient getModelsClient() {
        return new ModelsClient(serviceClient.getModels());
    }

    /**
     * Gets an instance of ModerationsClient class.
     * 
     * @return an instance of ModerationsClientclass.
     */
    public ModerationsClient getModerationsClient() {
        return new ModerationsClient(serviceClient.getModerations());
    }

    /**
     * Gets an instance of RealtimeClient class.
     * 
     * @return an instance of RealtimeClientclass.
     */
    public RealtimeClient getRealtimeClient() {
        return new RealtimeClient(serviceClient.getRealtime());
    }

    /**
     * Gets an instance of ThreadsClient class.
     * 
     * @return an instance of ThreadsClientclass.
     */
    public ThreadsClient getThreadsClient() {
        return new ThreadsClient(serviceClient.getThreads());
    }

    /**
     * Gets an instance of RunsClient class.
     * 
     * @return an instance of RunsClientclass.
     */
    public RunsClient getRunsClient() {
        return new RunsClient(serviceClient.getRuns());
    }

    /**
     * Gets an instance of VectorStoresClient class.
     * 
     * @return an instance of VectorStoresClientclass.
     */
    public VectorStoresClient getVectorStoresClient() {
        return new VectorStoresClient(serviceClient.getVectorStores());
    }

    /**
     * Gets an instance of UploadsClient class.
     * 
     * @return an instance of UploadsClientclass.
     */
    public UploadsClient getUploadsClient() {
        return new UploadsClient(serviceClient.getUploads());
    }
}
