// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.openai.implementation.MultipartFormDataHelper;
import com.openai.implementation.UploadsImpl;
import com.openai.models.AddUploadPartRequest;
import com.openai.models.CompleteUploadRequest;
import com.openai.models.CreateUploadRequest;
import com.openai.models.Upload;
import com.openai.models.UploadPart;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous Uploads type.
 */
@ServiceClient(builder = OpenAIClientBuilder.class, isAsync = true)
public final class UploadsAsyncClient {
    @Generated
    private final UploadsImpl serviceClient;

    /**
     * Initializes an instance of UploadsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    UploadsAsyncClient(UploadsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates an intermediate [Upload](/docs/api-reference/uploads/object) object that you can add
     * [Parts](/docs/api-reference/uploads/part-object) to. Currently, an Upload can accept at most 8 GB in total and
     * expires after an hour after you create it.
     * 
     * Once you complete the Upload, we will create a [File](/docs/api-reference/files/object) object that contains all
     * the parts you uploaded. This File is usable in the rest of our platform as a regular File object.
     * 
     * For certain `purpose`s, the correct `mime_type` must be specified. Please refer to documentation for the
     * supported MIME types for your use case:
     * - [Assistants](/docs/assistants/tools/file-search/supported-files)
     * 
     * For guidance on the proper filename extensions for each purpose, please follow the documentation on [creating a
     * File](/docs/api-reference/files/create).
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     filename: String (Required)
     *     purpose: String(assistants/batch/fine-tune/vision) (Required)
     *     bytes: int (Required)
     *     mime_type: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     created_at: long (Required)
     *     filename: String (Required)
     *     bytes: int (Required)
     *     purpose: String (Required)
     *     status: String(pending/completed/cancelled/expired) (Required)
     *     expires_at: long (Required)
     *     object: String(upload) (Optional)
     *     file (Optional): {
     *         id: String (Required)
     *         bytes: Integer (Required)
     *         created_at: long (Required)
     *         filename: String (Required)
     *         object: String (Required)
     *         purpose: String(assistants/assistants_output/batch/batch_output/fine-tune/fine-tune-results/vision) (Required)
     *         status: String(uploaded/processed/error) (Required)
     *         status_details: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Upload object can accept byte chunks in the form of Parts along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createUploadWithResponse(BinaryData requestBody, RequestOptions requestOptions) {
        return this.serviceClient.createUploadWithResponseAsync(requestBody, requestOptions);
    }

    /**
     * Adds a [Part](/docs/api-reference/uploads/part-object) to an [Upload](/docs/api-reference/uploads/object) object.
     * A Part represents a chunk of bytes from the file you are trying to upload.
     * 
     * Each Part can be at most 64 MB, and you can add Parts until you hit the Upload maximum of 8 GB.
     * 
     * It is possible to add multiple Parts in parallel. You can decide the intended order of the Parts when you
     * [complete the Upload](/docs/api-reference/uploads/complete).
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     created_at: long (Required)
     *     upload_id: String (Required)
     *     object: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param uploadId The uploadId parameter.
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the upload Part represents a chunk of bytes we can add to an Upload object along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<BinaryData>> addUploadPartWithResponse(String uploadId, BinaryData requestBody,
        RequestOptions requestOptions) {
        // Protocol API requires serialization of parts with content-disposition and data, as operation 'addUploadPart'
        // is 'multipart/form-data'
        return this.serviceClient.addUploadPartWithResponseAsync(uploadId, requestBody, requestOptions);
    }

    /**
     * Completes the [Upload](/docs/api-reference/uploads/object).
     * 
     * Within the returned Upload object, there is a nested [File](/docs/api-reference/files/object) object that is
     * ready to use in the rest of the platform.
     * 
     * You can specify the order of the Parts by passing in an ordered list of the Part IDs.
     * 
     * The number of bytes uploaded upon completion must match the number of bytes initially specified when creating the
     * Upload object. No Parts may be added after an Upload is completed.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     part_ids (Required): [
     *         String (Required)
     *     ]
     *     md5: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     created_at: long (Required)
     *     filename: String (Required)
     *     bytes: int (Required)
     *     purpose: String (Required)
     *     status: String(pending/completed/cancelled/expired) (Required)
     *     expires_at: long (Required)
     *     object: String(upload) (Optional)
     *     file (Optional): {
     *         id: String (Required)
     *         bytes: Integer (Required)
     *         created_at: long (Required)
     *         filename: String (Required)
     *         object: String (Required)
     *         purpose: String(assistants/assistants_output/batch/batch_output/fine-tune/fine-tune-results/vision) (Required)
     *         status: String(uploaded/processed/error) (Required)
     *         status_details: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param uploadId The uploadId parameter.
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Upload object can accept byte chunks in the form of Parts along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> completeUploadWithResponse(String uploadId, BinaryData requestBody,
        RequestOptions requestOptions) {
        return this.serviceClient.completeUploadWithResponseAsync(uploadId, requestBody, requestOptions);
    }

    /**
     * Cancels the Upload. No Parts may be added after an Upload is cancelled.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     created_at: long (Required)
     *     filename: String (Required)
     *     bytes: int (Required)
     *     purpose: String (Required)
     *     status: String(pending/completed/cancelled/expired) (Required)
     *     expires_at: long (Required)
     *     object: String(upload) (Optional)
     *     file (Optional): {
     *         id: String (Required)
     *         bytes: Integer (Required)
     *         created_at: long (Required)
     *         filename: String (Required)
     *         object: String (Required)
     *         purpose: String(assistants/assistants_output/batch/batch_output/fine-tune/fine-tune-results/vision) (Required)
     *         status: String(uploaded/processed/error) (Required)
     *         status_details: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param uploadId The uploadId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Upload object can accept byte chunks in the form of Parts along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> cancelUploadWithResponse(String uploadId, RequestOptions requestOptions) {
        return this.serviceClient.cancelUploadWithResponseAsync(uploadId, requestOptions);
    }

    /**
     * Creates an intermediate [Upload](/docs/api-reference/uploads/object) object that you can add
     * [Parts](/docs/api-reference/uploads/part-object) to. Currently, an Upload can accept at most 8 GB in total and
     * expires after an hour after you create it.
     * 
     * Once you complete the Upload, we will create a [File](/docs/api-reference/files/object) object that contains all
     * the parts you uploaded. This File is usable in the rest of our platform as a regular File object.
     * 
     * For certain `purpose`s, the correct `mime_type` must be specified. Please refer to documentation for the
     * supported MIME types for your use case:
     * - [Assistants](/docs/assistants/tools/file-search/supported-files)
     * 
     * For guidance on the proper filename extensions for each purpose, please follow the documentation on [creating a
     * File](/docs/api-reference/files/create).
     * 
     * @param requestBody The requestBody parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Upload object can accept byte chunks in the form of Parts on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Upload> createUpload(CreateUploadRequest requestBody) {
        // Generated convenience method for createUploadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createUploadWithResponse(BinaryData.fromObject(requestBody), requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Upload.class));
    }

    /**
     * Adds a [Part](/docs/api-reference/uploads/part-object) to an [Upload](/docs/api-reference/uploads/object) object.
     * A Part represents a chunk of bytes from the file you are trying to upload.
     * 
     * Each Part can be at most 64 MB, and you can add Parts until you hit the Upload maximum of 8 GB.
     * 
     * It is possible to add multiple Parts in parallel. You can decide the intended order of the Parts when you
     * [complete the Upload](/docs/api-reference/uploads/complete).
     * 
     * @param uploadId The uploadId parameter.
     * @param requestBody The requestBody parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the upload Part represents a chunk of bytes we can add to an Upload object on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UploadPart> addUploadPart(String uploadId, AddUploadPartRequest requestBody) {
        // Generated convenience method for addUploadPartWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return addUploadPartWithResponse(uploadId,
            new MultipartFormDataHelper(requestOptions).serializeFileField("data", requestBody.getData().getContent(),
                requestBody.getData().getContentType(), requestBody.getData().getFilename()).end().getRequestBody(),
            requestOptions).flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(UploadPart.class));
    }

    /**
     * Completes the [Upload](/docs/api-reference/uploads/object).
     * 
     * Within the returned Upload object, there is a nested [File](/docs/api-reference/files/object) object that is
     * ready to use in the rest of the platform.
     * 
     * You can specify the order of the Parts by passing in an ordered list of the Part IDs.
     * 
     * The number of bytes uploaded upon completion must match the number of bytes initially specified when creating the
     * Upload object. No Parts may be added after an Upload is completed.
     * 
     * @param uploadId The uploadId parameter.
     * @param requestBody The requestBody parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Upload object can accept byte chunks in the form of Parts on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Upload> completeUpload(String uploadId, CompleteUploadRequest requestBody) {
        // Generated convenience method for completeUploadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return completeUploadWithResponse(uploadId, BinaryData.fromObject(requestBody), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Upload.class));
    }

    /**
     * Cancels the Upload. No Parts may be added after an Upload is cancelled.
     * 
     * @param uploadId The uploadId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Upload object can accept byte chunks in the form of Parts on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Upload> cancelUpload(String uploadId) {
        // Generated convenience method for cancelUploadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cancelUploadWithResponse(uploadId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Upload.class));
    }
}
