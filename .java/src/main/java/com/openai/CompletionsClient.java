// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai;

import com.openai.implementation.CompletionsImpl;
import com.openai.models.CreateCompletionRequest;
import com.openai.models.CreateCompletionResponse;
import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.ServiceClient;
import io.clientcore.core.http.exception.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.util.binarydata.BinaryData;

/**
 * Initializes a new instance of the synchronous Completions type.
 */
@ServiceClient(builder = OpenAIClientBuilder.class)
public final class CompletionsClient {
    @Metadata(generated = true)
    private final CompletionsImpl serviceClient;

    /**
     * Initializes an instance of CompletionsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Metadata(generated = true)
    CompletionsClient(CompletionsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates a completion for the provided prompt and parameters.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     model: String(gpt-3.5-turbo-instruct/davinci-002/babbage-002) (Required)
     *     prompt: BinaryData (Required)
     *     best_of: Integer (Optional)
     *     echo: Boolean (Optional)
     *     frequency_penalty: Double (Optional)
     *     logit_bias (Optional): {
     *         String: int (Required)
     *     }
     *     logprobs: Integer (Optional)
     *     max_tokens: Integer (Optional)
     *     n: Integer (Optional)
     *     presence_penalty: Double (Optional)
     *     seed: Long (Optional)
     *     stop: BinaryData (Optional)
     *     stream: Boolean (Optional)
     *     stream_options (Optional): {
     *         include_usage: Boolean (Optional)
     *     }
     *     suffix: String (Optional)
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     *     user: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represents a completion response from the API.
     */
    @Metadata(generated = true)
    public Response<CreateCompletionResponse> createCompletionWithResponse(BinaryData requestBody,
        RequestOptions requestOptions) {
        return this.serviceClient.createCompletionWithResponse(requestBody, requestOptions);
    }

    /**
     * Creates a completion for the provided prompt and parameters.
     * 
     * @param requestBody The requestBody parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a completion response from the API.
     */
    @Metadata(generated = true)
    public CreateCompletionResponse createCompletion(CreateCompletionRequest requestBody) {
        // Generated convenience method for createCompletionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createCompletionWithResponse(BinaryData.fromObject(requestBody), requestOptions).getValue();
    }
}
