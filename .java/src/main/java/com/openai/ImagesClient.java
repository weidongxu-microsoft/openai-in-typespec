// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai;

import com.openai.implementation.ImagesImpl;
import com.openai.implementation.MultipartFormDataHelper;
import com.openai.models.CreateImageEditRequest;
import com.openai.models.CreateImageRequest;
import com.openai.models.CreateImageVariationRequest;
import com.openai.models.ImagesResponse;
import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.ServiceClient;
import io.clientcore.core.http.exception.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.util.binarydata.BinaryData;
import java.util.Objects;

/**
 * Initializes a new instance of the synchronous Images type.
 */
@ServiceClient(builder = OpenAIClientBuilder.class)
public final class ImagesClient {
    @Metadata(generated = true)
    private final ImagesImpl serviceClient;

    /**
     * Initializes an instance of ImagesClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Metadata(generated = true)
    ImagesClient(ImagesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates an image given a prompt.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     prompt: String (Required)
     *     model: String(dall-e-2/dall-e-3) (Optional)
     *     n: Integer (Optional)
     *     quality: String(standard/hd) (Optional)
     *     response_format: String(url/b64_json) (Optional)
     *     size: String(256x256/512x512/1024x1024/1792x1024/1024x1792) (Optional)
     *     style: String(vivid/natural) (Optional)
     *     user: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<ImagesResponse> createImageWithResponse(BinaryData requestBody, RequestOptions requestOptions) {
        return this.serviceClient.createImageWithResponse(requestBody, requestOptions);
    }

    /**
     * Creates an edited or extended image given an original image and a prompt.
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    Response<ImagesResponse> createImageEditWithResponse(BinaryData requestBody, RequestOptions requestOptions) {
        // Protocol API requires serialization of parts with content-disposition and data, as operation
        // 'createImageEdit' is 'multipart/form-data'
        return this.serviceClient.createImageEditWithResponse(requestBody, requestOptions);
    }

    /**
     * Creates an edited or extended image given an original image and a prompt.
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    Response<ImagesResponse> createImageVariationWithResponse(BinaryData requestBody, RequestOptions requestOptions) {
        // Protocol API requires serialization of parts with content-disposition and data, as operation
        // 'createImageVariation' is 'multipart/form-data'
        return this.serviceClient.createImageVariationWithResponse(requestBody, requestOptions);
    }

    /**
     * Creates an image given a prompt.
     * 
     * @param requestBody The requestBody parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public ImagesResponse createImage(CreateImageRequest requestBody) {
        // Generated convenience method for createImageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createImageWithResponse(BinaryData.fromObject(requestBody), requestOptions).getValue();
    }

    /**
     * Creates an edited or extended image given an original image and a prompt.
     * 
     * @param requestBody The requestBody parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public ImagesResponse createImageEdit(CreateImageEditRequest requestBody) {
        // Generated convenience method for createImageEditWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createImageEditWithResponse(new MultipartFormDataHelper(requestOptions)
            .serializeFileField("image", requestBody.getImage().getContent(), requestBody.getImage().getContentType(),
                requestBody.getImage().getFilename())
            .serializeTextField("prompt", requestBody.getPrompt())
            .serializeFileField("mask", requestBody.getMask() == null ? null : requestBody.getMask().getContent(),
                requestBody.getMask() == null ? null : requestBody.getMask().getContentType(),
                requestBody.getMask() == null ? null : requestBody.getMask().getFilename())
            .serializeTextField("model", Objects.toString(requestBody.getModel()))
            .serializeTextField("n", Objects.toString(requestBody.getN()))
            .serializeTextField("size", Objects.toString(requestBody.getSize()))
            .serializeTextField("response_format", Objects.toString(requestBody.getResponseFormat()))
            .serializeTextField("user", requestBody.getUser())
            .end()
            .getRequestBody(), requestOptions).getValue();
    }

    /**
     * Creates an edited or extended image given an original image and a prompt.
     * 
     * @param requestBody The requestBody parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public ImagesResponse createImageVariation(CreateImageVariationRequest requestBody) {
        // Generated convenience method for createImageVariationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createImageVariationWithResponse(new MultipartFormDataHelper(requestOptions)
            .serializeFileField("image", requestBody.getImage().getContent(), requestBody.getImage().getContentType(),
                requestBody.getImage().getFilename())
            .serializeTextField("model", Objects.toString(requestBody.getModel()))
            .serializeTextField("n", Objects.toString(requestBody.getN()))
            .serializeTextField("response_format", Objects.toString(requestBody.getResponseFormat()))
            .serializeTextField("size", Objects.toString(requestBody.getSize()))
            .serializeTextField("user", requestBody.getUser())
            .end()
            .getRequestBody(), requestOptions).getValue();
    }
}
