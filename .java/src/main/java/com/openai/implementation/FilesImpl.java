// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the Files type.
 */
public final class FilesImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final FilesService service;

    /**
     * Service host.
     */
    private final String endpoint;

    /**
     * Gets Service host.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of Files client.
     * 
     * @param endpoint Service host.
     */
    public FilesImpl(String endpoint) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), endpoint);
    }

    /**
     * Initializes an instance of Files client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Service host.
     */
    public FilesImpl(HttpPipeline httpPipeline, String endpoint) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint);
    }

    /**
     * Initializes an instance of Files client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint Service host.
     */
    public FilesImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.service = RestProxy.create(FilesService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for Files to be used by the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "Files")
    public interface FilesService {
        // @Multipart not supported by RestProxy
        @Post("/files")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createFile(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @HeaderParam("content-type") String contentType,
            @BodyParam("multipart/form-data") BinaryData requestBody, RequestOptions requestOptions, Context context);

        // @Multipart not supported by RestProxy
        @Post("/files")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createFileSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @HeaderParam("content-type") String contentType,
            @BodyParam("multipart/form-data") BinaryData requestBody, RequestOptions requestOptions, Context context);

        @Get("/files")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listFiles(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/files")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listFilesSync(@HostParam("endpoint") String endpoint, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/files/{file_id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> retrieveFile(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("file_id") String fileId, RequestOptions requestOptions,
            Context context);

        @Get("/files/{file_id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> retrieveFileSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("file_id") String fileId, RequestOptions requestOptions,
            Context context);

        @Delete("/files/{file_id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> deleteFile(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("file_id") String fileId, RequestOptions requestOptions,
            Context context);

        @Delete("/files/{file_id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> deleteFileSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("file_id") String fileId, RequestOptions requestOptions,
            Context context);

        @Get("/files/{file_id}/content")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> downloadFile(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("file_id") String fileId, RequestOptions requestOptions,
            Context context);

        @Get("/files/{file_id}/content")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> downloadFileSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("file_id") String fileId, RequestOptions requestOptions,
            Context context);
    }

    /**
     * Upload a file that can be used across various endpoints. The size of all the files uploaded by
     * one organization can be up to 100 GB.
     * 
     * The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See
     * the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files
     * supported. The Fine-tuning API only supports `.jsonl` files.
     * 
     * Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     bytes: Integer (Required)
     *     created_at: long (Required)
     *     filename: String (Required)
     *     object: String (Required)
     *     purpose: String(assistants/assistants_output/batch/batch_output/fine-tune/fine-tune-results/vision) (Required)
     *     status: String(uploaded/processed/error) (Required)
     *     status_details: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the `File` object represents a document that has been uploaded to OpenAI along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createFileWithResponseAsync(BinaryData requestBody,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        final String contentType = "multipart/form-data";
        return FluxUtil.withContext(context -> service.createFile(this.getEndpoint(), accept, contentType, requestBody,
            requestOptions, context));
    }

    /**
     * Upload a file that can be used across various endpoints. The size of all the files uploaded by
     * one organization can be up to 100 GB.
     * 
     * The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See
     * the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files
     * supported. The Fine-tuning API only supports `.jsonl` files.
     * 
     * Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     bytes: Integer (Required)
     *     created_at: long (Required)
     *     filename: String (Required)
     *     object: String (Required)
     *     purpose: String(assistants/assistants_output/batch/batch_output/fine-tune/fine-tune-results/vision) (Required)
     *     status: String(uploaded/processed/error) (Required)
     *     status_details: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the `File` object represents a document that has been uploaded to OpenAI along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createFileWithResponse(BinaryData requestBody, RequestOptions requestOptions) {
        final String accept = "application/json";
        final String contentType = "multipart/form-data";
        return service.createFileSync(this.getEndpoint(), accept, contentType, requestBody, requestOptions,
            Context.NONE);
    }

    /**
     * Returns a list of files that belong to the user's organization.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>purpose</td><td>String</td><td>No</td><td>Only return files with the given purpose.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             bytes: Integer (Required)
     *             created_at: long (Required)
     *             filename: String (Required)
     *             object: String (Required)
     *             purpose: String(assistants/assistants_output/batch/batch_output/fine-tune/fine-tune-results/vision) (Required)
     *             status: String(uploaded/processed/error) (Required)
     *             status_details: String (Optional)
     *         }
     *     ]
     *     object: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listFilesWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listFiles(this.getEndpoint(), accept, requestOptions, context));
    }

    /**
     * Returns a list of files that belong to the user's organization.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>purpose</td><td>String</td><td>No</td><td>Only return files with the given purpose.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             bytes: Integer (Required)
     *             created_at: long (Required)
     *             filename: String (Required)
     *             object: String (Required)
     *             purpose: String(assistants/assistants_output/batch/batch_output/fine-tune/fine-tune-results/vision) (Required)
     *             status: String(uploaded/processed/error) (Required)
     *             status_details: String (Optional)
     *         }
     *     ]
     *     object: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listFilesWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listFilesSync(this.getEndpoint(), accept, requestOptions, Context.NONE);
    }

    /**
     * Returns information about a specific file.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     bytes: Integer (Required)
     *     created_at: long (Required)
     *     filename: String (Required)
     *     object: String (Required)
     *     purpose: String(assistants/assistants_output/batch/batch_output/fine-tune/fine-tune-results/vision) (Required)
     *     status: String(uploaded/processed/error) (Required)
     *     status_details: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param fileId The ID of the file to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the `File` object represents a document that has been uploaded to OpenAI along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> retrieveFileWithResponseAsync(String fileId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.retrieveFile(this.getEndpoint(), accept, fileId, requestOptions, context));
    }

    /**
     * Returns information about a specific file.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     bytes: Integer (Required)
     *     created_at: long (Required)
     *     filename: String (Required)
     *     object: String (Required)
     *     purpose: String(assistants/assistants_output/batch/batch_output/fine-tune/fine-tune-results/vision) (Required)
     *     status: String(uploaded/processed/error) (Required)
     *     status_details: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param fileId The ID of the file to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the `File` object represents a document that has been uploaded to OpenAI along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> retrieveFileWithResponse(String fileId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.retrieveFileSync(this.getEndpoint(), accept, fileId, requestOptions, Context.NONE);
    }

    /**
     * Delete a file.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     deleted: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param fileId The ID of the file to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteFileWithResponseAsync(String fileId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.deleteFile(this.getEndpoint(), accept, fileId, requestOptions, context));
    }

    /**
     * Delete a file.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     deleted: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param fileId The ID of the file to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteFileWithResponse(String fileId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteFileSync(this.getEndpoint(), accept, fileId, requestOptions, Context.NONE);
    }

    /**
     * Returns the contents of the specified file.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * byte[]
     * }
     * </pre>
     * 
     * @param fileId The ID of the file to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represent a byte array along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> downloadFileWithResponseAsync(String fileId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.downloadFile(this.getEndpoint(), accept, fileId, requestOptions, context));
    }

    /**
     * Returns the contents of the specified file.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * byte[]
     * }
     * </pre>
     * 
     * @param fileId The ID of the file to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represent a byte array along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> downloadFileWithResponse(String fileId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.downloadFileSync(this.getEndpoint(), accept, fileId, requestOptions, Context.NONE);
    }
}
