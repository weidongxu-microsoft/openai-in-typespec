// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the Messages type.
 */
public final class MessagesImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final MessagesService service;

    /**
     * Service host.
     */
    private final String endpoint;

    /**
     * Gets Service host.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of Messages client.
     * 
     * @param endpoint Service host.
     */
    public MessagesImpl(String endpoint) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), endpoint);
    }

    /**
     * Initializes an instance of Messages client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Service host.
     */
    public MessagesImpl(HttpPipeline httpPipeline, String endpoint) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint);
    }

    /**
     * Initializes an instance of Messages client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint Service host.
     */
    public MessagesImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.service = RestProxy.create(MessagesService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for Messages to be used by the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "Messages")
    public interface MessagesService {
        @Post("/threads/{thread_id}/messages")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createMessage(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("thread_id") String threadId,
            @HeaderParam("Content-Type") String contentType, @BodyParam("application/json") BinaryData requestBody,
            RequestOptions requestOptions, Context context);

        @Post("/threads/{thread_id}/messages")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createMessageSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("thread_id") String threadId,
            @HeaderParam("Content-Type") String contentType, @BodyParam("application/json") BinaryData requestBody,
            RequestOptions requestOptions, Context context);

        @Get("/threads/{thread_id}/messages")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listMessages(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("thread_id") String threadId,
            RequestOptions requestOptions, Context context);

        @Get("/threads/{thread_id}/messages")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listMessagesSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("thread_id") String threadId,
            RequestOptions requestOptions, Context context);

        @Get("/threads/{thread_id}/messages/{message_id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getMessage(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("thread_id") String threadId,
            @PathParam("message_id") String messageId, RequestOptions requestOptions, Context context);

        @Get("/threads/{thread_id}/messages/{message_id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getMessageSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("thread_id") String threadId,
            @PathParam("message_id") String messageId, RequestOptions requestOptions, Context context);

        @Post("/threads/{thread_id}/messages/{message_id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> modifyMessage(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("thread_id") String threadId,
            @PathParam("message_id") String messageId, @HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData requestBody, RequestOptions requestOptions, Context context);

        @Post("/threads/{thread_id}/messages/{message_id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> modifyMessageSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("thread_id") String threadId,
            @PathParam("message_id") String messageId, @HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData requestBody, RequestOptions requestOptions, Context context);

        @Delete("/threads/{thread_id}/messages/{message_id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> deleteMessage(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("thread_id") String threadId,
            @PathParam("message_id") String messageId, RequestOptions requestOptions, Context context);

        @Delete("/threads/{thread_id}/messages/{message_id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> deleteMessageSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("thread_id") String threadId,
            @PathParam("message_id") String messageId, RequestOptions requestOptions, Context context);
    }

    /**
     * Create a message.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     role: String(user/assistant) (Required)
     *     content (Required): [
     *          (Required){
     *         }
     *     ]
     *     attachments (Optional): [
     *          (Optional){
     *             file_id: String (Required)
     *             tools (Required): [
     *                 BinaryData (Required)
     *             ]
     *         }
     *     ]
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     status: String(in_progress/incomplete/completed) (Required)
     *     incomplete_details (Required): {
     *         reason: String(content_filter/max_tokens/run_cancelled/run_expired/run_failed) (Required)
     *     }
     *     completed_at: Long (Required)
     *     incomplete_at: Long (Required)
     *     role: String(user/assistant) (Required)
     *     content (Required): [
     *          (Required){
     *         }
     *     ]
     *     assistant_id: String (Required)
     *     run_id: String (Required)
     *     attachments (Required): [
     *          (Required){
     *             file_id: String (Optional)
     *             tools (Optional): [
     *                 BinaryData (Optional)
     *             ]
     *         }
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) to create a message for.
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a message within a [thread](/docs/api-reference/threads) along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createMessageWithResponseAsync(String threadId, BinaryData requestBody,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        final String contentType = "application/json";
        return FluxUtil.withContext(context -> service.createMessage(this.getEndpoint(), accept, threadId, contentType,
            requestBody, requestOptions, context));
    }

    /**
     * Create a message.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     role: String(user/assistant) (Required)
     *     content (Required): [
     *          (Required){
     *         }
     *     ]
     *     attachments (Optional): [
     *          (Optional){
     *             file_id: String (Required)
     *             tools (Required): [
     *                 BinaryData (Required)
     *             ]
     *         }
     *     ]
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     status: String(in_progress/incomplete/completed) (Required)
     *     incomplete_details (Required): {
     *         reason: String(content_filter/max_tokens/run_cancelled/run_expired/run_failed) (Required)
     *     }
     *     completed_at: Long (Required)
     *     incomplete_at: Long (Required)
     *     role: String(user/assistant) (Required)
     *     content (Required): [
     *          (Required){
     *         }
     *     ]
     *     assistant_id: String (Required)
     *     run_id: String (Required)
     *     attachments (Required): [
     *          (Required){
     *             file_id: String (Optional)
     *             tools (Optional): [
     *                 BinaryData (Optional)
     *             ]
     *         }
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) to create a message for.
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a message within a [thread](/docs/api-reference/threads) along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createMessageWithResponse(String threadId, BinaryData requestBody,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        final String contentType = "application/json";
        return service.createMessageSync(this.getEndpoint(), accept, threadId, contentType, requestBody, requestOptions,
            Context.NONE);
    }

    /**
     * Returns a list of messages for a given thread.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             thread_id: String (Required)
     *             status: String(in_progress/incomplete/completed) (Required)
     *             incomplete_details (Required): {
     *                 reason: String(content_filter/max_tokens/run_cancelled/run_expired/run_failed) (Required)
     *             }
     *             completed_at: Long (Required)
     *             incomplete_at: Long (Required)
     *             role: String(user/assistant) (Required)
     *             content (Required): [
     *                  (Required){
     *                 }
     *             ]
     *             assistant_id: String (Required)
     *             run_id: String (Required)
     *             attachments (Required): [
     *                  (Required){
     *                     file_id: String (Optional)
     *                     tools (Optional): [
     *                         BinaryData (Optional)
     *                     ]
     *                 }
     *             ]
     *             metadata (Required): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) the messages belong to.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listMessagesWithResponseAsync(String threadId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.listMessages(this.getEndpoint(), accept, threadId, requestOptions, context));
    }

    /**
     * Returns a list of messages for a given thread.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             thread_id: String (Required)
     *             status: String(in_progress/incomplete/completed) (Required)
     *             incomplete_details (Required): {
     *                 reason: String(content_filter/max_tokens/run_cancelled/run_expired/run_failed) (Required)
     *             }
     *             completed_at: Long (Required)
     *             incomplete_at: Long (Required)
     *             role: String(user/assistant) (Required)
     *             content (Required): [
     *                  (Required){
     *                 }
     *             ]
     *             assistant_id: String (Required)
     *             run_id: String (Required)
     *             attachments (Required): [
     *                  (Required){
     *                     file_id: String (Optional)
     *                     tools (Optional): [
     *                         BinaryData (Optional)
     *                     ]
     *                 }
     *             ]
     *             metadata (Required): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) the messages belong to.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listMessagesWithResponse(String threadId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listMessagesSync(this.getEndpoint(), accept, threadId, requestOptions, Context.NONE);
    }

    /**
     * Retrieve a message.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     status: String(in_progress/incomplete/completed) (Required)
     *     incomplete_details (Required): {
     *         reason: String(content_filter/max_tokens/run_cancelled/run_expired/run_failed) (Required)
     *     }
     *     completed_at: Long (Required)
     *     incomplete_at: Long (Required)
     *     role: String(user/assistant) (Required)
     *     content (Required): [
     *          (Required){
     *         }
     *     ]
     *     assistant_id: String (Required)
     *     run_id: String (Required)
     *     attachments (Required): [
     *          (Required){
     *             file_id: String (Optional)
     *             tools (Optional): [
     *                 BinaryData (Optional)
     *             ]
     *         }
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
     * @param messageId The ID of the message to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a message within a [thread](/docs/api-reference/threads) along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getMessageWithResponseAsync(String threadId, String messageId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.getMessage(this.getEndpoint(), accept, threadId, messageId, requestOptions, context));
    }

    /**
     * Retrieve a message.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     status: String(in_progress/incomplete/completed) (Required)
     *     incomplete_details (Required): {
     *         reason: String(content_filter/max_tokens/run_cancelled/run_expired/run_failed) (Required)
     *     }
     *     completed_at: Long (Required)
     *     incomplete_at: Long (Required)
     *     role: String(user/assistant) (Required)
     *     content (Required): [
     *          (Required){
     *         }
     *     ]
     *     assistant_id: String (Required)
     *     run_id: String (Required)
     *     attachments (Required): [
     *          (Required){
     *             file_id: String (Optional)
     *             tools (Optional): [
     *                 BinaryData (Optional)
     *             ]
     *         }
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
     * @param messageId The ID of the message to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a message within a [thread](/docs/api-reference/threads) along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getMessageWithResponse(String threadId, String messageId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getMessageSync(this.getEndpoint(), accept, threadId, messageId, requestOptions, Context.NONE);
    }

    /**
     * Modifies a message.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     status: String(in_progress/incomplete/completed) (Required)
     *     incomplete_details (Required): {
     *         reason: String(content_filter/max_tokens/run_cancelled/run_expired/run_failed) (Required)
     *     }
     *     completed_at: Long (Required)
     *     incomplete_at: Long (Required)
     *     role: String(user/assistant) (Required)
     *     content (Required): [
     *          (Required){
     *         }
     *     ]
     *     assistant_id: String (Required)
     *     run_id: String (Required)
     *     attachments (Required): [
     *          (Required){
     *             file_id: String (Optional)
     *             tools (Optional): [
     *                 BinaryData (Optional)
     *             ]
     *         }
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param threadId The ID of the thread to which this message belongs.
     * @param messageId The ID of the message to modify.
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a message within a [thread](/docs/api-reference/threads) along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> modifyMessageWithResponseAsync(String threadId, String messageId,
        BinaryData requestBody, RequestOptions requestOptions) {
        final String accept = "application/json";
        final String contentType = "application/json";
        return FluxUtil.withContext(context -> service.modifyMessage(this.getEndpoint(), accept, threadId, messageId,
            contentType, requestBody, requestOptions, context));
    }

    /**
     * Modifies a message.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     status: String(in_progress/incomplete/completed) (Required)
     *     incomplete_details (Required): {
     *         reason: String(content_filter/max_tokens/run_cancelled/run_expired/run_failed) (Required)
     *     }
     *     completed_at: Long (Required)
     *     incomplete_at: Long (Required)
     *     role: String(user/assistant) (Required)
     *     content (Required): [
     *          (Required){
     *         }
     *     ]
     *     assistant_id: String (Required)
     *     run_id: String (Required)
     *     attachments (Required): [
     *          (Required){
     *             file_id: String (Optional)
     *             tools (Optional): [
     *                 BinaryData (Optional)
     *             ]
     *         }
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param threadId The ID of the thread to which this message belongs.
     * @param messageId The ID of the message to modify.
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a message within a [thread](/docs/api-reference/threads) along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> modifyMessageWithResponse(String threadId, String messageId, BinaryData requestBody,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        final String contentType = "application/json";
        return service.modifyMessageSync(this.getEndpoint(), accept, threadId, messageId, contentType, requestBody,
            requestOptions, Context.NONE);
    }

    /**
     * Deletes a message.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     deleted: boolean (Required)
     *     object: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param threadId The ID of the thread to which this message belongs.
     * @param messageId The ID of the message to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteMessageWithResponseAsync(String threadId, String messageId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.deleteMessage(this.getEndpoint(), accept, threadId, messageId, requestOptions, context));
    }

    /**
     * Deletes a message.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     deleted: boolean (Required)
     *     object: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param threadId The ID of the thread to which this message belongs.
     * @param messageId The ID of the message to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteMessageWithResponse(String threadId, String messageId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteMessageSync(this.getEndpoint(), accept, threadId, messageId, requestOptions, Context.NONE);
    }
}
