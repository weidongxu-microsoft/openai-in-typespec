// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the Moderations type.
 */
public final class ModerationsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ModerationsService service;

    /**
     * Service host.
     */
    private final String endpoint;

    /**
     * Gets Service host.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of Moderations client.
     * 
     * @param endpoint Service host.
     */
    public ModerationsImpl(String endpoint) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), endpoint);
    }

    /**
     * Initializes an instance of Moderations client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Service host.
     */
    public ModerationsImpl(HttpPipeline httpPipeline, String endpoint) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint);
    }

    /**
     * Initializes an instance of Moderations client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint Service host.
     */
    public ModerationsImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.service = RestProxy.create(ModerationsService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for Moderations to be used by the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "Moderations")
    public interface ModerationsService {
        @Post("/moderations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createModeration(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData requestBody, RequestOptions requestOptions, Context context);

        @Post("/moderations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createModerationSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData requestBody, RequestOptions requestOptions, Context context);
    }

    /**
     * Classifies if text is potentially harmful.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     input: BinaryData (Required)
     *     model: String(omni-moderation-latest/omni-moderation-2024-09-26/text-moderation-latest/text-moderation-stable) (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     model: String (Required)
     *     results (Required): [
     *          (Required){
     *             flagged: boolean (Required)
     *             categories (Required): {
     *                 hate: boolean (Required)
     *                 hate/threatening: boolean (Required)
     *                 harassment: boolean (Required)
     *                 harassment/threatening: boolean (Required)
     *                 illicit: boolean (Required)
     *                 illicit/violent: boolean (Required)
     *                 self-harm: boolean (Required)
     *                 self-harm/intent: boolean (Required)
     *                 self-harm/instructions: boolean (Required)
     *                 sexual: boolean (Required)
     *                 sexual/minors: boolean (Required)
     *                 violence: boolean (Required)
     *                 violence/graphic: boolean (Required)
     *             }
     *             category_scores (Required): {
     *                 hate: double (Required)
     *                 hate/threatening: double (Required)
     *                 harassment: double (Required)
     *                 harassment/threatening: double (Required)
     *                 illicit: double (Required)
     *                 illicit/violent: double (Required)
     *                 self-harm: double (Required)
     *                 self-harm/intent: double (Required)
     *                 self-harm/instructions: double (Required)
     *                 sexual: double (Required)
     *                 sexual/minors: double (Required)
     *                 violence: double (Required)
     *                 violence/graphic: double (Required)
     *             }
     *             category_applied_input_types (Required): {
     *                 hate (Required): [
     *                     String(text/image) (Required)
     *                 ]
     *                 hate/threatening (Required): [
     *                     String(text/image) (Required)
     *                 ]
     *                 harassment (Required): [
     *                     String(text/image) (Required)
     *                 ]
     *                 harassment/threatening (Required): [
     *                     String(text/image) (Required)
     *                 ]
     *                 illicit (Required): [
     *                     String(text/image) (Required)
     *                 ]
     *                 illicit/violent (Required): [
     *                     String(text/image) (Required)
     *                 ]
     *                 self-harm (Required): [
     *                     BinaryData (Required)
     *                 ]
     *                 self-harm/intent (Required): [
     *                     BinaryData (Required)
     *                 ]
     *                 self-harm/instructions (Required): [
     *                     BinaryData (Required)
     *                 ]
     *                 sexual (Required): [
     *                     BinaryData (Required)
     *                 ]
     *                 sexual/minors (Required): [
     *                     String(text/image) (Required)
     *                 ]
     *                 violence (Required): [
     *                     BinaryData (Required)
     *                 ]
     *                 violence/graphic (Required): [
     *                     BinaryData (Required)
     *                 ]
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents if a given text input is potentially harmful along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createModerationWithResponseAsync(BinaryData requestBody,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        final String contentType = "application/json";
        return FluxUtil.withContext(context -> service.createModeration(this.getEndpoint(), accept, contentType,
            requestBody, requestOptions, context));
    }

    /**
     * Classifies if text is potentially harmful.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     input: BinaryData (Required)
     *     model: String(omni-moderation-latest/omni-moderation-2024-09-26/text-moderation-latest/text-moderation-stable) (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     model: String (Required)
     *     results (Required): [
     *          (Required){
     *             flagged: boolean (Required)
     *             categories (Required): {
     *                 hate: boolean (Required)
     *                 hate/threatening: boolean (Required)
     *                 harassment: boolean (Required)
     *                 harassment/threatening: boolean (Required)
     *                 illicit: boolean (Required)
     *                 illicit/violent: boolean (Required)
     *                 self-harm: boolean (Required)
     *                 self-harm/intent: boolean (Required)
     *                 self-harm/instructions: boolean (Required)
     *                 sexual: boolean (Required)
     *                 sexual/minors: boolean (Required)
     *                 violence: boolean (Required)
     *                 violence/graphic: boolean (Required)
     *             }
     *             category_scores (Required): {
     *                 hate: double (Required)
     *                 hate/threatening: double (Required)
     *                 harassment: double (Required)
     *                 harassment/threatening: double (Required)
     *                 illicit: double (Required)
     *                 illicit/violent: double (Required)
     *                 self-harm: double (Required)
     *                 self-harm/intent: double (Required)
     *                 self-harm/instructions: double (Required)
     *                 sexual: double (Required)
     *                 sexual/minors: double (Required)
     *                 violence: double (Required)
     *                 violence/graphic: double (Required)
     *             }
     *             category_applied_input_types (Required): {
     *                 hate (Required): [
     *                     String(text/image) (Required)
     *                 ]
     *                 hate/threatening (Required): [
     *                     String(text/image) (Required)
     *                 ]
     *                 harassment (Required): [
     *                     String(text/image) (Required)
     *                 ]
     *                 harassment/threatening (Required): [
     *                     String(text/image) (Required)
     *                 ]
     *                 illicit (Required): [
     *                     String(text/image) (Required)
     *                 ]
     *                 illicit/violent (Required): [
     *                     String(text/image) (Required)
     *                 ]
     *                 self-harm (Required): [
     *                     BinaryData (Required)
     *                 ]
     *                 self-harm/intent (Required): [
     *                     BinaryData (Required)
     *                 ]
     *                 self-harm/instructions (Required): [
     *                     BinaryData (Required)
     *                 ]
     *                 sexual (Required): [
     *                     BinaryData (Required)
     *                 ]
     *                 sexual/minors (Required): [
     *                     String(text/image) (Required)
     *                 ]
     *                 violence (Required): [
     *                     BinaryData (Required)
     *                 ]
     *                 violence/graphic (Required): [
     *                     BinaryData (Required)
     *                 ]
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents if a given text input is potentially harmful along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createModerationWithResponse(BinaryData requestBody, RequestOptions requestOptions) {
        final String accept = "application/json";
        final String contentType = "application/json";
        return service.createModerationSync(this.getEndpoint(), accept, contentType, requestBody, requestOptions,
            Context.NONE);
    }
}
