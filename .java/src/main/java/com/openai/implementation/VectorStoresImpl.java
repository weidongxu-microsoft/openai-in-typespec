// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.implementation;

import com.openai.models.DeleteVectorStoreFileResponse;
import com.openai.models.DeleteVectorStoreResponse;
import com.openai.models.ListVectorStoreFilesResponse;
import com.openai.models.ListVectorStoresResponse;
import com.openai.models.VectorStoreFileBatchObject;
import com.openai.models.VectorStoreFileObject;
import com.openai.models.VectorStoreObject;
import io.clientcore.core.annotation.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotation.BodyParam;
import io.clientcore.core.http.annotation.HeaderParam;
import io.clientcore.core.http.annotation.HostParam;
import io.clientcore.core.http.annotation.HttpRequestInformation;
import io.clientcore.core.http.annotation.PathParam;
import io.clientcore.core.http.annotation.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exception.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.util.binarydata.BinaryData;

/**
 * Initializes a new instance of the VectorStores type.
 */
public final class VectorStoresImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final VectorStoresService service;

    /**
     * Service host.
     */
    private final String endpoint;

    /**
     * Gets Service host.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of VectorStores client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Service host.
     */
    public VectorStoresImpl(HttpPipeline httpPipeline, String endpoint) {
        this.endpoint = "https://api.openai.com/v1";
        this.httpPipeline = httpPipeline;
        this.service = RestProxy.create(VectorStoresService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for VectorStores to be used by the proxy service to perform REST calls.
     */
    @ServiceInterface(name = "VectorStores", host = "{endpoint}")
    public interface VectorStoresService {
        @HttpRequestInformation(method = HttpMethod.GET, path = "/vector_stores", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionDetail
        Response<ListVectorStoresResponse> listVectorStoresSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/vector_stores", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionDetail
        Response<VectorStoreObject> createVectorStoreSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData requestBody, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/vector_stores/{vector_store_id}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionDetail
        Response<VectorStoreObject> getVectorStoreSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("vector_store_id") String vectorStoreId,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/vector_stores/{vector_store_id}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionDetail
        Response<VectorStoreObject> modifyVectorStoreSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("vector_store_id") String vectorStoreId,
            @HeaderParam("Content-Type") String contentType, @BodyParam("application/json") BinaryData requestBody,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.DELETE,
            path = "/vector_stores/{vector_store_id}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionDetail
        Response<DeleteVectorStoreResponse> deleteVectorStoreSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("vector_store_id") String vectorStoreId,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/vector_stores/{vector_store_id}/files",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionDetail
        Response<ListVectorStoreFilesResponse> listVectorStoreFilesSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("vector_store_id") String vectorStoreId,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/vector_stores/{vector_store_id}/files",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionDetail
        Response<VectorStoreFileObject> createVectorStoreFileSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("vector_store_id") String vectorStoreId,
            @HeaderParam("Content-Type") String contentType, @BodyParam("application/json") BinaryData requestBody,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/vector_stores/{vector_store_id}/files/{file_id}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionDetail
        Response<VectorStoreFileObject> getVectorStoreFileSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("vector_store_id") String vectorStoreId,
            @PathParam("file_id") String fileId, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.DELETE,
            path = "/vector_stores/{vector_store_id}/files/{file_id}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionDetail
        Response<DeleteVectorStoreFileResponse> deleteVectorStoreFileSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("vector_store_id") String vectorStoreId,
            @PathParam("file_id") String fileId, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/vector_stores/{vector_store_id}/file_batches",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionDetail
        Response<VectorStoreFileBatchObject> createVectorStoreFileBatchSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("vector_store_id") String vectorStoreId,
            @HeaderParam("Content-Type") String contentType, @BodyParam("application/json") BinaryData requestBody,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/vector_stores/{vector_store_id}/file_batches/{batch_id}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionDetail
        Response<VectorStoreFileBatchObject> getVectorStoreFileBatchSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("vector_store_id") String vectorStoreId,
            @PathParam("batch_id") String batchId, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionDetail
        Response<VectorStoreFileBatchObject> cancelVectorStoreFileBatchSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("vector_store_id") String vectorStoreId,
            @PathParam("batch_id") String batchId, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/vector_stores/{vector_store_id}/file_batches/{batch_id}/files",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionDetail
        Response<ListVectorStoreFilesResponse> listFilesInVectorStoreBatchSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("vector_store_id") String vectorStoreId,
            @PathParam("batch_id") String batchId, RequestOptions requestOptions);
    }

    /**
     * Returns a list of vector-stores.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<ListVectorStoresResponse> listVectorStoresWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listVectorStoresSync(this.getEndpoint(), accept, requestOptions);
    }

    /**
     * Creates a vector store.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     file_ids (Optional): [
     *         String (Optional)
     *     ]
     *     name: String (Optional)
     *     expires_after (Optional): {
     *         anchor: String (Required)
     *         days: int (Required)
     *     }
     *     chunking_strategy: BinaryData (Optional)
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a vector store is a collection of processed files can be used by the `file_search` tool.
     */
    public Response<VectorStoreObject> createVectorStoreWithResponse(BinaryData requestBody,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        final String contentType = "application/json";
        return service.createVectorStoreSync(this.getEndpoint(), accept, contentType, requestBody, requestOptions);
    }

    /**
     * Retrieves a vector store.
     * 
     * @param vectorStoreId The ID of the vector store to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a vector store is a collection of processed files can be used by the `file_search` tool.
     */
    public Response<VectorStoreObject> getVectorStoreWithResponse(String vectorStoreId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getVectorStoreSync(this.getEndpoint(), accept, vectorStoreId, requestOptions);
    }

    /**
     * Modifies a vector store.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Optional)
     *     expires_after (Optional): {
     *         anchor: String (Required)
     *         days: int (Required)
     *     }
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param vectorStoreId The ID of the vector store to modify.
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a vector store is a collection of processed files can be used by the `file_search` tool.
     */
    public Response<VectorStoreObject> modifyVectorStoreWithResponse(String vectorStoreId, BinaryData requestBody,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        final String contentType = "application/json";
        return service.modifyVectorStoreSync(this.getEndpoint(), accept, vectorStoreId, contentType, requestBody,
            requestOptions);
    }

    /**
     * Delete a vector store.
     * 
     * @param vectorStoreId The ID of the vector store to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<DeleteVectorStoreResponse> deleteVectorStoreWithResponse(String vectorStoreId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteVectorStoreSync(this.getEndpoint(), accept, vectorStoreId, requestOptions);
    }

    /**
     * Returns a list of vector store files.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter by file status. One of `in_progress`, `completed`,
     * `failed`, `cancelled`. Allowed values: "in_progress", "completed", "failed", "cancelled".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param vectorStoreId The ID of the vector store that the files belong to.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<ListVectorStoreFilesResponse> listVectorStoreFilesWithResponse(String vectorStoreId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listVectorStoreFilesSync(this.getEndpoint(), accept, vectorStoreId, requestOptions);
    }

    /**
     * Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector
     * store](/docs/api-reference/vector-stores/object).
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     file_id: String (Required)
     *     chunking_strategy: BinaryData (Optional)
     * }
     * }
     * </pre>
     * 
     * @param vectorStoreId The ID of the vector store for which to create a File.
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a list of files attached to a vector store.
     */
    public Response<VectorStoreFileObject> createVectorStoreFileWithResponse(String vectorStoreId,
        BinaryData requestBody, RequestOptions requestOptions) {
        final String accept = "application/json";
        final String contentType = "application/json";
        return service.createVectorStoreFileSync(this.getEndpoint(), accept, vectorStoreId, contentType, requestBody,
            requestOptions);
    }

    /**
     * Retrieves a vector store file.
     * 
     * @param vectorStoreId The ID of the vector store that the file belongs to.
     * @param fileId The ID of the file being retrieved.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a list of files attached to a vector store.
     */
    public Response<VectorStoreFileObject> getVectorStoreFileWithResponse(String vectorStoreId, String fileId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getVectorStoreFileSync(this.getEndpoint(), accept, vectorStoreId, fileId, requestOptions);
    }

    /**
     * Delete a vector store file. This will remove the file from the vector store but the file itself will not be
     * deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
     * 
     * @param vectorStoreId The ID of the vector store that the file belongs to.
     * @param fileId The ID of the file to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<DeleteVectorStoreFileResponse> deleteVectorStoreFileWithResponse(String vectorStoreId,
        String fileId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteVectorStoreFileSync(this.getEndpoint(), accept, vectorStoreId, fileId, requestOptions);
    }

    /**
     * Create a vector store file batch.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     chunking_strategy: BinaryData (Optional)
     * }
     * }
     * </pre>
     * 
     * @param vectorStoreId The ID of the vector store for which to create a file batch.
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a batch of files attached to a vector store.
     */
    public Response<VectorStoreFileBatchObject> createVectorStoreFileBatchWithResponse(String vectorStoreId,
        BinaryData requestBody, RequestOptions requestOptions) {
        final String accept = "application/json";
        final String contentType = "application/json";
        return service.createVectorStoreFileBatchSync(this.getEndpoint(), accept, vectorStoreId, contentType,
            requestBody, requestOptions);
    }

    /**
     * Retrieves a vector store file batch.
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to.
     * @param batchId The ID of the file batch being retrieved.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a batch of files attached to a vector store.
     */
    public Response<VectorStoreFileBatchObject> getVectorStoreFileBatchWithResponse(String vectorStoreId,
        String batchId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getVectorStoreFileBatchSync(this.getEndpoint(), accept, vectorStoreId, batchId, requestOptions);
    }

    /**
     * Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as
     * possible.
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to.
     * @param batchId The ID of the file batch to cancel.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a batch of files attached to a vector store.
     */
    public Response<VectorStoreFileBatchObject> cancelVectorStoreFileBatchWithResponse(String vectorStoreId,
        String batchId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.cancelVectorStoreFileBatchSync(this.getEndpoint(), accept, vectorStoreId, batchId,
            requestOptions);
    }

    /**
     * Returns a list of vector store files in a batch.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter by file status. One of `in_progress`, `completed`,
     * `failed`, `cancelled`. Allowed values: "in_progress", "completed", "failed", "cancelled".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to.
     * @param batchId The ID of the file batch that the files belong to.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<ListVectorStoreFilesResponse> listFilesInVectorStoreBatchWithResponse(String vectorStoreId,
        String batchId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listFilesInVectorStoreBatchSync(this.getEndpoint(), accept, vectorStoreId, batchId,
            requestOptions);
    }
}
