// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.implementation;

import com.openai.models.Upload;
import com.openai.models.UploadPart;
import io.clientcore.core.annotation.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotation.BodyParam;
import io.clientcore.core.http.annotation.HeaderParam;
import io.clientcore.core.http.annotation.HostParam;
import io.clientcore.core.http.annotation.HttpRequestInformation;
import io.clientcore.core.http.annotation.PathParam;
import io.clientcore.core.http.annotation.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exception.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.util.binarydata.BinaryData;

/**
 * Initializes a new instance of the Uploads type.
 */
public final class UploadsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final UploadsService service;

    /**
     * Service host.
     */
    private final String endpoint;

    /**
     * Gets Service host.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of Uploads client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Service host.
     */
    public UploadsImpl(HttpPipeline httpPipeline, String endpoint) {
        this.endpoint = "https://api.openai.com/v1";
        this.httpPipeline = httpPipeline;
        this.service = RestProxy.create(UploadsService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for Uploads to be used by the proxy service to perform REST calls.
     */
    @ServiceInterface(name = "Uploads", host = "{endpoint}")
    public interface UploadsService {
        @HttpRequestInformation(method = HttpMethod.POST, path = "/uploads", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionDetail
        Response<Upload> createUploadSync(@HostParam("endpoint") String endpoint, @HeaderParam("accept") String accept,
            @HeaderParam("Content-Type") String contentType, @BodyParam("application/json") BinaryData requestBody,
            RequestOptions requestOptions);

        // @Multipart not supported by RestProxy
        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/uploads/{upload_id}/parts",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionDetail
        Response<UploadPart> addUploadPartSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @HeaderParam("content-type") String contentType,
            @PathParam("upload_id") String uploadId, @BodyParam("multipart/form-data") BinaryData requestBody,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/uploads/{upload_id}/complete",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionDetail
        Response<Upload> completeUploadSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("upload_id") String uploadId,
            @HeaderParam("Content-Type") String contentType, @BodyParam("application/json") BinaryData requestBody,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/uploads/{upload_id}/cancel",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionDetail
        Response<Upload> cancelUploadSync(@HostParam("endpoint") String endpoint, @HeaderParam("accept") String accept,
            @PathParam("upload_id") String uploadId, RequestOptions requestOptions);
    }

    /**
     * Creates an intermediate [Upload](/docs/api-reference/uploads/object) object that you can add
     * [Parts](/docs/api-reference/uploads/part-object) to. Currently, an Upload can accept at most 8 GB in total and
     * expires after an hour after you create it.
     * 
     * Once you complete the Upload, we will create a [File](/docs/api-reference/files/object) object that contains all
     * the parts you uploaded. This File is usable in the rest of our platform as a regular File object.
     * 
     * For certain `purpose`s, the correct `mime_type` must be specified. Please refer to documentation for the
     * supported MIME types for your use case:
     * - [Assistants](/docs/assistants/tools/file-search/supported-files)
     * 
     * For guidance on the proper filename extensions for each purpose, please follow the documentation on [creating a
     * File](/docs/api-reference/files/create).
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     filename: String (Required)
     *     purpose: String(assistants/batch/fine-tune/vision) (Required)
     *     bytes: int (Required)
     *     mime_type: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the Upload object can accept byte chunks in the form of Parts.
     */
    public Response<Upload> createUploadWithResponse(BinaryData requestBody, RequestOptions requestOptions) {
        final String accept = "application/json";
        final String contentType = "application/json";
        return service.createUploadSync(this.getEndpoint(), accept, contentType, requestBody, requestOptions);
    }

    /**
     * Adds a [Part](/docs/api-reference/uploads/part-object) to an [Upload](/docs/api-reference/uploads/object) object.
     * A Part represents a chunk of bytes from the file you are trying to upload.
     * 
     * Each Part can be at most 64 MB, and you can add Parts until you hit the Upload maximum of 8 GB.
     * 
     * It is possible to add multiple Parts in parallel. You can decide the intended order of the Parts when you
     * [complete the Upload](/docs/api-reference/uploads/complete).
     * 
     * @param uploadId The uploadId parameter.
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the upload Part represents a chunk of bytes we can add to an Upload object.
     */
    public Response<UploadPart> addUploadPartWithResponse(String uploadId, BinaryData requestBody,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        final String contentType = "multipart/form-data";
        return service.addUploadPartSync(this.getEndpoint(), accept, contentType, uploadId, requestBody,
            requestOptions);
    }

    /**
     * Completes the [Upload](/docs/api-reference/uploads/object).
     * 
     * Within the returned Upload object, there is a nested [File](/docs/api-reference/files/object) object that is
     * ready to use in the rest of the platform.
     * 
     * You can specify the order of the Parts by passing in an ordered list of the Part IDs.
     * 
     * The number of bytes uploaded upon completion must match the number of bytes initially specified when creating the
     * Upload object. No Parts may be added after an Upload is completed.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     part_ids (Required): [
     *         String (Required)
     *     ]
     *     md5: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param uploadId The uploadId parameter.
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the Upload object can accept byte chunks in the form of Parts.
     */
    public Response<Upload> completeUploadWithResponse(String uploadId, BinaryData requestBody,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        final String contentType = "application/json";
        return service.completeUploadSync(this.getEndpoint(), accept, uploadId, contentType, requestBody,
            requestOptions);
    }

    /**
     * Cancels the Upload. No Parts may be added after an Upload is cancelled.
     * 
     * @param uploadId The uploadId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the Upload object can accept byte chunks in the form of Parts.
     */
    public Response<Upload> cancelUploadWithResponse(String uploadId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.cancelUploadSync(this.getEndpoint(), accept, uploadId, requestOptions);
    }
}
