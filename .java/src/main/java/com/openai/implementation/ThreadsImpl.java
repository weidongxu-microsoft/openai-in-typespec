// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.implementation;

import com.openai.models.DeleteThreadResponse;
import com.openai.models.ThreadObject;
import io.clientcore.core.annotation.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotation.BodyParam;
import io.clientcore.core.http.annotation.HeaderParam;
import io.clientcore.core.http.annotation.HostParam;
import io.clientcore.core.http.annotation.HttpRequestInformation;
import io.clientcore.core.http.annotation.PathParam;
import io.clientcore.core.http.annotation.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exception.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.util.binarydata.BinaryData;

/**
 * Initializes a new instance of the Threads type.
 */
public final class ThreadsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ThreadsService service;

    /**
     * Service host.
     */
    private final String endpoint;

    /**
     * Gets Service host.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of Threads client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Service host.
     */
    public ThreadsImpl(HttpPipeline httpPipeline, String endpoint) {
        this.endpoint = "https://api.openai.com/v1";
        this.httpPipeline = httpPipeline;
        this.service = RestProxy.create(ThreadsService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for Threads to be used by the proxy service to perform REST calls.
     */
    @ServiceInterface(name = "Threads", host = "{endpoint}")
    public interface ThreadsService {
        @HttpRequestInformation(method = HttpMethod.POST, path = "/threads", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionDetail
        Response<ThreadObject> createThreadSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData requestBody, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/threads/{thread_id}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionDetail
        Response<ThreadObject> getThreadSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("thread_id") String threadId,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/threads/{thread_id}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionDetail
        Response<ThreadObject> modifyThreadSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("thread_id") String threadId,
            @HeaderParam("Content-Type") String contentType, @BodyParam("application/json") BinaryData requestBody,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.DELETE,
            path = "/threads/{thread_id}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionDetail
        Response<DeleteThreadResponse> deleteThreadSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("thread_id") String threadId,
            RequestOptions requestOptions);
    }

    /**
     * Create a thread.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     messages (Optional): [
     *          (Optional){
     *             role: String(user/assistant) (Required)
     *             content (Required): [
     *                  (Required){
     *                 }
     *             ]
     *             attachments (Optional): [
     *                  (Optional){
     *                     file_id: String (Required)
     *                     tools (Required): [
     *                         BinaryData (Required)
     *                     ]
     *                 }
     *             ]
     *             metadata (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     *     tool_resources (Optional): {
     *         code_interpreter (Optional): {
     *             file_ids (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         file_search (Optional): {
     *             vector_store_ids (Optional): [
     *                 String (Optional)
     *             ]
     *             vector_stores (Optional): [
     *                  (Optional){
     *                     file_ids (Optional): [
     *                         String (Optional)
     *                     ]
     *                     chunking_strategy: BinaryData (Optional)
     *                     metadata (Optional): {
     *                         String: String (Required)
     *                     }
     *                 }
     *             ]
     *         }
     *     }
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represents a thread that contains [messages](/docs/api-reference/messages).
     */
    public Response<ThreadObject> createThreadWithResponse(BinaryData requestBody, RequestOptions requestOptions) {
        final String accept = "application/json";
        final String contentType = "application/json";
        return service.createThreadSync(this.getEndpoint(), accept, contentType, requestBody, requestOptions);
    }

    /**
     * Retrieves a thread.
     * 
     * @param threadId The ID of the thread to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represents a thread that contains [messages](/docs/api-reference/messages).
     */
    public Response<ThreadObject> getThreadWithResponse(String threadId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getThreadSync(this.getEndpoint(), accept, threadId, requestOptions);
    }

    /**
     * Modifies a thread.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     tool_resources (Optional): {
     *         code_interpreter (Optional): {
     *             file_ids (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         file_search (Optional): {
     *             vector_store_ids (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     }
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param threadId The ID of the thread to modify. Only the `metadata` can be modified.
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represents a thread that contains [messages](/docs/api-reference/messages).
     */
    public Response<ThreadObject> modifyThreadWithResponse(String threadId, BinaryData requestBody,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        final String contentType = "application/json";
        return service.modifyThreadSync(this.getEndpoint(), accept, threadId, contentType, requestBody, requestOptions);
    }

    /**
     * Delete a thread.
     * 
     * @param threadId The ID of the thread to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<DeleteThreadResponse> deleteThreadWithResponse(String threadId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteThreadSync(this.getEndpoint(), accept, threadId, requestOptions);
    }
}
