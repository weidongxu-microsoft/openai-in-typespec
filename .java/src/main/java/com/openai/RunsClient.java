// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai;

import com.openai.implementation.RunsImpl;
import com.openai.models.CreateRunRequest;
import com.openai.models.CreateThreadAndRunRequest;
import com.openai.models.ListRunStepsRequestOrder;
import com.openai.models.ListRunStepsResponse;
import com.openai.models.ListRunsRequestOrder;
import com.openai.models.ListRunsResponse;
import com.openai.models.ModifyRunRequest;
import com.openai.models.RunObject;
import com.openai.models.RunStepObject;
import com.openai.models.SubmitToolOutputsRunRequest;
import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.ServiceClient;
import io.clientcore.core.http.exception.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.util.binarydata.BinaryData;

/**
 * Initializes a new instance of the synchronous Runs type.
 */
@ServiceClient(builder = OpenAIClientBuilder.class)
public final class RunsClient {
    @Metadata(generated = true)
    private final RunsImpl serviceClient;

    /**
     * Initializes an instance of RunsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Metadata(generated = true)
    RunsClient(RunsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create a thread and run it in one request.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     assistant_id: String (Required)
     *     thread (Optional): {
     *         messages (Optional): [
     *              (Optional){
     *                 role: String(user/assistant) (Required)
     *                 content (Required): [
     *                      (Required){
     *                     }
     *                 ]
     *                 attachments (Optional): [
     *                      (Optional){
     *                         file_id: String (Required)
     *                         tools (Required): [
     *                             BinaryData (Required)
     *                         ]
     *                     }
     *                 ]
     *                 metadata (Optional): {
     *                     String: String (Required)
     *                 }
     *             }
     *         ]
     *         tool_resources (Optional): {
     *             code_interpreter (Optional): {
     *                 file_ids (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *             file_search (Optional): {
     *                 vector_store_ids (Optional): [
     *                     String (Optional)
     *                 ]
     *                 vector_stores (Optional): [
     *                      (Optional){
     *                         file_ids (Optional): [
     *                             String (Optional)
     *                         ]
     *                         chunking_strategy: BinaryData (Optional)
     *                         metadata (Optional): {
     *                             String: String (Required)
     *                         }
     *                     }
     *                 ]
     *             }
     *         }
     *         metadata (Optional): {
     *             String: String (Required)
     *         }
     *     }
     *     model: String(gpt-4o/gpt-4o-2024-08-06/gpt-4o-2024-05-13/gpt-4o-mini/gpt-4o-mini-2024-07-18/gpt-4-turbo/gpt-4-turbo-2024-04-09/gpt-4-0125-preview/gpt-4-turbo-preview/gpt-4-1106-preview/gpt-4-vision-preview/gpt-4/gpt-4-0314/gpt-4-0613/gpt-4-32k/gpt-4-32k-0314/gpt-4-32k-0613/gpt-3.5-turbo/gpt-3.5-turbo-16k/gpt-3.5-turbo-0613/gpt-3.5-turbo-1106/gpt-3.5-turbo-0125/gpt-3.5-turbo-16k-0613) (Optional)
     *     instructions: String (Optional)
     *     tools (Optional): [
     *          (Optional){
     *             type: String (Required)
     *         }
     *     ]
     *     tool_resources (Optional): {
     *         code_interpreter (Optional): {
     *             file_ids (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         file_search (Optional): {
     *             vector_store_ids (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     }
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     *     stream: Boolean (Optional)
     *     max_prompt_tokens: Integer (Optional)
     *     max_completion_tokens: Integer (Optional)
     *     truncation_strategy (Optional): {
     *         type: String(auto/last_messages) (Required)
     *         last_messages: Integer (Optional)
     *     }
     *     tool_choice: BinaryData (Optional)
     *     parallel_tool_calls: Boolean (Optional)
     *     response_format: BinaryData (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represents an execution run on a [thread](/docs/api-reference/threads).
     */
    @Metadata(generated = true)
    public Response<RunObject> createThreadAndRunWithResponse(BinaryData requestBody, RequestOptions requestOptions) {
        return this.serviceClient.createThreadAndRunWithResponse(requestBody, requestOptions);
    }

    /**
     * Create a run.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     assistant_id: String (Required)
     *     model: String(gpt-4o/gpt-4o-2024-08-06/gpt-4o-2024-05-13/gpt-4o-mini/gpt-4o-mini-2024-07-18/gpt-4-turbo/gpt-4-turbo-2024-04-09/gpt-4-0125-preview/gpt-4-turbo-preview/gpt-4-1106-preview/gpt-4-vision-preview/gpt-4/gpt-4-0314/gpt-4-0613/gpt-4-32k/gpt-4-32k-0314/gpt-4-32k-0613/gpt-3.5-turbo/gpt-3.5-turbo-16k/gpt-3.5-turbo-0613/gpt-3.5-turbo-1106/gpt-3.5-turbo-0125/gpt-3.5-turbo-16k-0613) (Optional)
     *     instructions: String (Optional)
     *     additional_instructions: String (Optional)
     *     additional_messages (Optional): [
     *          (Optional){
     *             role: String(user/assistant) (Required)
     *             content (Required): [
     *                  (Required){
     *                 }
     *             ]
     *             attachments (Optional): [
     *                  (Optional){
     *                     file_id: String (Required)
     *                     tools (Required): [
     *                         BinaryData (Required)
     *                     ]
     *                 }
     *             ]
     *             metadata (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     *     tools (Optional): [
     *          (Optional){
     *             type: String (Required)
     *         }
     *     ]
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     *     stream: Boolean (Optional)
     *     max_prompt_tokens: Integer (Optional)
     *     max_completion_tokens: Integer (Optional)
     *     truncation_strategy (Optional): {
     *         type: String(auto/last_messages) (Required)
     *         last_messages: Integer (Optional)
     *     }
     *     tool_choice: BinaryData (Optional)
     *     parallel_tool_calls: Boolean (Optional)
     *     response_format: BinaryData (Optional)
     * }
     * }
     * </pre>
     * 
     * @param threadId The ID of the thread to run.
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represents an execution run on a [thread](/docs/api-reference/threads).
     */
    @Metadata(generated = true)
    public Response<RunObject> createRunWithResponse(String threadId, BinaryData requestBody,
        RequestOptions requestOptions) {
        return this.serviceClient.createRunWithResponse(threadId, requestBody, requestOptions);
    }

    /**
     * Returns a list of runs belonging to a thread.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param threadId The ID of the thread the run belongs to.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<ListRunsResponse> listRunsWithResponse(String threadId, RequestOptions requestOptions) {
        return this.serviceClient.listRunsWithResponse(threadId, requestOptions);
    }

    /**
     * Retrieves a run.
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run.
     * @param runId The ID of the run to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represents an execution run on a [thread](/docs/api-reference/threads).
     */
    @Metadata(generated = true)
    public Response<RunObject> getRunWithResponse(String threadId, String runId, RequestOptions requestOptions) {
        return this.serviceClient.getRunWithResponse(threadId, runId, requestOptions);
    }

    /**
     * Modifies a run.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run.
     * @param runId The ID of the run to modify.
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represents an execution run on a [thread](/docs/api-reference/threads).
     */
    @Metadata(generated = true)
    public Response<RunObject> modifyRunWithResponse(String threadId, String runId, BinaryData requestBody,
        RequestOptions requestOptions) {
        return this.serviceClient.modifyRunWithResponse(threadId, runId, requestBody, requestOptions);
    }

    /**
     * Cancels a run that is `in_progress`.
     * 
     * @param threadId The ID of the thread to which this run belongs.
     * @param runId The ID of the run to cancel.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represents an execution run on a [thread](/docs/api-reference/threads).
     */
    @Metadata(generated = true)
    public Response<RunObject> cancelRunWithResponse(String threadId, String runId, RequestOptions requestOptions) {
        return this.serviceClient.cancelRunWithResponse(threadId, runId, requestOptions);
    }

    /**
     * When a run has the `status: "requires_action"` and `required_action.type` is
     * `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once
     * they're all completed. All outputs must be submitted in a single request.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     tool_outputs (Required): [
     *          (Required){
     *             tool_call_id: String (Optional)
     *             output: String (Optional)
     *         }
     *     ]
     *     stream: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
     * @param runId The ID of the run that requires the tool output submission.
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represents an execution run on a [thread](/docs/api-reference/threads).
     */
    @Metadata(generated = true)
    public Response<RunObject> submitToolOutputsToRunWithResponse(String threadId, String runId, BinaryData requestBody,
        RequestOptions requestOptions) {
        return this.serviceClient.submitToolOutputsToRunWithResponse(threadId, runId, requestBody, requestOptions);
    }

    /**
     * Returns a list of run steps belonging to a run.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param threadId The ID of the thread the run and run steps belong to.
     * @param runId The ID of the run the run steps belong to.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<ListRunStepsResponse> listRunStepsWithResponse(String threadId, String runId,
        RequestOptions requestOptions) {
        return this.serviceClient.listRunStepsWithResponse(threadId, runId, requestOptions);
    }

    /**
     * Retrieves a run step.
     * 
     * @param threadId The ID of the thread to which the run and run step belongs.
     * @param runId The ID of the run to which the run step belongs.
     * @param stepId The ID of the run step to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represents a step in execution of a run.
     */
    @Metadata(generated = true)
    public Response<RunStepObject> getRunStepWithResponse(String threadId, String runId, String stepId,
        RequestOptions requestOptions) {
        return this.serviceClient.getRunStepWithResponse(threadId, runId, stepId, requestOptions);
    }

    /**
     * Create a thread and run it in one request.
     * 
     * @param requestBody The requestBody parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an execution run on a [thread](/docs/api-reference/threads).
     */
    @Metadata(generated = true)
    public RunObject createThreadAndRun(CreateThreadAndRunRequest requestBody) {
        // Generated convenience method for createThreadAndRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createThreadAndRunWithResponse(BinaryData.fromObject(requestBody), requestOptions).getValue();
    }

    /**
     * Create a run.
     * 
     * @param threadId The ID of the thread to run.
     * @param requestBody The requestBody parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an execution run on a [thread](/docs/api-reference/threads).
     */
    @Metadata(generated = true)
    public RunObject createRun(String threadId, CreateRunRequest requestBody) {
        // Generated convenience method for createRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createRunWithResponse(threadId, BinaryData.fromObject(requestBody), requestOptions).getValue();
    }

    /**
     * Returns a list of runs belonging to a thread.
     * 
     * @param threadId The ID of the thread the run belongs to.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
     * default is 20.
     * @param order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
     * for descending order.
     * @param after A cursor for use in pagination. `after` is an object ID that defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.
     * @param before A cursor for use in pagination. `before` is an object ID that defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public ListRunsResponse listRuns(String threadId, Integer limit, ListRunsRequestOrder order, String after,
        String before) {
        // Generated convenience method for listRunsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit));
        }
        if (order != null) {
            requestOptions.addQueryParam("order", order.toString());
        }
        if (after != null) {
            requestOptions.addQueryParam("after", after);
        }
        if (before != null) {
            requestOptions.addQueryParam("before", before);
        }
        return listRunsWithResponse(threadId, requestOptions).getValue();
    }

    /**
     * Returns a list of runs belonging to a thread.
     * 
     * @param threadId The ID of the thread the run belongs to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public ListRunsResponse listRuns(String threadId) {
        // Generated convenience method for listRunsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listRunsWithResponse(threadId, requestOptions).getValue();
    }

    /**
     * Retrieves a run.
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run.
     * @param runId The ID of the run to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an execution run on a [thread](/docs/api-reference/threads).
     */
    @Metadata(generated = true)
    public RunObject getRun(String threadId, String runId) {
        // Generated convenience method for getRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getRunWithResponse(threadId, runId, requestOptions).getValue();
    }

    /**
     * Modifies a run.
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run.
     * @param runId The ID of the run to modify.
     * @param requestBody The requestBody parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an execution run on a [thread](/docs/api-reference/threads).
     */
    @Metadata(generated = true)
    public RunObject modifyRun(String threadId, String runId, ModifyRunRequest requestBody) {
        // Generated convenience method for modifyRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return modifyRunWithResponse(threadId, runId, BinaryData.fromObject(requestBody), requestOptions).getValue();
    }

    /**
     * Cancels a run that is `in_progress`.
     * 
     * @param threadId The ID of the thread to which this run belongs.
     * @param runId The ID of the run to cancel.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an execution run on a [thread](/docs/api-reference/threads).
     */
    @Metadata(generated = true)
    public RunObject cancelRun(String threadId, String runId) {
        // Generated convenience method for cancelRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cancelRunWithResponse(threadId, runId, requestOptions).getValue();
    }

    /**
     * When a run has the `status: "requires_action"` and `required_action.type` is
     * `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once
     * they're all completed. All outputs must be submitted in a single request.
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
     * @param runId The ID of the run that requires the tool output submission.
     * @param requestBody The requestBody parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an execution run on a [thread](/docs/api-reference/threads).
     */
    @Metadata(generated = true)
    public RunObject submitToolOutputsToRun(String threadId, String runId, SubmitToolOutputsRunRequest requestBody) {
        // Generated convenience method for submitToolOutputsToRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return submitToolOutputsToRunWithResponse(threadId, runId, BinaryData.fromObject(requestBody), requestOptions)
            .getValue();
    }

    /**
     * Returns a list of run steps belonging to a run.
     * 
     * @param threadId The ID of the thread the run and run steps belong to.
     * @param runId The ID of the run the run steps belong to.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
     * default is 20.
     * @param order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
     * for descending order.
     * @param after A cursor for use in pagination. `after` is an object ID that defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.
     * @param before A cursor for use in pagination. `before` is an object ID that defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public ListRunStepsResponse listRunSteps(String threadId, String runId, Integer limit,
        ListRunStepsRequestOrder order, String after, String before) {
        // Generated convenience method for listRunStepsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit));
        }
        if (order != null) {
            requestOptions.addQueryParam("order", order.toString());
        }
        if (after != null) {
            requestOptions.addQueryParam("after", after);
        }
        if (before != null) {
            requestOptions.addQueryParam("before", before);
        }
        return listRunStepsWithResponse(threadId, runId, requestOptions).getValue();
    }

    /**
     * Returns a list of run steps belonging to a run.
     * 
     * @param threadId The ID of the thread the run and run steps belong to.
     * @param runId The ID of the run the run steps belong to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public ListRunStepsResponse listRunSteps(String threadId, String runId) {
        // Generated convenience method for listRunStepsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listRunStepsWithResponse(threadId, runId, requestOptions).getValue();
    }

    /**
     * Retrieves a run step.
     * 
     * @param threadId The ID of the thread to which the run and run step belongs.
     * @param runId The ID of the run to which the run step belongs.
     * @param stepId The ID of the run step to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a step in execution of a run.
     */
    @Metadata(generated = true)
    public RunStepObject getRunStep(String threadId, String runId, String stepId) {
        // Generated convenience method for getRunStepWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getRunStepWithResponse(threadId, runId, stepId, requestOptions).getValue();
    }
}
