// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai;

import com.generic.core.annotation.Metadata;
import com.generic.core.annotation.ServiceClientBuilder;
import com.generic.core.credential.KeyCredential;
import com.generic.core.http.client.HttpClient;
import com.generic.core.http.models.HttpLogOptions;
import com.generic.core.http.models.HttpRetryOptions;
import com.generic.core.http.pipeline.HttpPipeline;
import com.generic.core.http.pipeline.HttpPipelineBuilder;
import com.generic.core.http.pipeline.HttpPipelinePolicy;
import com.generic.core.http.policy.KeyCredentialPolicy;
import com.generic.core.models.traits.ConfigurationTrait;
import com.generic.core.models.traits.HttpTrait;
import com.generic.core.models.traits.KeyCredentialTrait;
import com.generic.core.util.ClientLogger;
import com.generic.core.util.configuration.Configuration;
import com.openai.implementation.OpenAIClientImpl;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * A builder for creating a new instance of the OpenAIClient type.
 */
@ServiceClientBuilder(
    serviceClients = {
        AudioClient.class,
        AssistantsClient.class,
        ChatClient.class,
        CompletionsClient.class,
        EmbeddingsClient.class,
        FilesClient.class,
        FineTuningClient.class,
        ImagesClient.class,
        MessagesClient.class,
        ModelsClient.class,
        ModerationsClient.class,
        RunsClient.class,
        ThreadsClient.class })
public final class OpenAIClientBuilder implements HttpTrait<OpenAIClientBuilder>,
    ConfigurationTrait<OpenAIClientBuilder>, KeyCredentialTrait<OpenAIClientBuilder> {
    @Metadata(generated = true)
    private static final String SDK_NAME = "name";

    @Metadata(generated = true)
    private static final String SDK_VERSION = "version";

    @Metadata(generated = true)
    private final List<HttpPipelinePolicy> pipelinePolicies;

    /**
     * Create an instance of the OpenAIClientBuilder.
     */
    @Metadata(generated = true)
    public OpenAIClientBuilder() {
        this.pipelinePolicies = new ArrayList<>();
    }

    /*
     * The HTTP pipeline to send requests through.
     */
    @Metadata(generated = true)
    private HttpPipeline pipeline;

    /**
     * {@inheritDoc}.
     */
    @Metadata(generated = true)
    public OpenAIClientBuilder pipeline(HttpPipeline pipeline) {
        if (this.pipeline != null && pipeline == null) {
            LOGGER.atInfo().log(() -> "HttpPipeline is being set to 'null' when it was previously configured.");
        }
        this.pipeline = pipeline;
        return this;
    }

    /*
     * The HTTP client used to send the request.
     */
    @Metadata(generated = true)
    private HttpClient httpClient;

    /**
     * {@inheritDoc}.
     */
    @Metadata(generated = true)
    public OpenAIClientBuilder httpClient(HttpClient httpClient) {
        this.httpClient = httpClient;
        return this;
    }

    /*
     * The logging configuration for HTTP requests and responses.
     */
    @Metadata(generated = true)
    private HttpLogOptions httpLogOptions;

    /**
     * {@inheritDoc}.
     */
    @Metadata(generated = true)
    public OpenAIClientBuilder httpLogOptions(HttpLogOptions httpLogOptions) {
        this.httpLogOptions = httpLogOptions;
        return this;
    }

    /*
     * The retry options to configure retry policy for failed requests.
     */
    @Metadata(generated = true)
    private HttpRetryOptions retryOptions;

    /**
     * {@inheritDoc}.
     */
    @Metadata(generated = true)
    public OpenAIClientBuilder retryOptions(HttpRetryOptions retryOptions) {
        this.retryOptions = retryOptions;
        return this;
    }

    /**
     * {@inheritDoc}.
     */
    @Metadata(generated = true)
    public OpenAIClientBuilder addPolicy(HttpPipelinePolicy customPolicy) {
        Objects.requireNonNull(customPolicy, "'customPolicy' cannot be null.");
        pipelinePolicies.add(customPolicy);
        return this;
    }

    /*
     * The configuration store that is used during construction of the service client.
     */
    @Metadata(generated = true)
    private Configuration configuration;

    /**
     * {@inheritDoc}.
     */
    @Metadata(generated = true)
    public OpenAIClientBuilder configuration(Configuration configuration) {
        this.configuration = configuration;
        return this;
    }

    /*
     * The KeyCredential used for authentication.
     */
    @Metadata(generated = true)
    private KeyCredential keyCredential;

    /**
     * {@inheritDoc}.
     */
    @Metadata(generated = true)
    public OpenAIClientBuilder credential(KeyCredential keyCredential) {
        this.keyCredential = keyCredential;
        return this;
    }

    /**
     * Builds an instance of OpenAIClientImpl with the provided parameters.
     * 
     * @return an instance of OpenAIClientImpl.
     */
    @Metadata(generated = true)
    private OpenAIClientImpl buildInnerClient() {
        HttpPipeline localPipeline = (pipeline != null) ? pipeline : createHttpPipeline();
        OpenAIClientImpl client = new OpenAIClientImpl(localPipeline);
        return client;
    }

    @Metadata(generated = true)
    private HttpPipeline createHttpPipeline() {
        HttpPipelineBuilder httpPipelineBuilder = new HttpPipelineBuilder();
        List<HttpPipelinePolicy> policies = new ArrayList<>();
        if (keyCredential != null) {
            policies.add(new KeyCredentialPolicy("authorization", keyCredential, "Bearer"));
        }
        httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
        return httpPipelineBuilder.build();
    }

    /**
     * Builds an instance of AudioClient class.
     * 
     * @return an instance of AudioClient.
     */
    @Metadata(generated = true)
    public AudioClient buildAudioClient() {
        return new AudioClient(buildInnerClient().getAudios());
    }

    /**
     * Builds an instance of AssistantsClient class.
     * 
     * @return an instance of AssistantsClient.
     */
    @Metadata(generated = true)
    public AssistantsClient buildAssistantsClient() {
        return new AssistantsClient(buildInnerClient().getAssistants());
    }

    /**
     * Builds an instance of ChatClient class.
     * 
     * @return an instance of ChatClient.
     */
    @Metadata(generated = true)
    public ChatClient buildChatClient() {
        return new ChatClient(buildInnerClient().getChats());
    }

    /**
     * Builds an instance of CompletionsClient class.
     * 
     * @return an instance of CompletionsClient.
     */
    @Metadata(generated = true)
    public CompletionsClient buildCompletionsClient() {
        return new CompletionsClient(buildInnerClient().getCompletions());
    }

    /**
     * Builds an instance of EmbeddingsClient class.
     * 
     * @return an instance of EmbeddingsClient.
     */
    @Metadata(generated = true)
    public EmbeddingsClient buildEmbeddingsClient() {
        return new EmbeddingsClient(buildInnerClient().getEmbeddings());
    }

    /**
     * Builds an instance of FilesClient class.
     * 
     * @return an instance of FilesClient.
     */
    @Metadata(generated = true)
    public FilesClient buildFilesClient() {
        return new FilesClient(buildInnerClient().getFiles());
    }

    /**
     * Builds an instance of FineTuningClient class.
     * 
     * @return an instance of FineTuningClient.
     */
    @Metadata(generated = true)
    public FineTuningClient buildFineTuningClient() {
        return new FineTuningClient(buildInnerClient().getFineTunings());
    }

    /**
     * Builds an instance of ImagesClient class.
     * 
     * @return an instance of ImagesClient.
     */
    @Metadata(generated = true)
    public ImagesClient buildImagesClient() {
        return new ImagesClient(buildInnerClient().getImages());
    }

    /**
     * Builds an instance of MessagesClient class.
     * 
     * @return an instance of MessagesClient.
     */
    @Metadata(generated = true)
    public MessagesClient buildMessagesClient() {
        return new MessagesClient(buildInnerClient().getMessages());
    }

    /**
     * Builds an instance of ModelsClient class.
     * 
     * @return an instance of ModelsClient.
     */
    @Metadata(generated = true)
    public ModelsClient buildModelsClient() {
        return new ModelsClient(buildInnerClient().getModels());
    }

    /**
     * Builds an instance of ModerationsClient class.
     * 
     * @return an instance of ModerationsClient.
     */
    @Metadata(generated = true)
    public ModerationsClient buildModerationsClient() {
        return new ModerationsClient(buildInnerClient().getModerations());
    }

    /**
     * Builds an instance of RunsClient class.
     * 
     * @return an instance of RunsClient.
     */
    @Metadata(generated = true)
    public RunsClient buildRunsClient() {
        return new RunsClient(buildInnerClient().getRuns());
    }

    /**
     * Builds an instance of ThreadsClient class.
     * 
     * @return an instance of ThreadsClient.
     */
    @Metadata(generated = true)
    public ThreadsClient buildThreadsClient() {
        return new ThreadsClient(buildInnerClient().getThreads());
    }

    private static final ClientLogger LOGGER = new ClientLogger(OpenAIClientBuilder.class);
}
