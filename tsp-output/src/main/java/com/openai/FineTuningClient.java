// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai;

import com.generic.core.annotation.Metadata;
import com.generic.core.annotation.ServiceClient;
import com.generic.core.http.Response;
import com.generic.core.http.exception.HttpResponseException;
import com.generic.core.http.models.RequestOptions;
import com.generic.core.models.BinaryData;
import com.openai.implementation.FineTuningsImpl;
import com.openai.models.CreateFineTuningJobRequest;
import com.openai.models.FineTuningJob;
import com.openai.models.ListFineTuningJobEventsResponse;
import com.openai.models.ListPaginatedFineTuningJobsResponse;

/**
 * Initializes a new instance of the synchronous OpenAIClient type.
 */
@ServiceClient(builder = OpenAIClientBuilder.class)
public final class FineTuningClient {
    @Metadata(generated = true)
    private final FineTuningsImpl serviceClient;

    /**
     * Initializes an instance of FineTuningClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Metadata(generated = true)
    FineTuningClient(FineTuningsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates a fine-tuning job which begins the process of creating a new model from a given dataset.
     * 
     * Response includes details of the enqueued job including job status and the name of the fine-tuned models once
     * complete.
     * 
     * [Learn more about fine-tuning](/docs/guides/fine-tuning).
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     model: String(babbage-002/davinci-002/gpt-3.5-turbo) (Required)
     *     training_file: String (Required)
     *     hyperparameters (Optional): {
     *         batch_size: BinaryData (Optional)
     *         learning_rate_multiplier: BinaryData (Optional)
     *         n_epochs: BinaryData (Optional)
     *     }
     *     suffix: String (Optional)
     *     validation_file: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     created_at: long (Required)
     *     error (Required): {
     *         code: String (Required)
     *         message: String (Required)
     *         param: String (Required)
     *     }
     *     fine_tuned_model: String (Required)
     *     finished_at: Long (Required)
     *     hyperparameters (Required): {
     *         n_epochs: BinaryData (Required)
     *     }
     *     model: String (Required)
     *     object: String (Required)
     *     organization_id: String (Required)
     *     result_files (Required): [
     *         String (Required)
     *     ]
     *     status: String(validating_files/queued/running/succeeded/failed/cancelled) (Required)
     *     trained_tokens: Long (Required)
     *     training_file: String (Required)
     *     validation_file: String (Required)
     * }
     * }</pre>
     * 
     * @param job The job parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<BinaryData> createFineTuningJobWithResponse(BinaryData job, RequestOptions requestOptions) {
        return this.serviceClient.createFineTuningJobWithResponse(job, requestOptions);
    }

    /**
     * List your organization's fine-tuning jobs.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>Identifier for the last job from the previous pagination
     * request.</td></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>Number of fine-tuning jobs to retrieve.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             created_at: long (Required)
     *             error (Required): {
     *                 code: String (Required)
     *                 message: String (Required)
     *                 param: String (Required)
     *             }
     *             fine_tuned_model: String (Required)
     *             finished_at: Long (Required)
     *             hyperparameters (Required): {
     *                 n_epochs: BinaryData (Required)
     *             }
     *             model: String (Required)
     *             object: String (Required)
     *             organization_id: String (Required)
     *             result_files (Required): [
     *                 String (Required)
     *             ]
     *             status: String(validating_files/queued/running/succeeded/failed/cancelled) (Required)
     *             trained_tokens: Long (Required)
     *             training_file: String (Required)
     *             validation_file: String (Required)
     *         }
     *     ]
     *     has_more: boolean (Required)
     *     object: String (Required)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<BinaryData> listPaginatedFineTuningJobsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listPaginatedFineTuningJobsWithResponse(requestOptions);
    }

    /**
     * Get info about a fine-tuning job.
     * 
     * [Learn more about fine-tuning](/docs/guides/fine-tuning).
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     created_at: long (Required)
     *     error (Required): {
     *         code: String (Required)
     *         message: String (Required)
     *         param: String (Required)
     *     }
     *     fine_tuned_model: String (Required)
     *     finished_at: Long (Required)
     *     hyperparameters (Required): {
     *         n_epochs: BinaryData (Required)
     *     }
     *     model: String (Required)
     *     object: String (Required)
     *     organization_id: String (Required)
     *     result_files (Required): [
     *         String (Required)
     *     ]
     *     status: String(validating_files/queued/running/succeeded/failed/cancelled) (Required)
     *     trained_tokens: Long (Required)
     *     training_file: String (Required)
     *     validation_file: String (Required)
     * }
     * }</pre>
     * 
     * @param fineTuningJobId The ID of the fine-tuning job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<BinaryData> retrieveFineTuningJobWithResponse(String fineTuningJobId,
        RequestOptions requestOptions) {
        return this.serviceClient.retrieveFineTuningJobWithResponse(fineTuningJobId, requestOptions);
    }

    /**
     * Immediately cancel a fine-tune job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     created_at: long (Required)
     *     error (Required): {
     *         code: String (Required)
     *         message: String (Required)
     *         param: String (Required)
     *     }
     *     fine_tuned_model: String (Required)
     *     finished_at: Long (Required)
     *     hyperparameters (Required): {
     *         n_epochs: BinaryData (Required)
     *     }
     *     model: String (Required)
     *     object: String (Required)
     *     organization_id: String (Required)
     *     result_files (Required): [
     *         String (Required)
     *     ]
     *     status: String(validating_files/queued/running/succeeded/failed/cancelled) (Required)
     *     trained_tokens: Long (Required)
     *     training_file: String (Required)
     *     validation_file: String (Required)
     * }
     * }</pre>
     * 
     * @param fineTuningJobId The ID of the fine-tuning job to cancel.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<BinaryData> cancelFineTuningJobWithResponse(String fineTuningJobId, RequestOptions requestOptions) {
        return this.serviceClient.cancelFineTuningJobWithResponse(fineTuningJobId, requestOptions);
    }

    /**
     * Get status updates for a fine-tuning job.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>Identifier for the last event from the previous pagination
     * request.</td></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>Number of events to retrieve.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             created_at: long (Required)
     *             level: String(info/warn/error) (Required)
     *             message: String (Required)
     *             object: String (Required)
     *         }
     *     ]
     *     object: String (Required)
     * }
     * }</pre>
     * 
     * @param fineTuningJobId The ID of the fine-tuning job to get events for.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<BinaryData> listFineTuningEventsWithResponse(String fineTuningJobId,
        RequestOptions requestOptions) {
        return this.serviceClient.listFineTuningEventsWithResponse(fineTuningJobId, requestOptions);
    }

    /**
     * Creates a fine-tuning job which begins the process of creating a new model from a given dataset.
     * 
     * Response includes details of the enqueued job including job status and the name of the fine-tuned models once
     * complete.
     * 
     * [Learn more about fine-tuning](/docs/guides/fine-tuning).
     * 
     * @param job The job parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public FineTuningJob createFineTuningJob(CreateFineTuningJobRequest job) {
        // Generated convenience method for createFineTuningJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createFineTuningJobWithResponse(BinaryData.fromObject(job), requestOptions).getValue()
            .toObject(FineTuningJob.class);
    }

    /**
     * List your organization's fine-tuning jobs.
     * 
     * @param after Identifier for the last job from the previous pagination request.
     * @param limit Number of fine-tuning jobs to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public ListPaginatedFineTuningJobsResponse listPaginatedFineTuningJobs(String after, Integer limit) {
        // Generated convenience method for listPaginatedFineTuningJobsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (after != null) {
            requestOptions.addQueryParam("after", after);
        }
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit));
        }
        return listPaginatedFineTuningJobsWithResponse(requestOptions).getValue()
            .toObject(ListPaginatedFineTuningJobsResponse.class);
    }

    /**
     * List your organization's fine-tuning jobs.
     * 
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public ListPaginatedFineTuningJobsResponse listPaginatedFineTuningJobs() {
        // Generated convenience method for listPaginatedFineTuningJobsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listPaginatedFineTuningJobsWithResponse(requestOptions).getValue()
            .toObject(ListPaginatedFineTuningJobsResponse.class);
    }

    /**
     * Get info about a fine-tuning job.
     * 
     * [Learn more about fine-tuning](/docs/guides/fine-tuning).
     * 
     * @param fineTuningJobId The ID of the fine-tuning job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public FineTuningJob retrieveFineTuningJob(String fineTuningJobId) {
        // Generated convenience method for retrieveFineTuningJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return retrieveFineTuningJobWithResponse(fineTuningJobId, requestOptions).getValue()
            .toObject(FineTuningJob.class);
    }

    /**
     * Immediately cancel a fine-tune job.
     * 
     * @param fineTuningJobId The ID of the fine-tuning job to cancel.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public FineTuningJob cancelFineTuningJob(String fineTuningJobId) {
        // Generated convenience method for cancelFineTuningJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cancelFineTuningJobWithResponse(fineTuningJobId, requestOptions).getValue()
            .toObject(FineTuningJob.class);
    }

    /**
     * Get status updates for a fine-tuning job.
     * 
     * @param fineTuningJobId The ID of the fine-tuning job to get events for.
     * @param after Identifier for the last event from the previous pagination request.
     * @param limit Number of events to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public ListFineTuningJobEventsResponse listFineTuningEvents(String fineTuningJobId, String after, Integer limit) {
        // Generated convenience method for listFineTuningEventsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (after != null) {
            requestOptions.addQueryParam("after", after);
        }
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit));
        }
        return listFineTuningEventsWithResponse(fineTuningJobId, requestOptions).getValue()
            .toObject(ListFineTuningJobEventsResponse.class);
    }

    /**
     * Get status updates for a fine-tuning job.
     * 
     * @param fineTuningJobId The ID of the fine-tuning job to get events for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public ListFineTuningJobEventsResponse listFineTuningEvents(String fineTuningJobId) {
        // Generated convenience method for listFineTuningEventsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listFineTuningEventsWithResponse(fineTuningJobId, requestOptions).getValue()
            .toObject(ListFineTuningJobEventsResponse.class);
    }
}
