// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai;

import com.generic.core.annotation.Metadata;
import com.generic.core.annotation.ServiceClient;
import com.generic.core.http.Response;
import com.generic.core.http.exception.HttpResponseException;
import com.generic.core.http.models.RequestOptions;
import com.generic.core.models.BinaryData;
import com.openai.implementation.ModerationsImpl;
import com.openai.models.CreateModerationRequest;
import com.openai.models.CreateModerationResponse;

/**
 * Initializes a new instance of the synchronous OpenAIClient type.
 */
@ServiceClient(builder = OpenAIClientBuilder.class)
public final class ModerationsClient {
    @Metadata(generated = true)
    private final ModerationsImpl serviceClient;

    /**
     * Initializes an instance of ModerationsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Metadata(generated = true)
    ModerationsClient(ModerationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Classifies if text is potentially harmful.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     input: BinaryData (Required)
     *     model: String(text-moderation-latest/text-moderation-stable) (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     model: String (Required)
     *     results (Required): [
     *          (Required){
     *             flagged: boolean (Required)
     *             categories (Required): {
     *                 hate: boolean (Required)
     *                 hate/threatening: boolean (Required)
     *                 harassment: boolean (Required)
     *                 harassment/threatening: boolean (Required)
     *                 self-harm: boolean (Required)
     *                 self-harm/intent: boolean (Required)
     *                 self-harm/instructions: boolean (Required)
     *                 sexual: boolean (Required)
     *                 sexual/minors: boolean (Required)
     *                 violence: boolean (Required)
     *                 violence/graphic: boolean (Required)
     *             }
     *             category_scores (Required): {
     *                 hate: double (Required)
     *                 hate/threatening: double (Required)
     *                 harassment: double (Required)
     *                 harassment/threatening: double (Required)
     *                 self-harm: double (Required)
     *                 self-harm/intent: double (Required)
     *                 self-harm/instructions: double (Required)
     *                 sexual: double (Required)
     *                 sexual/minors: double (Required)
     *                 violence: double (Required)
     *                 violence/graphic: double (Required)
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param content The content parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represents if a given text input is potentially harmful.
     */
    @Metadata(generated = true)
    public Response<BinaryData> createModerationWithResponse(BinaryData content, RequestOptions requestOptions) {
        return this.serviceClient.createModerationWithResponse(content, requestOptions);
    }

    /**
     * Classifies if text is potentially harmful.
     * 
     * @param content The content parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents if a given text input is potentially harmful.
     */
    @Metadata(generated = true)
    public CreateModerationResponse createModeration(CreateModerationRequest content) {
        // Generated convenience method for createModerationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createModerationWithResponse(BinaryData.fromObject(content), requestOptions).getValue()
            .toObject(CreateModerationResponse.class);
    }
}
