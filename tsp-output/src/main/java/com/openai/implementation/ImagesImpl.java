// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.implementation;

import com.generic.core.annotation.ServiceInterface;
import com.generic.core.http.Response;
import com.generic.core.http.RestProxy;
import com.generic.core.http.annotation.BodyParam;
import com.generic.core.http.annotation.HeaderParam;
import com.generic.core.http.annotation.HttpRequestInformation;
import com.generic.core.http.annotation.UnexpectedResponseExceptionInformation;
import com.generic.core.http.exception.HttpResponseException;
import com.generic.core.http.models.HttpMethod;
import com.generic.core.http.models.RequestOptions;
import com.generic.core.models.BinaryData;
import com.generic.core.models.Context;

/**
 * An instance of this class provides access to all the operations defined in Images.
 */
public final class ImagesImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ImagesService service;

    /**
     * The service client containing this operation class.
     */
    private final OpenAIClientImpl client;

    /**
     * Initializes an instance of ImagesImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ImagesImpl(OpenAIClientImpl client) {
        this.service = RestProxy.create(ImagesService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for OpenAIClientImages to be used by the proxy service to perform REST
     * calls.
     */
    @ServiceInterface(name = "OpenAIClientImages", host = "https://api.openai.com/v1")
    public interface ImagesService {
        @HttpRequestInformation(method = HttpMethod.POST, path = "/images/generations", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionInformation
        Response<BinaryData> createImageSync(@HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData image, RequestOptions requestOptions, Context context);

        // @Multipart not supported by RestProxy
        @HttpRequestInformation(method = HttpMethod.POST, path = "/images/edits", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionInformation
        Response<BinaryData> createImageEditSync(@HeaderParam("content-type") String contentType,
            @HeaderParam("accept") String accept, @BodyParam("multipart/form-data") BinaryData image,
            RequestOptions requestOptions, Context context);

        // @Multipart not supported by RestProxy
        @HttpRequestInformation(method = HttpMethod.POST, path = "/images/variations", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionInformation
        Response<BinaryData> createImageVariationSync(@HeaderParam("content-type") String contentType,
            @HeaderParam("accept") String accept, @BodyParam("multipart/form-data") BinaryData image,
            RequestOptions requestOptions, Context context);
    }

    /**
     * Creates an image given a prompt.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     prompt: String (Required)
     *     model: String(dall-e-2/dall-e-3) (Optional)
     *     n: Long (Optional)
     *     quality: String(standard/hd) (Optional)
     *     response_format: String(url/b64_json) (Optional)
     *     size: String(256x256/512x512/1024x1024/1792x1024/1024x1792) (Optional)
     *     style: String(vivid/natural) (Optional)
     *     user: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     created: long (Required)
     *     data (Required): [
     *          (Required){
     *             b64_json: byte[] (Optional)
     *             url: String (Optional)
     *             revised_prompt: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param image The image parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<BinaryData> createImageWithResponse(BinaryData image, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createImageSync(accept, image, requestOptions, Context.NONE);
    }

    /**
     * Creates an edited or extended image given an original image and a prompt.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     created: long (Required)
     *     data (Required): [
     *          (Required){
     *             b64_json: byte[] (Optional)
     *             url: String (Optional)
     *             revised_prompt: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param image The image parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<BinaryData> createImageEditWithResponse(BinaryData image, RequestOptions requestOptions) {
        final String contentType = "multipart/form-data";
        final String accept = "application/json";
        return service.createImageEditSync(contentType, accept, image, requestOptions, Context.NONE);
    }

    /**
     * Creates an edited or extended image given an original image and a prompt.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     created: long (Required)
     *     data (Required): [
     *          (Required){
     *             b64_json: byte[] (Optional)
     *             url: String (Optional)
     *             revised_prompt: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param image The image parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<BinaryData> createImageVariationWithResponse(BinaryData image, RequestOptions requestOptions) {
        final String contentType = "multipart/form-data";
        final String accept = "application/json";
        return service.createImageVariationSync(contentType, accept, image, requestOptions, Context.NONE);
    }
}
