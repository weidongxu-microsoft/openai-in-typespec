// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.implementation;

import com.generic.core.annotation.ServiceInterface;
import com.generic.core.http.Response;
import com.generic.core.http.RestProxy;
import com.generic.core.http.annotation.BodyParam;
import com.generic.core.http.annotation.HeaderParam;
import com.generic.core.http.annotation.HttpRequestInformation;
import com.generic.core.http.annotation.PathParam;
import com.generic.core.http.annotation.UnexpectedResponseExceptionInformation;
import com.generic.core.http.exception.HttpResponseException;
import com.generic.core.http.models.HttpMethod;
import com.generic.core.http.models.RequestOptions;
import com.generic.core.models.BinaryData;
import com.generic.core.models.Context;

/**
 * An instance of this class provides access to all the operations defined in Threads.
 */
public final class ThreadsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ThreadsService service;

    /**
     * The service client containing this operation class.
     */
    private final OpenAIClientImpl client;

    /**
     * Initializes an instance of ThreadsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ThreadsImpl(OpenAIClientImpl client) {
        this.service = RestProxy.create(ThreadsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for OpenAIClientThreads to be used by the proxy service to perform REST
     * calls.
     */
    @ServiceInterface(name = "OpenAIClientThreads", host = "https://api.openai.com/v1")
    public interface ThreadsService {
        @HttpRequestInformation(method = HttpMethod.POST, path = "/threads", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionInformation
        Response<BinaryData> createThreadSync(@HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData thread, RequestOptions requestOptions, Context context);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/threads/{thread_id}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionInformation
        Response<BinaryData> getThreadSync(@PathParam("thread_id") String threadId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/threads/{thread_id}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionInformation
        Response<BinaryData> modifyThreadSync(@PathParam("thread_id") String threadId,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData thread,
            RequestOptions requestOptions, Context context);

        @HttpRequestInformation(
            method = HttpMethod.DELETE,
            path = "/threads/{thread_id}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionInformation
        Response<BinaryData> deleteThreadSync(@PathParam("thread_id") String threadId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * Create a thread.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     messages (Optional): [
     *          (Optional){
     *             role: String (Required)
     *             content: String (Required)
     *             file_ids (Optional): [
     *                 String (Optional)
     *             ]
     *             metadata (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param thread The thread parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represents a thread that contains [messages](/docs/api-reference/messages).
     */
    public Response<BinaryData> createThreadWithResponse(BinaryData thread, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createThreadSync(accept, thread, requestOptions, Context.NONE);
    }

    /**
     * Retrieves a thread.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represents a thread that contains [messages](/docs/api-reference/messages).
     */
    public Response<BinaryData> getThreadWithResponse(String threadId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getThreadSync(threadId, accept, requestOptions, Context.NONE);
    }

    /**
     * Modifies a thread.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread to modify. Only the `metadata` can be modified.
     * @param thread The thread parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represents a thread that contains [messages](/docs/api-reference/messages).
     */
    public Response<BinaryData> modifyThreadWithResponse(String threadId, BinaryData thread,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.modifyThreadSync(threadId, accept, thread, requestOptions, Context.NONE);
    }

    /**
     * Delete a thread.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     deleted: boolean (Required)
     *     object: String (Required)
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<BinaryData> deleteThreadWithResponse(String threadId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteThreadSync(threadId, accept, requestOptions, Context.NONE);
    }
}
