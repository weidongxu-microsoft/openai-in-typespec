// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.implementation;

import com.generic.core.annotation.ServiceInterface;
import com.generic.core.http.Response;
import com.generic.core.http.RestProxy;
import com.generic.core.http.annotation.BodyParam;
import com.generic.core.http.annotation.HeaderParam;
import com.generic.core.http.annotation.HttpRequestInformation;
import com.generic.core.http.annotation.PathParam;
import com.generic.core.http.annotation.UnexpectedResponseExceptionInformation;
import com.generic.core.http.exception.HttpResponseException;
import com.generic.core.http.models.HttpMethod;
import com.generic.core.http.models.RequestOptions;
import com.generic.core.models.BinaryData;
import com.generic.core.models.Context;

/**
 * An instance of this class provides access to all the operations defined in Runs.
 */
public final class RunsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final RunsService service;

    /**
     * The service client containing this operation class.
     */
    private final OpenAIClientImpl client;

    /**
     * Initializes an instance of RunsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    RunsImpl(OpenAIClientImpl client) {
        this.service = RestProxy.create(RunsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for OpenAIClientRuns to be used by the proxy service to perform REST
     * calls.
     */
    @ServiceInterface(name = "OpenAIClientRuns", host = "https://api.openai.com/v1")
    public interface RunsService {
        @HttpRequestInformation(method = HttpMethod.POST, path = "/threads/runs", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionInformation
        Response<BinaryData> createThreadAndRunSync(@HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData threadAndRun, RequestOptions requestOptions, Context context);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/threads/{thread_id}/runs",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionInformation
        Response<BinaryData> createRunSync(@PathParam("thread_id") String threadId,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData run,
            RequestOptions requestOptions, Context context);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/threads/{thread_id}/runs",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionInformation
        Response<BinaryData> listRunsSync(@PathParam("thread_id") String threadId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/threads/{thread_id}/runs/{run_id}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionInformation
        Response<BinaryData> getRunSync(@PathParam("thread_id") String threadId, @PathParam("run_id") String runId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/threads/{thread_id}/runs/{run_id}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionInformation
        Response<BinaryData> modifyRunSync(@PathParam("thread_id") String threadId, @PathParam("run_id") String runId,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData run,
            RequestOptions requestOptions, Context context);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/threads/{thread_id}/runs/{run_id}/cancel",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionInformation
        Response<BinaryData> cancelRunSync(@PathParam("thread_id") String threadId, @PathParam("run_id") String runId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/threads/{thread_id}/runs/{run_id}/submit_tool_outputs",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionInformation
        Response<BinaryData> submitToolOuputsToRunSync(@PathParam("thread_id") String threadId,
            @PathParam("run_id") String runId, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData submitToolOutputsRun, RequestOptions requestOptions,
            Context context);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/threads/{thread_id}/runs/{run_id}/steps",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionInformation
        Response<BinaryData> listRunStepsSync(@PathParam("thread_id") String threadId,
            @PathParam("run_id") String runId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/threads/{thread_id}/runs/{run_id}/steps/{step_id}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "RESOURCE_NOT_FOUND", statusCode = { 404 })
        @UnexpectedResponseExceptionInformation(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionInformation
        Response<BinaryData> getRunStepSync(@PathParam("thread_id") String threadId, @PathParam("run_id") String runId,
            @PathParam("step_id") String stepId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);
    }

    /**
     * Create a thread and run it in one request.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     assistant_id: String (Required)
     *     thread (Optional): {
     *         messages (Optional): [
     *              (Optional){
     *                 role: String (Required)
     *                 content: String (Required)
     *                 file_ids (Optional): [
     *                     String (Optional)
     *                 ]
     *                 metadata (Optional): {
     *                     String: String (Required)
     *                 }
     *             }
     *         ]
     *         metadata (Optional): {
     *             String: String (Required)
     *         }
     *     }
     *     model: String (Optional)
     *     instructions: String (Optional)
     *     tools (Optional): [
     *         BinaryData (Optional)
     *     ]
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     assistant_id: String (Required)
     *     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *     required_action (Required): {
     *         type: String (Required)
     *         submit_tool_outputs (Required): {
     *             tool_calls (Required): [
     *                  (Required){
     *                     id: String (Required)
     *                     type: String (Required)
     *                     function (Required): {
     *                         name: String (Required)
     *                         arguments: String (Required)
     *                     }
     *                 }
     *             ]
     *         }
     *     }
     *     last_error (Required): {
     *         code: String(server_error/rate_limit_exceeded/invalid_prompt) (Required)
     *         message: String (Required)
     *     }
     *     expires_at: Long (Required)
     *     started_at: Long (Required)
     *     cancelled_at: Long (Required)
     *     failed_at: Long (Required)
     *     completed_at: Long (Required)
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *         BinaryData (Required)
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     *     usage (Required): {
     *         completion_tokens: long (Required)
     *         prompt_tokens: long (Required)
     *         total_tokens: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadAndRun The threadAndRun parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represents an execution run on a [thread](/docs/api-reference/threads).
     */
    public Response<BinaryData> createThreadAndRunWithResponse(BinaryData threadAndRun, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createThreadAndRunSync(accept, threadAndRun, requestOptions, Context.NONE);
    }

    /**
     * Create a run.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     assistant_id: String (Required)
     *     model: String (Optional)
     *     instructions: String (Optional)
     *     additional_instructions: String (Optional)
     *     tools (Optional): [
     *         BinaryData (Optional)
     *     ]
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     assistant_id: String (Required)
     *     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *     required_action (Required): {
     *         type: String (Required)
     *         submit_tool_outputs (Required): {
     *             tool_calls (Required): [
     *                  (Required){
     *                     id: String (Required)
     *                     type: String (Required)
     *                     function (Required): {
     *                         name: String (Required)
     *                         arguments: String (Required)
     *                     }
     *                 }
     *             ]
     *         }
     *     }
     *     last_error (Required): {
     *         code: String(server_error/rate_limit_exceeded/invalid_prompt) (Required)
     *         message: String (Required)
     *     }
     *     expires_at: Long (Required)
     *     started_at: Long (Required)
     *     cancelled_at: Long (Required)
     *     failed_at: Long (Required)
     *     completed_at: Long (Required)
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *         BinaryData (Required)
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     *     usage (Required): {
     *         completion_tokens: long (Required)
     *         prompt_tokens: long (Required)
     *         total_tokens: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread to run.
     * @param run The run parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represents an execution run on a [thread](/docs/api-reference/threads).
     */
    public Response<BinaryData> createRunWithResponse(String threadId, BinaryData run, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createRunSync(threadId, accept, run, requestOptions, Context.NONE);
    }

    /**
     * Returns a list of runs belonging to a thread.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             thread_id: String (Required)
     *             assistant_id: String (Required)
     *             status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *             required_action (Required): {
     *                 type: String (Required)
     *                 submit_tool_outputs (Required): {
     *                     tool_calls (Required): [
     *                          (Required){
     *                             id: String (Required)
     *                             type: String (Required)
     *                             function (Required): {
     *                                 name: String (Required)
     *                                 arguments: String (Required)
     *                             }
     *                         }
     *                     ]
     *                 }
     *             }
     *             last_error (Required): {
     *                 code: String(server_error/rate_limit_exceeded/invalid_prompt) (Required)
     *                 message: String (Required)
     *             }
     *             expires_at: Long (Required)
     *             started_at: Long (Required)
     *             cancelled_at: Long (Required)
     *             failed_at: Long (Required)
     *             completed_at: Long (Required)
     *             model: String (Required)
     *             instructions: String (Required)
     *             tools (Required): [
     *                 BinaryData (Required)
     *             ]
     *             file_ids (Required): [
     *                 String (Required)
     *             ]
     *             metadata (Required): {
     *                 String: String (Required)
     *             }
     *             usage (Required): {
     *                 completion_tokens: long (Required)
     *                 prompt_tokens: long (Required)
     *                 total_tokens: long (Required)
     *             }
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread the run belongs to.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<BinaryData> listRunsWithResponse(String threadId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listRunsSync(threadId, accept, requestOptions, Context.NONE);
    }

    /**
     * Retrieves a run.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     assistant_id: String (Required)
     *     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *     required_action (Required): {
     *         type: String (Required)
     *         submit_tool_outputs (Required): {
     *             tool_calls (Required): [
     *                  (Required){
     *                     id: String (Required)
     *                     type: String (Required)
     *                     function (Required): {
     *                         name: String (Required)
     *                         arguments: String (Required)
     *                     }
     *                 }
     *             ]
     *         }
     *     }
     *     last_error (Required): {
     *         code: String(server_error/rate_limit_exceeded/invalid_prompt) (Required)
     *         message: String (Required)
     *     }
     *     expires_at: Long (Required)
     *     started_at: Long (Required)
     *     cancelled_at: Long (Required)
     *     failed_at: Long (Required)
     *     completed_at: Long (Required)
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *         BinaryData (Required)
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     *     usage (Required): {
     *         completion_tokens: long (Required)
     *         prompt_tokens: long (Required)
     *         total_tokens: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run.
     * @param runId The ID of the run to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represents an execution run on a [thread](/docs/api-reference/threads).
     */
    public Response<BinaryData> getRunWithResponse(String threadId, String runId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getRunSync(threadId, runId, accept, requestOptions, Context.NONE);
    }

    /**
     * Modifies a run.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     assistant_id: String (Required)
     *     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *     required_action (Required): {
     *         type: String (Required)
     *         submit_tool_outputs (Required): {
     *             tool_calls (Required): [
     *                  (Required){
     *                     id: String (Required)
     *                     type: String (Required)
     *                     function (Required): {
     *                         name: String (Required)
     *                         arguments: String (Required)
     *                     }
     *                 }
     *             ]
     *         }
     *     }
     *     last_error (Required): {
     *         code: String(server_error/rate_limit_exceeded/invalid_prompt) (Required)
     *         message: String (Required)
     *     }
     *     expires_at: Long (Required)
     *     started_at: Long (Required)
     *     cancelled_at: Long (Required)
     *     failed_at: Long (Required)
     *     completed_at: Long (Required)
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *         BinaryData (Required)
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     *     usage (Required): {
     *         completion_tokens: long (Required)
     *         prompt_tokens: long (Required)
     *         total_tokens: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run.
     * @param runId The ID of the run to modify.
     * @param run The run parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represents an execution run on a [thread](/docs/api-reference/threads).
     */
    public Response<BinaryData> modifyRunWithResponse(String threadId, String runId, BinaryData run,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.modifyRunSync(threadId, runId, accept, run, requestOptions, Context.NONE);
    }

    /**
     * Cancels a run that is `in_progress`.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     assistant_id: String (Required)
     *     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *     required_action (Required): {
     *         type: String (Required)
     *         submit_tool_outputs (Required): {
     *             tool_calls (Required): [
     *                  (Required){
     *                     id: String (Required)
     *                     type: String (Required)
     *                     function (Required): {
     *                         name: String (Required)
     *                         arguments: String (Required)
     *                     }
     *                 }
     *             ]
     *         }
     *     }
     *     last_error (Required): {
     *         code: String(server_error/rate_limit_exceeded/invalid_prompt) (Required)
     *         message: String (Required)
     *     }
     *     expires_at: Long (Required)
     *     started_at: Long (Required)
     *     cancelled_at: Long (Required)
     *     failed_at: Long (Required)
     *     completed_at: Long (Required)
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *         BinaryData (Required)
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     *     usage (Required): {
     *         completion_tokens: long (Required)
     *         prompt_tokens: long (Required)
     *         total_tokens: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread to which this run belongs.
     * @param runId The ID of the run to cancel.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represents an execution run on a [thread](/docs/api-reference/threads).
     */
    public Response<BinaryData> cancelRunWithResponse(String threadId, String runId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.cancelRunSync(threadId, runId, accept, requestOptions, Context.NONE);
    }

    /**
     * When a run has the `status: "requires_action"` and `required_action.type` is
     * `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once
     * they're all completed. All outputs must be submitted in a single request.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     tool_outputs (Required): [
     *          (Required){
     *             tool_call_id: String (Optional)
     *             output: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     assistant_id: String (Required)
     *     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *     required_action (Required): {
     *         type: String (Required)
     *         submit_tool_outputs (Required): {
     *             tool_calls (Required): [
     *                  (Required){
     *                     id: String (Required)
     *                     type: String (Required)
     *                     function (Required): {
     *                         name: String (Required)
     *                         arguments: String (Required)
     *                     }
     *                 }
     *             ]
     *         }
     *     }
     *     last_error (Required): {
     *         code: String(server_error/rate_limit_exceeded/invalid_prompt) (Required)
     *         message: String (Required)
     *     }
     *     expires_at: Long (Required)
     *     started_at: Long (Required)
     *     cancelled_at: Long (Required)
     *     failed_at: Long (Required)
     *     completed_at: Long (Required)
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *         BinaryData (Required)
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     *     usage (Required): {
     *         completion_tokens: long (Required)
     *         prompt_tokens: long (Required)
     *         total_tokens: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
     * @param runId The ID of the run that requires the tool output submission.
     * @param submitToolOutputsRun The submitToolOutputsRun parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represents an execution run on a [thread](/docs/api-reference/threads).
     */
    public Response<BinaryData> submitToolOuputsToRunWithResponse(String threadId, String runId,
        BinaryData submitToolOutputsRun, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.submitToolOuputsToRunSync(threadId, runId, accept, submitToolOutputsRun, requestOptions,
            Context.NONE);
    }

    /**
     * Returns a list of run steps belonging to a run.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>A limit on the number of objects to be returned. Limit can range
     * between 1 and 100, and the
     * default is 20.</td></tr>
     * <tr><td>order</td><td>String</td><td>No</td><td>Sort order by the `created_at` timestamp of the objects. `asc`
     * for ascending order and`desc`
     * for descending order. Allowed values: "asc", "desc".</td></tr>
     * <tr><td>after</td><td>String</td><td>No</td><td>A cursor for use in pagination. `after` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include after=obj_foo in order to fetch the next page of the list.</td></tr>
     * <tr><td>before</td><td>String</td><td>No</td><td>A cursor for use in pagination. `before` is an object ID that
     * defines your place in the list.
     * For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
     * subsequent call can include before=obj_foo in order to fetch the previous page of the list.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             assistant_id: String (Required)
     *             thread_id: String (Required)
     *             run_id: String (Required)
     *             type: String(message_creation/tool_calls) (Required)
     *             status: String(in_progress/cancelled/failed/completed/expired) (Required)
     *             step_details: BinaryData (Required)
     *             last_error (Required): {
     *                 code: String(server_error/rate_limit_exceeded) (Required)
     *                 message: String (Required)
     *             }
     *             expires_at: Long (Required)
     *             cancelled_at: Long (Required)
     *             failed_at: Long (Required)
     *             completed_at: Long (Required)
     *             metadata (Required): {
     *                 String: String (Required)
     *             }
     *             usage (Required): {
     *                 completion_tokens: long (Required)
     *                 prompt_tokens: long (Required)
     *                 total_tokens: long (Required)
     *             }
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread the run and run steps belong to.
     * @param runId The ID of the run the run steps belong to.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<BinaryData> listRunStepsWithResponse(String threadId, String runId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listRunStepsSync(threadId, runId, accept, requestOptions, Context.NONE);
    }

    /**
     * Retrieves a run step.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     assistant_id: String (Required)
     *     thread_id: String (Required)
     *     run_id: String (Required)
     *     type: String(message_creation/tool_calls) (Required)
     *     status: String(in_progress/cancelled/failed/completed/expired) (Required)
     *     step_details: BinaryData (Required)
     *     last_error (Required): {
     *         code: String(server_error/rate_limit_exceeded) (Required)
     *         message: String (Required)
     *     }
     *     expires_at: Long (Required)
     *     cancelled_at: Long (Required)
     *     failed_at: Long (Required)
     *     completed_at: Long (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     *     usage (Required): {
     *         completion_tokens: long (Required)
     *         prompt_tokens: long (Required)
     *         total_tokens: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread to which the run and run step belongs.
     * @param runId The ID of the run to which the run step belongs.
     * @param stepId The ID of the run step to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represents a step in execution of a run.
     */
    public Response<BinaryData> getRunStepWithResponse(String threadId, String runId, String stepId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getRunStepSync(threadId, runId, stepId, accept, requestOptions, Context.NONE);
    }
}
