// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Metadata;
import com.generic.core.annotation.TypeConditions;
import com.generic.core.models.BinaryData;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;

/**
 * Represents an embedding vector returned by embedding endpoint.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class Embedding implements JsonSerializable<Embedding> {
    /*
     * The index of the embedding in the list of embeddings.
     */
    @Metadata(generated = true)
    private final long index;

    /*
     * The embedding vector, which is a list of floats. The length of vector depends on the model as
     * listed in the [embedding guide](/docs/guides/embeddings).
     */
    @Metadata(generated = true)
    private final BinaryData embedding;

    /*
     * The object type, which is always "embedding".
     */
    @Metadata(generated = true)
    private final String object = "embedding";

    /**
     * Creates an instance of Embedding class.
     * 
     * @param index the index value to set.
     * @param embedding the embedding value to set.
     */
    @Metadata(generated = true)
    private Embedding(long index, BinaryData embedding) {
        this.index = index;
        this.embedding = embedding;
    }

    /**
     * Get the index property: The index of the embedding in the list of embeddings.
     * 
     * @return the index value.
     */
    @Metadata(generated = true)
    public long getIndex() {
        return this.index;
    }

    /**
     * Get the embedding property: The embedding vector, which is a list of floats. The length of vector depends on the
     * model as
     * listed in the [embedding guide](/docs/guides/embeddings).
     * 
     * @return the embedding value.
     */
    @Metadata(generated = true)
    public BinaryData getEmbedding() {
        return this.embedding;
    }

    /**
     * Get the object property: The object type, which is always "embedding".
     * 
     * @return the object value.
     */
    @Metadata(generated = true)
    public String getObject() {
        return this.object;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeLongField("index", this.index);
        jsonWriter.writeUntypedField("embedding", this.embedding.toObject(Object.class));
        jsonWriter.writeStringField("object", this.object);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Embedding from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Embedding if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Embedding.
     */
    @Metadata(generated = true)
    public static Embedding fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            long index = 0L;
            BinaryData embedding = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("index".equals(fieldName)) {
                    index = reader.getLong();
                } else if ("embedding".equals(fieldName)) {
                    embedding = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else {
                    reader.skipChildren();
                }
            }
            return new Embedding(index, embedding);
        });
    }
}
