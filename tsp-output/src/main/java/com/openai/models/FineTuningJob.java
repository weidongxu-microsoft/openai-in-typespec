// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Metadata;
import com.generic.core.annotation.TypeConditions;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.List;

/**
 * The FineTuningJob model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class FineTuningJob implements JsonSerializable<FineTuningJob> {
    /*
     * The object identifier, which can be referenced in the API endpoints.
     */
    @Metadata(generated = true)
    private final String id;

    /*
     * The Unix timestamp (in seconds) for when the fine-tuning job was created.
     */
    @Metadata(generated = true)
    private final long createdAt;

    /*
     * For fine-tuning jobs that have `failed`, this will contain more information on the cause of the
     * failure.
     */
    @Metadata(generated = true)
    private final FineTuningJobError error;

    /*
     * The name of the fine-tuned model that is being created. The value will be null if the
     * fine-tuning job is still running.
     */
    @Metadata(generated = true)
    private final String fineTunedModel;

    /*
     * The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be
     * null if the fine-tuning job is still running.
     */
    @Metadata(generated = true)
    private final Long finishedAt;

    /*
     * The hyperparameters used for the fine-tuning job. See the
     * [fine-tuning guide](/docs/guides/fine-tuning) for more details.
     */
    @Metadata(generated = true)
    private final FineTuningJobHyperparameters hyperparameters;

    /*
     * The base model that is being fine-tuned.
     */
    @Metadata(generated = true)
    private final String model;

    /*
     * The object type, which is always "fine_tuning.job".
     */
    @Metadata(generated = true)
    private final String object = "fine_tuning.job";

    /*
     * The organization that owns the fine-tuning job.
     */
    @Metadata(generated = true)
    private final String organizationId;

    /*
     * The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the
     * [Files API](/docs/api-reference/files/retrieve-contents).
     */
    @Metadata(generated = true)
    private final List<String> resultFiles;

    /*
     * The current status of the fine-tuning job, which can be either `validating_files`, `queued`,
     * `running`, `succeeded`, `failed`, or `cancelled`.
     */
    @Metadata(generated = true)
    private final FineTuningJobStatus status;

    /*
     * The total number of billable tokens processed by this fine-tuning job. The value will be null
     * if the fine-tuning job is still running.
     */
    @Metadata(generated = true)
    private final Long trainedTokens;

    /*
     * The file ID used for training. You can retrieve the training data with the
     * [Files API](/docs/api-reference/files/retrieve-contents).
     */
    @Metadata(generated = true)
    private final String trainingFile;

    /*
     * The file ID used for validation. You can retrieve the validation results with the
     * [Files API](/docs/api-reference/files/retrieve-contents).
     */
    @Metadata(generated = true)
    private final String validationFile;

    /**
     * Creates an instance of FineTuningJob class.
     * 
     * @param id the id value to set.
     * @param createdAt the createdAt value to set.
     * @param error the error value to set.
     * @param fineTunedModel the fineTunedModel value to set.
     * @param finishedAt the finishedAt value to set.
     * @param hyperparameters the hyperparameters value to set.
     * @param model the model value to set.
     * @param organizationId the organizationId value to set.
     * @param resultFiles the resultFiles value to set.
     * @param status the status value to set.
     * @param trainedTokens the trainedTokens value to set.
     * @param trainingFile the trainingFile value to set.
     * @param validationFile the validationFile value to set.
     */
    @Metadata(generated = true)
    private FineTuningJob(String id, OffsetDateTime createdAt, FineTuningJobError error, String fineTunedModel,
        OffsetDateTime finishedAt, FineTuningJobHyperparameters hyperparameters, String model, String organizationId,
        List<String> resultFiles, FineTuningJobStatus status, Long trainedTokens, String trainingFile,
        String validationFile) {
        this.id = id;
        if (createdAt == null) {
            this.createdAt = 0L;
        } else {
            this.createdAt = createdAt.toEpochSecond();
        }
        this.error = error;
        this.fineTunedModel = fineTunedModel;
        if (finishedAt == null) {
            this.finishedAt = null;
        } else {
            this.finishedAt = finishedAt.toEpochSecond();
        }
        this.hyperparameters = hyperparameters;
        this.model = model;
        this.organizationId = organizationId;
        this.resultFiles = resultFiles;
        this.status = status;
        this.trainedTokens = trainedTokens;
        this.trainingFile = trainingFile;
        this.validationFile = validationFile;
    }

    /**
     * Get the id property: The object identifier, which can be referenced in the API endpoints.
     * 
     * @return the id value.
     */
    @Metadata(generated = true)
    public String getId() {
        return this.id;
    }

    /**
     * Get the createdAt property: The Unix timestamp (in seconds) for when the fine-tuning job was created.
     * 
     * @return the createdAt value.
     */
    @Metadata(generated = true)
    public OffsetDateTime getCreatedAt() {
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.createdAt), ZoneOffset.UTC);
    }

    /**
     * Get the error property: For fine-tuning jobs that have `failed`, this will contain more information on the cause
     * of the
     * failure.
     * 
     * @return the error value.
     */
    @Metadata(generated = true)
    public FineTuningJobError getError() {
        return this.error;
    }

    /**
     * Get the fineTunedModel property: The name of the fine-tuned model that is being created. The value will be null
     * if the
     * fine-tuning job is still running.
     * 
     * @return the fineTunedModel value.
     */
    @Metadata(generated = true)
    public String getFineTunedModel() {
        return this.fineTunedModel;
    }

    /**
     * Get the finishedAt property: The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value
     * will be
     * null if the fine-tuning job is still running.
     * 
     * @return the finishedAt value.
     */
    @Metadata(generated = true)
    public OffsetDateTime getFinishedAt() {
        if (this.finishedAt == null) {
            return null;
        }
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.finishedAt), ZoneOffset.UTC);
    }

    /**
     * Get the hyperparameters property: The hyperparameters used for the fine-tuning job. See the
     * [fine-tuning guide](/docs/guides/fine-tuning) for more details.
     * 
     * @return the hyperparameters value.
     */
    @Metadata(generated = true)
    public FineTuningJobHyperparameters getHyperparameters() {
        return this.hyperparameters;
    }

    /**
     * Get the model property: The base model that is being fine-tuned.
     * 
     * @return the model value.
     */
    @Metadata(generated = true)
    public String getModel() {
        return this.model;
    }

    /**
     * Get the object property: The object type, which is always "fine_tuning.job".
     * 
     * @return the object value.
     */
    @Metadata(generated = true)
    public String getObject() {
        return this.object;
    }

    /**
     * Get the organizationId property: The organization that owns the fine-tuning job.
     * 
     * @return the organizationId value.
     */
    @Metadata(generated = true)
    public String getOrganizationId() {
        return this.organizationId;
    }

    /**
     * Get the resultFiles property: The compiled results file ID(s) for the fine-tuning job. You can retrieve the
     * results with the
     * [Files API](/docs/api-reference/files/retrieve-contents).
     * 
     * @return the resultFiles value.
     */
    @Metadata(generated = true)
    public List<String> getResultFiles() {
        return this.resultFiles;
    }

    /**
     * Get the status property: The current status of the fine-tuning job, which can be either `validating_files`,
     * `queued`,
     * `running`, `succeeded`, `failed`, or `cancelled`.
     * 
     * @return the status value.
     */
    @Metadata(generated = true)
    public FineTuningJobStatus getStatus() {
        return this.status;
    }

    /**
     * Get the trainedTokens property: The total number of billable tokens processed by this fine-tuning job. The value
     * will be null
     * if the fine-tuning job is still running.
     * 
     * @return the trainedTokens value.
     */
    @Metadata(generated = true)
    public Long getTrainedTokens() {
        return this.trainedTokens;
    }

    /**
     * Get the trainingFile property: The file ID used for training. You can retrieve the training data with the
     * [Files API](/docs/api-reference/files/retrieve-contents).
     * 
     * @return the trainingFile value.
     */
    @Metadata(generated = true)
    public String getTrainingFile() {
        return this.trainingFile;
    }

    /**
     * Get the validationFile property: The file ID used for validation. You can retrieve the validation results with
     * the
     * [Files API](/docs/api-reference/files/retrieve-contents).
     * 
     * @return the validationFile value.
     */
    @Metadata(generated = true)
    public String getValidationFile() {
        return this.validationFile;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeLongField("created_at", this.createdAt);
        jsonWriter.writeJsonField("error", this.error);
        jsonWriter.writeStringField("fine_tuned_model", this.fineTunedModel);
        jsonWriter.writeNumberField("finished_at", this.finishedAt);
        jsonWriter.writeJsonField("hyperparameters", this.hyperparameters);
        jsonWriter.writeStringField("model", this.model);
        jsonWriter.writeStringField("object", this.object);
        jsonWriter.writeStringField("organization_id", this.organizationId);
        jsonWriter.writeArrayField("result_files", this.resultFiles, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeNumberField("trained_tokens", this.trainedTokens);
        jsonWriter.writeStringField("training_file", this.trainingFile);
        jsonWriter.writeStringField("validation_file", this.validationFile);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FineTuningJob from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FineTuningJob if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FineTuningJob.
     */
    @Metadata(generated = true)
    public static FineTuningJob fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            OffsetDateTime createdAt = null;
            FineTuningJobError error = null;
            String fineTunedModel = null;
            OffsetDateTime finishedAt = null;
            FineTuningJobHyperparameters hyperparameters = null;
            String model = null;
            String organizationId = null;
            List<String> resultFiles = null;
            FineTuningJobStatus status = null;
            Long trainedTokens = null;
            String trainingFile = null;
            String validationFile = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("created_at".equals(fieldName)) {
                    createdAt = OffsetDateTime.ofInstant(Instant.ofEpochSecond(reader.getLong()), ZoneOffset.UTC);
                } else if ("error".equals(fieldName)) {
                    error = FineTuningJobError.fromJson(reader);
                } else if ("fine_tuned_model".equals(fieldName)) {
                    fineTunedModel = reader.getString();
                } else if ("finished_at".equals(fieldName)) {
                    Long finishedAtHolder = reader.getNullable(JsonReader::getLong);
                    if (finishedAtHolder != null) {
                        finishedAt = OffsetDateTime.ofInstant(Instant.ofEpochSecond(finishedAtHolder), ZoneOffset.UTC);
                    }
                } else if ("hyperparameters".equals(fieldName)) {
                    hyperparameters = FineTuningJobHyperparameters.fromJson(reader);
                } else if ("model".equals(fieldName)) {
                    model = reader.getString();
                } else if ("organization_id".equals(fieldName)) {
                    organizationId = reader.getString();
                } else if ("result_files".equals(fieldName)) {
                    resultFiles = reader.readArray(reader1 -> reader1.getString());
                } else if ("status".equals(fieldName)) {
                    status = FineTuningJobStatus.fromString(reader.getString());
                } else if ("trained_tokens".equals(fieldName)) {
                    trainedTokens = reader.getNullable(JsonReader::getLong);
                } else if ("training_file".equals(fieldName)) {
                    trainingFile = reader.getString();
                } else if ("validation_file".equals(fieldName)) {
                    validationFile = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new FineTuningJob(id, createdAt, error, fineTunedModel, finishedAt, hyperparameters, model,
                organizationId, resultFiles, status, trainedTokens, trainingFile, validationFile);
        });
    }
}
