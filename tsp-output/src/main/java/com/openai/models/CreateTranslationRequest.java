// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Metadata;
import com.generic.core.annotation.TypeConditions;

/**
 * The CreateTranslationRequest model.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class CreateTranslationRequest {
    /*
     * The audio file object (not file name) to translate, in one of these formats: flac, mp3, mp4,
     * mpeg, mpga, m4a, ogg, pcm, wav, or webm.
     */
    @Metadata(generated = true)
    private final FileDetails file;

    /*
     * ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model)
     * is currently available.
     */
    @Metadata(generated = true)
    private final CreateTranslationRequestModel model;

    /*
     * An optional text to guide the model's style or continue a previous audio segment. The
     * [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.
     */
    @Metadata(generated = true)
    private String prompt;

    /*
     * The format of the transcript output, in one of these options: json, text, srt, verbose_json, or
     * vtt.
     */
    @Metadata(generated = true)
    private CreateTranslationRequestResponseFormat responseFormat;

    /*
     * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more
     * random, while lower values like 0.2 will make it more focused and deterministic. If set to 0,
     * the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to
     * automatically increase the temperature until certain thresholds are hit.
     */
    @Metadata(generated = true)
    private Double temperature;

    /**
     * Creates an instance of CreateTranslationRequest class.
     * 
     * @param file the file value to set.
     * @param model the model value to set.
     */
    @Metadata(generated = true)
    public CreateTranslationRequest(FileDetails file, CreateTranslationRequestModel model) {
        this.file = file;
        this.model = model;
    }

    /**
     * Get the file property: The audio file object (not file name) to translate, in one of these formats: flac, mp3,
     * mp4,
     * mpeg, mpga, m4a, ogg, pcm, wav, or webm.
     * 
     * @return the file value.
     */
    @Metadata(generated = true)
    public FileDetails getFile() {
        return this.file;
    }

    /**
     * Get the model property: ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2
     * model)
     * is currently available.
     * 
     * @return the model value.
     */
    @Metadata(generated = true)
    public CreateTranslationRequestModel getModel() {
        return this.model;
    }

    /**
     * Get the prompt property: An optional text to guide the model's style or continue a previous audio segment. The
     * [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.
     * 
     * @return the prompt value.
     */
    @Metadata(generated = true)
    public String getPrompt() {
        return this.prompt;
    }

    /**
     * Set the prompt property: An optional text to guide the model's style or continue a previous audio segment. The
     * [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.
     * 
     * @param prompt the prompt value to set.
     * @return the CreateTranslationRequest object itself.
     */
    @Metadata(generated = true)
    public CreateTranslationRequest setPrompt(String prompt) {
        this.prompt = prompt;
        return this;
    }

    /**
     * Get the responseFormat property: The format of the transcript output, in one of these options: json, text, srt,
     * verbose_json, or
     * vtt.
     * 
     * @return the responseFormat value.
     */
    @Metadata(generated = true)
    public CreateTranslationRequestResponseFormat getResponseFormat() {
        return this.responseFormat;
    }

    /**
     * Set the responseFormat property: The format of the transcript output, in one of these options: json, text, srt,
     * verbose_json, or
     * vtt.
     * 
     * @param responseFormat the responseFormat value to set.
     * @return the CreateTranslationRequest object itself.
     */
    @Metadata(generated = true)
    public CreateTranslationRequest setResponseFormat(CreateTranslationRequestResponseFormat responseFormat) {
        this.responseFormat = responseFormat;
        return this;
    }

    /**
     * Get the temperature property: The sampling temperature, between 0 and 1. Higher values like 0.8 will make the
     * output more
     * random, while lower values like 0.2 will make it more focused and deterministic. If set to 0,
     * the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to
     * automatically increase the temperature until certain thresholds are hit.
     * 
     * @return the temperature value.
     */
    @Metadata(generated = true)
    public Double getTemperature() {
        return this.temperature;
    }

    /**
     * Set the temperature property: The sampling temperature, between 0 and 1. Higher values like 0.8 will make the
     * output more
     * random, while lower values like 0.2 will make it more focused and deterministic. If set to 0,
     * the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to
     * automatically increase the temperature until certain thresholds are hit.
     * 
     * @param temperature the temperature value to set.
     * @return the CreateTranslationRequest object itself.
     */
    @Metadata(generated = true)
    public CreateTranslationRequest setTemperature(Double temperature) {
        this.temperature = temperature;
        return this;
    }
}
