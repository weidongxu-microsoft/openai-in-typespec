// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Metadata;
import com.generic.core.annotation.TypeConditions;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;

/**
 * The TranscriptionWord model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class TranscriptionWord implements JsonSerializable<TranscriptionWord> {
    /*
     * The text content of the word.
     */
    @Metadata(generated = true)
    private final String word;

    /*
     * Start time of the word in seconds.
     */
    @Metadata(generated = true)
    private final double start;

    /*
     * End time of the word in seconds.
     */
    @Metadata(generated = true)
    private final double end;

    /**
     * Creates an instance of TranscriptionWord class.
     * 
     * @param word the word value to set.
     * @param start the start value to set.
     * @param end the end value to set.
     */
    @Metadata(generated = true)
    private TranscriptionWord(String word, Duration start, Duration end) {
        this.word = word;
        if (start == null) {
            this.start = 0.0;
        } else {
            this.start = (double) start.toNanos() / 1000_000_000L;
        }
        if (end == null) {
            this.end = 0.0;
        } else {
            this.end = (double) end.toNanos() / 1000_000_000L;
        }
    }

    /**
     * Get the word property: The text content of the word.
     * 
     * @return the word value.
     */
    @Metadata(generated = true)
    public String getWord() {
        return this.word;
    }

    /**
     * Get the start property: Start time of the word in seconds.
     * 
     * @return the start value.
     */
    @Metadata(generated = true)
    public Duration getStart() {
        return Duration.ofNanos((long) (this.start * 1000_000_000L));
    }

    /**
     * Get the end property: End time of the word in seconds.
     * 
     * @return the end value.
     */
    @Metadata(generated = true)
    public Duration getEnd() {
        return Duration.ofNanos((long) (this.end * 1000_000_000L));
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("word", this.word);
        jsonWriter.writeDoubleField("start", this.start);
        jsonWriter.writeDoubleField("end", this.end);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TranscriptionWord from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TranscriptionWord if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TranscriptionWord.
     */
    @Metadata(generated = true)
    public static TranscriptionWord fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String word = null;
            Duration start = null;
            Duration end = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("word".equals(fieldName)) {
                    word = reader.getString();
                } else if ("start".equals(fieldName)) {
                    start = Duration.ofNanos((long) (reader.getDouble() * 1000_000_000L));
                } else if ("end".equals(fieldName)) {
                    end = Duration.ofNanos((long) (reader.getDouble() * 1000_000_000L));
                } else {
                    reader.skipChildren();
                }
            }
            return new TranscriptionWord(word, start, end);
        });
    }
}
