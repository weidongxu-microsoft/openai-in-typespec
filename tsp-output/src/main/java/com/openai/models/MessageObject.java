// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Metadata;
import com.generic.core.annotation.TypeConditions;
import com.generic.core.models.BinaryData;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.List;
import java.util.Map;

/**
 * The MessageObject model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class MessageObject implements JsonSerializable<MessageObject> {
    /*
     * The identifier, which can be referenced in API endpoints.
     */
    @Metadata(generated = true)
    private final String id;

    /*
     * The object type, which is always `thread.message`.
     */
    @Metadata(generated = true)
    private final String object = "thread.message";

    /*
     * The Unix timestamp (in seconds) for when the message was created.
     */
    @Metadata(generated = true)
    private final long createdAt;

    /*
     * The [thread](/docs/api-reference/threads) ID that this message belongs to.
     */
    @Metadata(generated = true)
    private final String threadId;

    /*
     * The entity that produced the message. One of `user` or `assistant`.
     */
    @Metadata(generated = true)
    private final MessageObjectRole role;

    /*
     * The content of the message in array of text and/or images.
     */
    @Metadata(generated = true)
    private final List<BinaryData> content;

    /*
     * If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this
     * message.
     */
    @Metadata(generated = true)
    private final String assistantId;

    /*
     * If applicable, the ID of the [run](/docs/api-reference/runs) associated with the authoring of
     * this message.
     */
    @Metadata(generated = true)
    private final String runId;

    /*
     * A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for
     * tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be
     * attached to a message.
     */
    @Metadata(generated = true)
    private final List<String> fileIds;

    /*
     * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
     * additional information about the object in a structured format. Keys can be a maximum of 64
     * characters long and values can be a maxium of 512 characters long.
     */
    @Metadata(generated = true)
    private final Map<String, String> metadata;

    /**
     * Creates an instance of MessageObject class.
     * 
     * @param id the id value to set.
     * @param createdAt the createdAt value to set.
     * @param threadId the threadId value to set.
     * @param role the role value to set.
     * @param content the content value to set.
     * @param assistantId the assistantId value to set.
     * @param runId the runId value to set.
     * @param fileIds the fileIds value to set.
     * @param metadata the metadata value to set.
     */
    @Metadata(generated = true)
    private MessageObject(String id, OffsetDateTime createdAt, String threadId, MessageObjectRole role,
        List<BinaryData> content, String assistantId, String runId, List<String> fileIds,
        Map<String, String> metadata) {
        this.id = id;
        if (createdAt == null) {
            this.createdAt = 0L;
        } else {
            this.createdAt = createdAt.toEpochSecond();
        }
        this.threadId = threadId;
        this.role = role;
        this.content = content;
        this.assistantId = assistantId;
        this.runId = runId;
        this.fileIds = fileIds;
        this.metadata = metadata;
    }

    /**
     * Get the id property: The identifier, which can be referenced in API endpoints.
     * 
     * @return the id value.
     */
    @Metadata(generated = true)
    public String getId() {
        return this.id;
    }

    /**
     * Get the object property: The object type, which is always `thread.message`.
     * 
     * @return the object value.
     */
    @Metadata(generated = true)
    public String getObject() {
        return this.object;
    }

    /**
     * Get the createdAt property: The Unix timestamp (in seconds) for when the message was created.
     * 
     * @return the createdAt value.
     */
    @Metadata(generated = true)
    public OffsetDateTime getCreatedAt() {
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.createdAt), ZoneOffset.UTC);
    }

    /**
     * Get the threadId property: The [thread](/docs/api-reference/threads) ID that this message belongs to.
     * 
     * @return the threadId value.
     */
    @Metadata(generated = true)
    public String getThreadId() {
        return this.threadId;
    }

    /**
     * Get the role property: The entity that produced the message. One of `user` or `assistant`.
     * 
     * @return the role value.
     */
    @Metadata(generated = true)
    public MessageObjectRole getRole() {
        return this.role;
    }

    /**
     * Get the content property: The content of the message in array of text and/or images.
     * 
     * @return the content value.
     */
    @Metadata(generated = true)
    public List<BinaryData> getContent() {
        return this.content;
    }

    /**
     * Get the assistantId property: If applicable, the ID of the [assistant](/docs/api-reference/assistants) that
     * authored this
     * message.
     * 
     * @return the assistantId value.
     */
    @Metadata(generated = true)
    public String getAssistantId() {
        return this.assistantId;
    }

    /**
     * Get the runId property: If applicable, the ID of the [run](/docs/api-reference/runs) associated with the
     * authoring of
     * this message.
     * 
     * @return the runId value.
     */
    @Metadata(generated = true)
    public String getRunId() {
        return this.runId;
    }

    /**
     * Get the fileIds property: A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful
     * for
     * tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be
     * attached to a message.
     * 
     * @return the fileIds value.
     */
    @Metadata(generated = true)
    public List<String> getFileIds() {
        return this.fileIds;
    }

    /**
     * Get the metadata property: Set of 16 key-value pairs that can be attached to an object. This can be useful for
     * storing
     * additional information about the object in a structured format. Keys can be a maximum of 64
     * characters long and values can be a maxium of 512 characters long.
     * 
     * @return the metadata value.
     */
    @Metadata(generated = true)
    public Map<String, String> getMetadata() {
        return this.metadata;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("object", this.object);
        jsonWriter.writeLongField("created_at", this.createdAt);
        jsonWriter.writeStringField("thread_id", this.threadId);
        jsonWriter.writeStringField("role", this.role == null ? null : this.role.toString());
        jsonWriter.writeArrayField("content", this.content, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeStringField("assistant_id", this.assistantId);
        jsonWriter.writeStringField("run_id", this.runId);
        jsonWriter.writeArrayField("file_ids", this.fileIds, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MessageObject from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MessageObject if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MessageObject.
     */
    @Metadata(generated = true)
    public static MessageObject fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            OffsetDateTime createdAt = null;
            String threadId = null;
            MessageObjectRole role = null;
            List<BinaryData> content = null;
            String assistantId = null;
            String runId = null;
            List<String> fileIds = null;
            Map<String, String> metadata = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("created_at".equals(fieldName)) {
                    createdAt = OffsetDateTime.ofInstant(Instant.ofEpochSecond(reader.getLong()), ZoneOffset.UTC);
                } else if ("thread_id".equals(fieldName)) {
                    threadId = reader.getString();
                } else if ("role".equals(fieldName)) {
                    role = MessageObjectRole.fromString(reader.getString());
                } else if ("content".equals(fieldName)) {
                    content = reader.readArray(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else if ("assistant_id".equals(fieldName)) {
                    assistantId = reader.getString();
                } else if ("run_id".equals(fieldName)) {
                    runId = reader.getString();
                } else if ("file_ids".equals(fieldName)) {
                    fileIds = reader.readArray(reader1 -> reader1.getString());
                } else if ("metadata".equals(fieldName)) {
                    metadata = reader.readMap(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new MessageObject(id, createdAt, threadId, role, content, assistantId, runId, fileIds, metadata);
        });
    }
}
