// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Metadata;
import com.generic.core.annotation.TypeConditions;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;

/**
 * A list of [Files](/docs/api-reference/files) attached to an `assistant`.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class AssistantFileObject implements JsonSerializable<AssistantFileObject> {
    /*
     * The identifier, which can be referenced in API endpoints.
     */
    @Metadata(generated = true)
    private final String id;

    /*
     * The object type, which is always `assistant.file`.
     */
    @Metadata(generated = true)
    private final String object = "assistant.file";

    /*
     * The Unix timestamp (in seconds) for when the assistant file was created.
     */
    @Metadata(generated = true)
    private final long createdAt;

    /*
     * The assistant ID that the file is attached to.
     */
    @Metadata(generated = true)
    private final String assistantId;

    /**
     * Creates an instance of AssistantFileObject class.
     * 
     * @param id the id value to set.
     * @param createdAt the createdAt value to set.
     * @param assistantId the assistantId value to set.
     */
    @Metadata(generated = true)
    private AssistantFileObject(String id, OffsetDateTime createdAt, String assistantId) {
        this.id = id;
        if (createdAt == null) {
            this.createdAt = 0L;
        } else {
            this.createdAt = createdAt.toEpochSecond();
        }
        this.assistantId = assistantId;
    }

    /**
     * Get the id property: The identifier, which can be referenced in API endpoints.
     * 
     * @return the id value.
     */
    @Metadata(generated = true)
    public String getId() {
        return this.id;
    }

    /**
     * Get the object property: The object type, which is always `assistant.file`.
     * 
     * @return the object value.
     */
    @Metadata(generated = true)
    public String getObject() {
        return this.object;
    }

    /**
     * Get the createdAt property: The Unix timestamp (in seconds) for when the assistant file was created.
     * 
     * @return the createdAt value.
     */
    @Metadata(generated = true)
    public OffsetDateTime getCreatedAt() {
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.createdAt), ZoneOffset.UTC);
    }

    /**
     * Get the assistantId property: The assistant ID that the file is attached to.
     * 
     * @return the assistantId value.
     */
    @Metadata(generated = true)
    public String getAssistantId() {
        return this.assistantId;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("object", this.object);
        jsonWriter.writeLongField("created_at", this.createdAt);
        jsonWriter.writeStringField("assistant_id", this.assistantId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssistantFileObject from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssistantFileObject if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AssistantFileObject.
     */
    @Metadata(generated = true)
    public static AssistantFileObject fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            OffsetDateTime createdAt = null;
            String assistantId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("created_at".equals(fieldName)) {
                    createdAt = OffsetDateTime.ofInstant(Instant.ofEpochSecond(reader.getLong()), ZoneOffset.UTC);
                } else if ("assistant_id".equals(fieldName)) {
                    assistantId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new AssistantFileObject(id, createdAt, assistantId);
        });
    }
}
