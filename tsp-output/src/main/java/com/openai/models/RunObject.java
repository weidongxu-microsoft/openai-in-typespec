// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Metadata;
import com.generic.core.annotation.TypeConditions;
import com.generic.core.models.BinaryData;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.List;
import java.util.Map;

/**
 * Represents an execution run on a [thread](/docs/api-reference/threads).
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class RunObject implements JsonSerializable<RunObject> {
    /*
     * The identifier, which can be referenced in API endpoints.
     */
    @Metadata(generated = true)
    private final String id;

    /*
     * The object type, which is always `thread.run`.
     */
    @Metadata(generated = true)
    private final String object = "thread.run";

    /*
     * The Unix timestamp (in seconds) for when the run was created.
     */
    @Metadata(generated = true)
    private final long createdAt;

    /*
     * The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this
     * run.
     */
    @Metadata(generated = true)
    private final String threadId;

    /*
     * The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
     */
    @Metadata(generated = true)
    private final String assistantId;

    /*
     * The status of the run, which can be either `queued`, `in_progress`, `requires_action`,
     * `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
     */
    @Metadata(generated = true)
    private final RunObjectStatus status;

    /*
     * Details on the action required to continue the run. Will be `null` if no action is
     * required.
     */
    @Metadata(generated = true)
    private final RunObjectRequiredAction requiredAction;

    /*
     * The last error associated with this run. Will be `null` if there are no errors.
     */
    @Metadata(generated = true)
    private final RunObjectLastError lastError;

    /*
     * The Unix timestamp (in seconds) for when the run will expire.
     */
    @Metadata(generated = true)
    private final Long expiresAt;

    /*
     * The Unix timestamp (in seconds) for when the run was started.
     */
    @Metadata(generated = true)
    private final Long startedAt;

    /*
     * The Unix timestamp (in seconds) for when the run was cancelled.
     */
    @Metadata(generated = true)
    private final Long cancelledAt;

    /*
     * The Unix timestamp (in seconds) for when the run failed.
     */
    @Metadata(generated = true)
    private final Long failedAt;

    /*
     * The Unix timestamp (in seconds) for when the run was completed.
     */
    @Metadata(generated = true)
    private final Long completedAt;

    /*
     * The model that the [assistant](/docs/api-reference/assistants) used for this run.
     */
    @Metadata(generated = true)
    private final String model;

    /*
     * The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
     */
    @Metadata(generated = true)
    private final String instructions;

    /*
     * The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
     */
    @Metadata(generated = true)
    private final List<BinaryData> tools;

    /*
     * The list of [File](/docs/api-reference/files) IDs the
     * [assistant](/docs/api-reference/assistants) used for this run.
     */
    @Metadata(generated = true)
    private final List<String> fileIds;

    /*
     * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
     * additional information about the object in a structured format. Keys can be a maximum of 64
     * characters long and values can be a maxium of 512 characters long.
     */
    @Metadata(generated = true)
    private final Map<String, String> metadata;

    /*
     * The usage property.
     */
    @Metadata(generated = true)
    private final RunCompletionUsage usage;

    /**
     * Creates an instance of RunObject class.
     * 
     * @param id the id value to set.
     * @param createdAt the createdAt value to set.
     * @param threadId the threadId value to set.
     * @param assistantId the assistantId value to set.
     * @param status the status value to set.
     * @param requiredAction the requiredAction value to set.
     * @param lastError the lastError value to set.
     * @param expiresAt the expiresAt value to set.
     * @param startedAt the startedAt value to set.
     * @param cancelledAt the cancelledAt value to set.
     * @param failedAt the failedAt value to set.
     * @param completedAt the completedAt value to set.
     * @param model the model value to set.
     * @param instructions the instructions value to set.
     * @param tools the tools value to set.
     * @param fileIds the fileIds value to set.
     * @param metadata the metadata value to set.
     * @param usage the usage value to set.
     */
    @Metadata(generated = true)
    private RunObject(String id, OffsetDateTime createdAt, String threadId, String assistantId, RunObjectStatus status,
        RunObjectRequiredAction requiredAction, RunObjectLastError lastError, OffsetDateTime expiresAt,
        OffsetDateTime startedAt, OffsetDateTime cancelledAt, OffsetDateTime failedAt, OffsetDateTime completedAt,
        String model, String instructions, List<BinaryData> tools, List<String> fileIds, Map<String, String> metadata,
        RunCompletionUsage usage) {
        this.id = id;
        if (createdAt == null) {
            this.createdAt = 0L;
        } else {
            this.createdAt = createdAt.toEpochSecond();
        }
        this.threadId = threadId;
        this.assistantId = assistantId;
        this.status = status;
        this.requiredAction = requiredAction;
        this.lastError = lastError;
        if (expiresAt == null) {
            this.expiresAt = null;
        } else {
            this.expiresAt = expiresAt.toEpochSecond();
        }
        if (startedAt == null) {
            this.startedAt = null;
        } else {
            this.startedAt = startedAt.toEpochSecond();
        }
        if (cancelledAt == null) {
            this.cancelledAt = null;
        } else {
            this.cancelledAt = cancelledAt.toEpochSecond();
        }
        if (failedAt == null) {
            this.failedAt = null;
        } else {
            this.failedAt = failedAt.toEpochSecond();
        }
        if (completedAt == null) {
            this.completedAt = null;
        } else {
            this.completedAt = completedAt.toEpochSecond();
        }
        this.model = model;
        this.instructions = instructions;
        this.tools = tools;
        this.fileIds = fileIds;
        this.metadata = metadata;
        this.usage = usage;
    }

    /**
     * Get the id property: The identifier, which can be referenced in API endpoints.
     * 
     * @return the id value.
     */
    @Metadata(generated = true)
    public String getId() {
        return this.id;
    }

    /**
     * Get the object property: The object type, which is always `thread.run`.
     * 
     * @return the object value.
     */
    @Metadata(generated = true)
    public String getObject() {
        return this.object;
    }

    /**
     * Get the createdAt property: The Unix timestamp (in seconds) for when the run was created.
     * 
     * @return the createdAt value.
     */
    @Metadata(generated = true)
    public OffsetDateTime getCreatedAt() {
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.createdAt), ZoneOffset.UTC);
    }

    /**
     * Get the threadId property: The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of
     * this
     * run.
     * 
     * @return the threadId value.
     */
    @Metadata(generated = true)
    public String getThreadId() {
        return this.threadId;
    }

    /**
     * Get the assistantId property: The ID of the [assistant](/docs/api-reference/assistants) used for execution of
     * this run.
     * 
     * @return the assistantId value.
     */
    @Metadata(generated = true)
    public String getAssistantId() {
        return this.assistantId;
    }

    /**
     * Get the status property: The status of the run, which can be either `queued`, `in_progress`, `requires_action`,
     * `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
     * 
     * @return the status value.
     */
    @Metadata(generated = true)
    public RunObjectStatus getStatus() {
        return this.status;
    }

    /**
     * Get the requiredAction property: Details on the action required to continue the run. Will be `null` if no action
     * is
     * required.
     * 
     * @return the requiredAction value.
     */
    @Metadata(generated = true)
    public RunObjectRequiredAction getRequiredAction() {
        return this.requiredAction;
    }

    /**
     * Get the lastError property: The last error associated with this run. Will be `null` if there are no errors.
     * 
     * @return the lastError value.
     */
    @Metadata(generated = true)
    public RunObjectLastError getLastError() {
        return this.lastError;
    }

    /**
     * Get the expiresAt property: The Unix timestamp (in seconds) for when the run will expire.
     * 
     * @return the expiresAt value.
     */
    @Metadata(generated = true)
    public OffsetDateTime getExpiresAt() {
        if (this.expiresAt == null) {
            return null;
        }
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.expiresAt), ZoneOffset.UTC);
    }

    /**
     * Get the startedAt property: The Unix timestamp (in seconds) for when the run was started.
     * 
     * @return the startedAt value.
     */
    @Metadata(generated = true)
    public OffsetDateTime getStartedAt() {
        if (this.startedAt == null) {
            return null;
        }
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.startedAt), ZoneOffset.UTC);
    }

    /**
     * Get the cancelledAt property: The Unix timestamp (in seconds) for when the run was cancelled.
     * 
     * @return the cancelledAt value.
     */
    @Metadata(generated = true)
    public OffsetDateTime getCancelledAt() {
        if (this.cancelledAt == null) {
            return null;
        }
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.cancelledAt), ZoneOffset.UTC);
    }

    /**
     * Get the failedAt property: The Unix timestamp (in seconds) for when the run failed.
     * 
     * @return the failedAt value.
     */
    @Metadata(generated = true)
    public OffsetDateTime getFailedAt() {
        if (this.failedAt == null) {
            return null;
        }
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.failedAt), ZoneOffset.UTC);
    }

    /**
     * Get the completedAt property: The Unix timestamp (in seconds) for when the run was completed.
     * 
     * @return the completedAt value.
     */
    @Metadata(generated = true)
    public OffsetDateTime getCompletedAt() {
        if (this.completedAt == null) {
            return null;
        }
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.completedAt), ZoneOffset.UTC);
    }

    /**
     * Get the model property: The model that the [assistant](/docs/api-reference/assistants) used for this run.
     * 
     * @return the model value.
     */
    @Metadata(generated = true)
    public String getModel() {
        return this.model;
    }

    /**
     * Get the instructions property: The instructions that the [assistant](/docs/api-reference/assistants) used for
     * this run.
     * 
     * @return the instructions value.
     */
    @Metadata(generated = true)
    public String getInstructions() {
        return this.instructions;
    }

    /**
     * Get the tools property: The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
     * 
     * @return the tools value.
     */
    @Metadata(generated = true)
    public List<BinaryData> getTools() {
        return this.tools;
    }

    /**
     * Get the fileIds property: The list of [File](/docs/api-reference/files) IDs the
     * [assistant](/docs/api-reference/assistants) used for this run.
     * 
     * @return the fileIds value.
     */
    @Metadata(generated = true)
    public List<String> getFileIds() {
        return this.fileIds;
    }

    /**
     * Get the metadata property: Set of 16 key-value pairs that can be attached to an object. This can be useful for
     * storing
     * additional information about the object in a structured format. Keys can be a maximum of 64
     * characters long and values can be a maxium of 512 characters long.
     * 
     * @return the metadata value.
     */
    @Metadata(generated = true)
    public Map<String, String> getMetadata() {
        return this.metadata;
    }

    /**
     * Get the usage property: The usage property.
     * 
     * @return the usage value.
     */
    @Metadata(generated = true)
    public RunCompletionUsage getUsage() {
        return this.usage;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("object", this.object);
        jsonWriter.writeLongField("created_at", this.createdAt);
        jsonWriter.writeStringField("thread_id", this.threadId);
        jsonWriter.writeStringField("assistant_id", this.assistantId);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeJsonField("required_action", this.requiredAction);
        jsonWriter.writeJsonField("last_error", this.lastError);
        jsonWriter.writeNumberField("expires_at", this.expiresAt);
        jsonWriter.writeNumberField("started_at", this.startedAt);
        jsonWriter.writeNumberField("cancelled_at", this.cancelledAt);
        jsonWriter.writeNumberField("failed_at", this.failedAt);
        jsonWriter.writeNumberField("completed_at", this.completedAt);
        jsonWriter.writeStringField("model", this.model);
        jsonWriter.writeStringField("instructions", this.instructions);
        jsonWriter.writeArrayField("tools", this.tools, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeArrayField("file_ids", this.fileIds, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("usage", this.usage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RunObject from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RunObject if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RunObject.
     */
    @Metadata(generated = true)
    public static RunObject fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            OffsetDateTime createdAt = null;
            String threadId = null;
            String assistantId = null;
            RunObjectStatus status = null;
            RunObjectRequiredAction requiredAction = null;
            RunObjectLastError lastError = null;
            OffsetDateTime expiresAt = null;
            OffsetDateTime startedAt = null;
            OffsetDateTime cancelledAt = null;
            OffsetDateTime failedAt = null;
            OffsetDateTime completedAt = null;
            String model = null;
            String instructions = null;
            List<BinaryData> tools = null;
            List<String> fileIds = null;
            Map<String, String> metadata = null;
            RunCompletionUsage usage = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("created_at".equals(fieldName)) {
                    createdAt = OffsetDateTime.ofInstant(Instant.ofEpochSecond(reader.getLong()), ZoneOffset.UTC);
                } else if ("thread_id".equals(fieldName)) {
                    threadId = reader.getString();
                } else if ("assistant_id".equals(fieldName)) {
                    assistantId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    status = RunObjectStatus.fromString(reader.getString());
                } else if ("required_action".equals(fieldName)) {
                    requiredAction = RunObjectRequiredAction.fromJson(reader);
                } else if ("last_error".equals(fieldName)) {
                    lastError = RunObjectLastError.fromJson(reader);
                } else if ("expires_at".equals(fieldName)) {
                    Long expiresAtHolder = reader.getNullable(JsonReader::getLong);
                    if (expiresAtHolder != null) {
                        expiresAt = OffsetDateTime.ofInstant(Instant.ofEpochSecond(expiresAtHolder), ZoneOffset.UTC);
                    }
                } else if ("started_at".equals(fieldName)) {
                    Long startedAtHolder = reader.getNullable(JsonReader::getLong);
                    if (startedAtHolder != null) {
                        startedAt = OffsetDateTime.ofInstant(Instant.ofEpochSecond(startedAtHolder), ZoneOffset.UTC);
                    }
                } else if ("cancelled_at".equals(fieldName)) {
                    Long cancelledAtHolder = reader.getNullable(JsonReader::getLong);
                    if (cancelledAtHolder != null) {
                        cancelledAt
                            = OffsetDateTime.ofInstant(Instant.ofEpochSecond(cancelledAtHolder), ZoneOffset.UTC);
                    }
                } else if ("failed_at".equals(fieldName)) {
                    Long failedAtHolder = reader.getNullable(JsonReader::getLong);
                    if (failedAtHolder != null) {
                        failedAt = OffsetDateTime.ofInstant(Instant.ofEpochSecond(failedAtHolder), ZoneOffset.UTC);
                    }
                } else if ("completed_at".equals(fieldName)) {
                    Long completedAtHolder = reader.getNullable(JsonReader::getLong);
                    if (completedAtHolder != null) {
                        completedAt
                            = OffsetDateTime.ofInstant(Instant.ofEpochSecond(completedAtHolder), ZoneOffset.UTC);
                    }
                } else if ("model".equals(fieldName)) {
                    model = reader.getString();
                } else if ("instructions".equals(fieldName)) {
                    instructions = reader.getString();
                } else if ("tools".equals(fieldName)) {
                    tools = reader.readArray(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else if ("file_ids".equals(fieldName)) {
                    fileIds = reader.readArray(reader1 -> reader1.getString());
                } else if ("metadata".equals(fieldName)) {
                    metadata = reader.readMap(reader1 -> reader1.getString());
                } else if ("usage".equals(fieldName)) {
                    usage = RunCompletionUsage.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new RunObject(id, createdAt, threadId, assistantId, status, requiredAction, lastError, expiresAt,
                startedAt, cancelledAt, failedAt, completedAt, model, instructions, tools, fileIds, metadata, usage);
        });
    }
}
