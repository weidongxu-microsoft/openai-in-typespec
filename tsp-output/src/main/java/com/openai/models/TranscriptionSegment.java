// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Metadata;
import com.generic.core.annotation.TypeConditions;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;
import java.util.List;

/**
 * The TranscriptionSegment model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class TranscriptionSegment implements JsonSerializable<TranscriptionSegment> {
    /*
     * Unique identifier of the segment.
     */
    @Metadata(generated = true)
    private final long id;

    /*
     * Seek offset of the segment.
     */
    @Metadata(generated = true)
    private final long seek;

    /*
     * Start time of the segment in seconds.
     */
    @Metadata(generated = true)
    private final double start;

    /*
     * End time of the segment in seconds.
     */
    @Metadata(generated = true)
    private final double end;

    /*
     * Text content of the segment.
     */
    @Metadata(generated = true)
    private final String text;

    /*
     * Array of token IDs for the text content.
     */
    @Metadata(generated = true)
    private final List<Long> tokens;

    /*
     * Temperature parameter used for generating the segment.
     */
    @Metadata(generated = true)
    private final double temperature;

    /*
     * Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
     */
    @Metadata(generated = true)
    private final double avgLogprob;

    /*
     * Compression ratio of the segment. If the value is greater than 2.4, consider the compression
     * failed.
     */
    @Metadata(generated = true)
    private final double compressionRatio;

    /*
     * Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob`
     * is below -1, consider this segment silent.
     */
    @Metadata(generated = true)
    private final double noSpeechProb;

    /**
     * Creates an instance of TranscriptionSegment class.
     * 
     * @param id the id value to set.
     * @param seek the seek value to set.
     * @param start the start value to set.
     * @param end the end value to set.
     * @param text the text value to set.
     * @param tokens the tokens value to set.
     * @param temperature the temperature value to set.
     * @param avgLogprob the avgLogprob value to set.
     * @param compressionRatio the compressionRatio value to set.
     * @param noSpeechProb the noSpeechProb value to set.
     */
    @Metadata(generated = true)
    private TranscriptionSegment(long id, long seek, Duration start, Duration end, String text, List<Long> tokens,
        double temperature, double avgLogprob, double compressionRatio, double noSpeechProb) {
        this.id = id;
        this.seek = seek;
        if (start == null) {
            this.start = 0.0;
        } else {
            this.start = (double) start.toNanos() / 1000_000_000L;
        }
        if (end == null) {
            this.end = 0.0;
        } else {
            this.end = (double) end.toNanos() / 1000_000_000L;
        }
        this.text = text;
        this.tokens = tokens;
        this.temperature = temperature;
        this.avgLogprob = avgLogprob;
        this.compressionRatio = compressionRatio;
        this.noSpeechProb = noSpeechProb;
    }

    /**
     * Get the id property: Unique identifier of the segment.
     * 
     * @return the id value.
     */
    @Metadata(generated = true)
    public long getId() {
        return this.id;
    }

    /**
     * Get the seek property: Seek offset of the segment.
     * 
     * @return the seek value.
     */
    @Metadata(generated = true)
    public long getSeek() {
        return this.seek;
    }

    /**
     * Get the start property: Start time of the segment in seconds.
     * 
     * @return the start value.
     */
    @Metadata(generated = true)
    public Duration getStart() {
        return Duration.ofNanos((long) (this.start * 1000_000_000L));
    }

    /**
     * Get the end property: End time of the segment in seconds.
     * 
     * @return the end value.
     */
    @Metadata(generated = true)
    public Duration getEnd() {
        return Duration.ofNanos((long) (this.end * 1000_000_000L));
    }

    /**
     * Get the text property: Text content of the segment.
     * 
     * @return the text value.
     */
    @Metadata(generated = true)
    public String getText() {
        return this.text;
    }

    /**
     * Get the tokens property: Array of token IDs for the text content.
     * 
     * @return the tokens value.
     */
    @Metadata(generated = true)
    public List<Long> getTokens() {
        return this.tokens;
    }

    /**
     * Get the temperature property: Temperature parameter used for generating the segment.
     * 
     * @return the temperature value.
     */
    @Metadata(generated = true)
    public double getTemperature() {
        return this.temperature;
    }

    /**
     * Get the avgLogprob property: Average logprob of the segment. If the value is lower than -1, consider the logprobs
     * failed.
     * 
     * @return the avgLogprob value.
     */
    @Metadata(generated = true)
    public double getAvgLogprob() {
        return this.avgLogprob;
    }

    /**
     * Get the compressionRatio property: Compression ratio of the segment. If the value is greater than 2.4, consider
     * the compression
     * failed.
     * 
     * @return the compressionRatio value.
     */
    @Metadata(generated = true)
    public double getCompressionRatio() {
        return this.compressionRatio;
    }

    /**
     * Get the noSpeechProb property: Probability of no speech in the segment. If the value is higher than 1.0 and the
     * `avg_logprob`
     * is below -1, consider this segment silent.
     * 
     * @return the noSpeechProb value.
     */
    @Metadata(generated = true)
    public double getNoSpeechProb() {
        return this.noSpeechProb;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeLongField("id", this.id);
        jsonWriter.writeLongField("seek", this.seek);
        jsonWriter.writeDoubleField("start", this.start);
        jsonWriter.writeDoubleField("end", this.end);
        jsonWriter.writeStringField("text", this.text);
        jsonWriter.writeArrayField("tokens", this.tokens, (writer, element) -> writer.writeLong(element));
        jsonWriter.writeDoubleField("temperature", this.temperature);
        jsonWriter.writeDoubleField("avg_logprob", this.avgLogprob);
        jsonWriter.writeDoubleField("compression_ratio", this.compressionRatio);
        jsonWriter.writeDoubleField("no_speech_prob", this.noSpeechProb);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TranscriptionSegment from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TranscriptionSegment if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TranscriptionSegment.
     */
    @Metadata(generated = true)
    public static TranscriptionSegment fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            long id = 0L;
            long seek = 0L;
            Duration start = null;
            Duration end = null;
            String text = null;
            List<Long> tokens = null;
            double temperature = 0.0;
            double avgLogprob = 0.0;
            double compressionRatio = 0.0;
            double noSpeechProb = 0.0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getLong();
                } else if ("seek".equals(fieldName)) {
                    seek = reader.getLong();
                } else if ("start".equals(fieldName)) {
                    start = Duration.ofNanos((long) (reader.getDouble() * 1000_000_000L));
                } else if ("end".equals(fieldName)) {
                    end = Duration.ofNanos((long) (reader.getDouble() * 1000_000_000L));
                } else if ("text".equals(fieldName)) {
                    text = reader.getString();
                } else if ("tokens".equals(fieldName)) {
                    tokens = reader.readArray(reader1 -> reader1.getLong());
                } else if ("temperature".equals(fieldName)) {
                    temperature = reader.getDouble();
                } else if ("avg_logprob".equals(fieldName)) {
                    avgLogprob = reader.getDouble();
                } else if ("compression_ratio".equals(fieldName)) {
                    compressionRatio = reader.getDouble();
                } else if ("no_speech_prob".equals(fieldName)) {
                    noSpeechProb = reader.getDouble();
                } else {
                    reader.skipChildren();
                }
            }
            return new TranscriptionSegment(id, seek, start, end, text, tokens, temperature, avgLogprob,
                compressionRatio, noSpeechProb);
        });
    }
}
