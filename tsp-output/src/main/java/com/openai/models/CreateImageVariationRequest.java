// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Metadata;
import com.generic.core.annotation.TypeConditions;

/**
 * The CreateImageVariationRequest model.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class CreateImageVariationRequest {
    /*
     * The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB,
     * and square.
     */
    @Metadata(generated = true)
    private final ImageFileDetails image;

    /*
     * The model to use for image generation. Only `dall-e-2` is supported at this time.
     */
    @Metadata(generated = true)
    private CreateImageVariationRequestModel model;

    /*
     * The number of images to generate. Must be between 1 and 10.
     */
    @Metadata(generated = true)
    private Long n;

    /*
     * The format in which the generated images are returned. Must be one of `url` or `b64_json`.
     */
    @Metadata(generated = true)
    private CreateImageVariationRequestResponseFormat responseFormat;

    /*
     * The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
     */
    @Metadata(generated = true)
    private CreateImageVariationRequestSize size;

    /*
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect
     * abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     */
    @Metadata(generated = true)
    private String user;

    /**
     * Creates an instance of CreateImageVariationRequest class.
     * 
     * @param image the image value to set.
     */
    @Metadata(generated = true)
    public CreateImageVariationRequest(ImageFileDetails image) {
        this.image = image;
    }

    /**
     * Get the image property: The image to use as the basis for the variation(s). Must be a valid PNG file, less than
     * 4MB,
     * and square.
     * 
     * @return the image value.
     */
    @Metadata(generated = true)
    public ImageFileDetails getImage() {
        return this.image;
    }

    /**
     * Get the model property: The model to use for image generation. Only `dall-e-2` is supported at this time.
     * 
     * @return the model value.
     */
    @Metadata(generated = true)
    public CreateImageVariationRequestModel getModel() {
        return this.model;
    }

    /**
     * Set the model property: The model to use for image generation. Only `dall-e-2` is supported at this time.
     * 
     * @param model the model value to set.
     * @return the CreateImageVariationRequest object itself.
     */
    @Metadata(generated = true)
    public CreateImageVariationRequest setModel(CreateImageVariationRequestModel model) {
        this.model = model;
        return this;
    }

    /**
     * Get the n property: The number of images to generate. Must be between 1 and 10.
     * 
     * @return the n value.
     */
    @Metadata(generated = true)
    public Long getN() {
        return this.n;
    }

    /**
     * Set the n property: The number of images to generate. Must be between 1 and 10.
     * 
     * @param n the n value to set.
     * @return the CreateImageVariationRequest object itself.
     */
    @Metadata(generated = true)
    public CreateImageVariationRequest setN(Long n) {
        this.n = n;
        return this;
    }

    /**
     * Get the responseFormat property: The format in which the generated images are returned. Must be one of `url` or
     * `b64_json`.
     * 
     * @return the responseFormat value.
     */
    @Metadata(generated = true)
    public CreateImageVariationRequestResponseFormat getResponseFormat() {
        return this.responseFormat;
    }

    /**
     * Set the responseFormat property: The format in which the generated images are returned. Must be one of `url` or
     * `b64_json`.
     * 
     * @param responseFormat the responseFormat value to set.
     * @return the CreateImageVariationRequest object itself.
     */
    @Metadata(generated = true)
    public CreateImageVariationRequest setResponseFormat(CreateImageVariationRequestResponseFormat responseFormat) {
        this.responseFormat = responseFormat;
        return this;
    }

    /**
     * Get the size property: The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
     * 
     * @return the size value.
     */
    @Metadata(generated = true)
    public CreateImageVariationRequestSize getSize() {
        return this.size;
    }

    /**
     * Set the size property: The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
     * 
     * @param size the size value to set.
     * @return the CreateImageVariationRequest object itself.
     */
    @Metadata(generated = true)
    public CreateImageVariationRequest setSize(CreateImageVariationRequestSize size) {
        this.size = size;
        return this;
    }

    /**
     * Get the user property: A unique identifier representing your end-user, which can help OpenAI to monitor and
     * detect
     * abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     * 
     * @return the user value.
     */
    @Metadata(generated = true)
    public String getUser() {
        return this.user;
    }

    /**
     * Set the user property: A unique identifier representing your end-user, which can help OpenAI to monitor and
     * detect
     * abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     * 
     * @param user the user value to set.
     * @return the CreateImageVariationRequest object itself.
     */
    @Metadata(generated = true)
    public CreateImageVariationRequest setUser(String user) {
        this.user = user;
        return this;
    }
}
