// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Metadata;
import com.generic.core.annotation.TypeConditions;
import com.generic.core.models.BinaryData;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The CreateThreadAndRunRequest model.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class CreateThreadAndRunRequest implements JsonSerializable<CreateThreadAndRunRequest> {
    /*
     * The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
     */
    @Metadata(generated = true)
    private final String assistantId;

    /*
     * If no thread is provided, an empty thread will be created.
     */
    @Metadata(generated = true)
    private CreateThreadRequest thread;

    /*
     * The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is
     * provided here, it will override the model associated with the assistant. If not, the model
     * associated with the assistant will be used.
     */
    @Metadata(generated = true)
    private String model;

    /*
     * Override the default system message of the assistant. This is useful for modifying the behavior
     * on a per-run basis.
     */
    @Metadata(generated = true)
    private String instructions;

    /*
     * Override the tools the assistant can use for this run. This is useful for modifying the
     * behavior on a per-run basis.
     */
    @Metadata(generated = true)
    private List<BinaryData> tools;

    /*
     * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
     * additional information about the object in a structured format. Keys can be a maximum of 64
     * characters long and values can be a maxium of 512 characters long.
     */
    @Metadata(generated = true)
    private Map<String, String> metadata;

    /**
     * Creates an instance of CreateThreadAndRunRequest class.
     * 
     * @param assistantId the assistantId value to set.
     */
    @Metadata(generated = true)
    public CreateThreadAndRunRequest(String assistantId) {
        this.assistantId = assistantId;
    }

    /**
     * Get the assistantId property: The ID of the [assistant](/docs/api-reference/assistants) to use to execute this
     * run.
     * 
     * @return the assistantId value.
     */
    @Metadata(generated = true)
    public String getAssistantId() {
        return this.assistantId;
    }

    /**
     * Get the thread property: If no thread is provided, an empty thread will be created.
     * 
     * @return the thread value.
     */
    @Metadata(generated = true)
    public CreateThreadRequest getThread() {
        return this.thread;
    }

    /**
     * Set the thread property: If no thread is provided, an empty thread will be created.
     * 
     * @param thread the thread value to set.
     * @return the CreateThreadAndRunRequest object itself.
     */
    @Metadata(generated = true)
    public CreateThreadAndRunRequest setThread(CreateThreadRequest thread) {
        this.thread = thread;
        return this;
    }

    /**
     * Get the model property: The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a
     * value is
     * provided here, it will override the model associated with the assistant. If not, the model
     * associated with the assistant will be used.
     * 
     * @return the model value.
     */
    @Metadata(generated = true)
    public String getModel() {
        return this.model;
    }

    /**
     * Set the model property: The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a
     * value is
     * provided here, it will override the model associated with the assistant. If not, the model
     * associated with the assistant will be used.
     * 
     * @param model the model value to set.
     * @return the CreateThreadAndRunRequest object itself.
     */
    @Metadata(generated = true)
    public CreateThreadAndRunRequest setModel(String model) {
        this.model = model;
        return this;
    }

    /**
     * Get the instructions property: Override the default system message of the assistant. This is useful for modifying
     * the behavior
     * on a per-run basis.
     * 
     * @return the instructions value.
     */
    @Metadata(generated = true)
    public String getInstructions() {
        return this.instructions;
    }

    /**
     * Set the instructions property: Override the default system message of the assistant. This is useful for modifying
     * the behavior
     * on a per-run basis.
     * 
     * @param instructions the instructions value to set.
     * @return the CreateThreadAndRunRequest object itself.
     */
    @Metadata(generated = true)
    public CreateThreadAndRunRequest setInstructions(String instructions) {
        this.instructions = instructions;
        return this;
    }

    /**
     * Get the tools property: Override the tools the assistant can use for this run. This is useful for modifying the
     * behavior on a per-run basis.
     * 
     * @return the tools value.
     */
    @Metadata(generated = true)
    public List<BinaryData> getTools() {
        return this.tools;
    }

    /**
     * Set the tools property: Override the tools the assistant can use for this run. This is useful for modifying the
     * behavior on a per-run basis.
     * 
     * @param tools the tools value to set.
     * @return the CreateThreadAndRunRequest object itself.
     */
    @Metadata(generated = true)
    public CreateThreadAndRunRequest setTools(List<BinaryData> tools) {
        this.tools = tools;
        return this;
    }

    /**
     * Get the metadata property: Set of 16 key-value pairs that can be attached to an object. This can be useful for
     * storing
     * additional information about the object in a structured format. Keys can be a maximum of 64
     * characters long and values can be a maxium of 512 characters long.
     * 
     * @return the metadata value.
     */
    @Metadata(generated = true)
    public Map<String, String> getMetadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Set of 16 key-value pairs that can be attached to an object. This can be useful for
     * storing
     * additional information about the object in a structured format. Keys can be a maximum of 64
     * characters long and values can be a maxium of 512 characters long.
     * 
     * @param metadata the metadata value to set.
     * @return the CreateThreadAndRunRequest object itself.
     */
    @Metadata(generated = true)
    public CreateThreadAndRunRequest setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("assistant_id", this.assistantId);
        jsonWriter.writeJsonField("thread", this.thread);
        jsonWriter.writeStringField("model", this.model);
        jsonWriter.writeStringField("instructions", this.instructions);
        jsonWriter.writeArrayField("tools", this.tools, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateThreadAndRunRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateThreadAndRunRequest if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateThreadAndRunRequest.
     */
    @Metadata(generated = true)
    public static CreateThreadAndRunRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String assistantId = null;
            CreateThreadRequest thread = null;
            String model = null;
            String instructions = null;
            List<BinaryData> tools = null;
            Map<String, String> metadata = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("assistant_id".equals(fieldName)) {
                    assistantId = reader.getString();
                } else if ("thread".equals(fieldName)) {
                    thread = CreateThreadRequest.fromJson(reader);
                } else if ("model".equals(fieldName)) {
                    model = reader.getString();
                } else if ("instructions".equals(fieldName)) {
                    instructions = reader.getString();
                } else if ("tools".equals(fieldName)) {
                    tools = reader.readArray(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else if ("metadata".equals(fieldName)) {
                    metadata = reader.readMap(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            CreateThreadAndRunRequest deserializedCreateThreadAndRunRequest
                = new CreateThreadAndRunRequest(assistantId);
            deserializedCreateThreadAndRunRequest.thread = thread;
            deserializedCreateThreadAndRunRequest.model = model;
            deserializedCreateThreadAndRunRequest.instructions = instructions;
            deserializedCreateThreadAndRunRequest.tools = tools;
            deserializedCreateThreadAndRunRequest.metadata = metadata;

            return deserializedCreateThreadAndRunRequest;
        });
    }
}
