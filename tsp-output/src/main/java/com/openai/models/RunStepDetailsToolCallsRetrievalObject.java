// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Metadata;
import com.generic.core.annotation.TypeConditions;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;

/**
 * The RunStepDetailsToolCallsRetrievalObject model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class RunStepDetailsToolCallsRetrievalObject
    implements JsonSerializable<RunStepDetailsToolCallsRetrievalObject> {
    /*
     * The ID of the tool call object.
     */
    @Metadata(generated = true)
    private final String id;

    /*
     * The type of tool call. This is always going to be `retrieval` for this type of tool call.
     */
    @Metadata(generated = true)
    private final String type = "retrieval";

    /*
     * For now, this is always going to be an empty object.
     */
    @Metadata(generated = true)
    private final RunStepDetailsToolCallsRetrievalObjectRetrieval retrieval;

    /**
     * Creates an instance of RunStepDetailsToolCallsRetrievalObject class.
     * 
     * @param id the id value to set.
     * @param retrieval the retrieval value to set.
     */
    @Metadata(generated = true)
    private RunStepDetailsToolCallsRetrievalObject(String id,
        RunStepDetailsToolCallsRetrievalObjectRetrieval retrieval) {
        this.id = id;
        this.retrieval = retrieval;
    }

    /**
     * Get the id property: The ID of the tool call object.
     * 
     * @return the id value.
     */
    @Metadata(generated = true)
    public String getId() {
        return this.id;
    }

    /**
     * Get the type property: The type of tool call. This is always going to be `retrieval` for this type of tool call.
     * 
     * @return the type value.
     */
    @Metadata(generated = true)
    public String getType() {
        return this.type;
    }

    /**
     * Get the retrieval property: For now, this is always going to be an empty object.
     * 
     * @return the retrieval value.
     */
    @Metadata(generated = true)
    public RunStepDetailsToolCallsRetrievalObjectRetrieval getRetrieval() {
        return this.retrieval;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeJsonField("retrieval", this.retrieval);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RunStepDetailsToolCallsRetrievalObject from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RunStepDetailsToolCallsRetrievalObject if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RunStepDetailsToolCallsRetrievalObject.
     */
    @Metadata(generated = true)
    public static RunStepDetailsToolCallsRetrievalObject fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            RunStepDetailsToolCallsRetrievalObjectRetrieval retrieval = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("retrieval".equals(fieldName)) {
                    retrieval = RunStepDetailsToolCallsRetrievalObjectRetrieval.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new RunStepDetailsToolCallsRetrievalObject(id, retrieval);
        });
    }
}
