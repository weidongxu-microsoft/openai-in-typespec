// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Metadata;
import com.generic.core.annotation.TypeConditions;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The ChatCompletionRequestAssistantMessage model.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class ChatCompletionRequestAssistantMessage
    implements JsonSerializable<ChatCompletionRequestAssistantMessage> {
    /*
     * The contents of the assistant message. Required unless `tool_calls` or `function_call` is'
     * specified.
     */
    @Metadata(generated = true)
    private String content;

    /*
     * The role of the messages author, in this case `assistant`.
     */
    @Metadata(generated = true)
    private final String role = "assistant";

    /*
     * An optional name for the participant. Provides the model information to differentiate between
     * participants of the same role.
     */
    @Metadata(generated = true)
    private String name;

    /*
     * The tool_calls property.
     */
    @Metadata(generated = true)
    private List<ChatCompletionMessageToolCall> toolCalls;

    /*
     * Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be
     * called, as generated by the model.
     */
    @Metadata(generated = true)
    private ChatCompletionRequestAssistantMessageFunctionCall functionCall;

    /**
     * Creates an instance of ChatCompletionRequestAssistantMessage class.
     */
    @Metadata(generated = true)
    public ChatCompletionRequestAssistantMessage() {
    }

    /**
     * Get the content property: The contents of the assistant message. Required unless `tool_calls` or `function_call`
     * is'
     * specified.
     * 
     * @return the content value.
     */
    @Metadata(generated = true)
    public String getContent() {
        return this.content;
    }

    /**
     * Set the content property: The contents of the assistant message. Required unless `tool_calls` or `function_call`
     * is'
     * specified.
     * 
     * @param content the content value to set.
     * @return the ChatCompletionRequestAssistantMessage object itself.
     */
    @Metadata(generated = true)
    public ChatCompletionRequestAssistantMessage setContent(String content) {
        this.content = content;
        return this;
    }

    /**
     * Get the role property: The role of the messages author, in this case `assistant`.
     * 
     * @return the role value.
     */
    @Metadata(generated = true)
    public String getRole() {
        return this.role;
    }

    /**
     * Get the name property: An optional name for the participant. Provides the model information to differentiate
     * between
     * participants of the same role.
     * 
     * @return the name value.
     */
    @Metadata(generated = true)
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: An optional name for the participant. Provides the model information to differentiate
     * between
     * participants of the same role.
     * 
     * @param name the name value to set.
     * @return the ChatCompletionRequestAssistantMessage object itself.
     */
    @Metadata(generated = true)
    public ChatCompletionRequestAssistantMessage setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the toolCalls property: The tool_calls property.
     * 
     * @return the toolCalls value.
     */
    @Metadata(generated = true)
    public List<ChatCompletionMessageToolCall> getToolCalls() {
        return this.toolCalls;
    }

    /**
     * Set the toolCalls property: The tool_calls property.
     * 
     * @param toolCalls the toolCalls value to set.
     * @return the ChatCompletionRequestAssistantMessage object itself.
     */
    @Metadata(generated = true)
    public ChatCompletionRequestAssistantMessage setToolCalls(List<ChatCompletionMessageToolCall> toolCalls) {
        this.toolCalls = toolCalls;
        return this;
    }

    /**
     * Get the functionCall property: Deprecated and replaced by `tool_calls`. The name and arguments of a function that
     * should be
     * called, as generated by the model.
     * 
     * @return the functionCall value.
     */
    @Metadata(generated = true)
    public ChatCompletionRequestAssistantMessageFunctionCall getFunctionCall() {
        return this.functionCall;
    }

    /**
     * Set the functionCall property: Deprecated and replaced by `tool_calls`. The name and arguments of a function that
     * should be
     * called, as generated by the model.
     * 
     * @param functionCall the functionCall value to set.
     * @return the ChatCompletionRequestAssistantMessage object itself.
     */
    @Metadata(generated = true)
    public ChatCompletionRequestAssistantMessage
        setFunctionCall(ChatCompletionRequestAssistantMessageFunctionCall functionCall) {
        this.functionCall = functionCall;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("role", this.role);
        jsonWriter.writeStringField("content", this.content);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("tool_calls", this.toolCalls, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("function_call", this.functionCall);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatCompletionRequestAssistantMessage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatCompletionRequestAssistantMessage if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChatCompletionRequestAssistantMessage.
     */
    @Metadata(generated = true)
    public static ChatCompletionRequestAssistantMessage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String content = null;
            String name = null;
            List<ChatCompletionMessageToolCall> toolCalls = null;
            ChatCompletionRequestAssistantMessageFunctionCall functionCall = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("content".equals(fieldName)) {
                    content = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("tool_calls".equals(fieldName)) {
                    toolCalls = reader.readArray(reader1 -> ChatCompletionMessageToolCall.fromJson(reader1));
                } else if ("function_call".equals(fieldName)) {
                    functionCall = ChatCompletionRequestAssistantMessageFunctionCall.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            ChatCompletionRequestAssistantMessage deserializedChatCompletionRequestAssistantMessage
                = new ChatCompletionRequestAssistantMessage();
            deserializedChatCompletionRequestAssistantMessage.content = content;
            deserializedChatCompletionRequestAssistantMessage.name = name;
            deserializedChatCompletionRequestAssistantMessage.toolCalls = toolCalls;
            deserializedChatCompletionRequestAssistantMessage.functionCall = functionCall;

            return deserializedChatCompletionRequestAssistantMessage;
        });
    }
}
