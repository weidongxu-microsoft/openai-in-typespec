// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Metadata;
import com.generic.core.annotation.TypeConditions;
import com.generic.core.models.BinaryData;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The RunStepDetailsToolCallsCodeObjectCodeInterpreter model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class RunStepDetailsToolCallsCodeObjectCodeInterpreter
    implements JsonSerializable<RunStepDetailsToolCallsCodeObjectCodeInterpreter> {
    /*
     * The input to the Code Interpreter tool call.
     */
    @Metadata(generated = true)
    private final String input;

    /*
     * The outputs from the Code Interpreter tool call. Code Interpreter can output one or more
     * items, including text (`logs`) or images (`image`). Each of these are represented by a
     * different object type.
     */
    @Metadata(generated = true)
    private final List<BinaryData> outputs;

    /**
     * Creates an instance of RunStepDetailsToolCallsCodeObjectCodeInterpreter class.
     * 
     * @param input the input value to set.
     * @param outputs the outputs value to set.
     */
    @Metadata(generated = true)
    private RunStepDetailsToolCallsCodeObjectCodeInterpreter(String input, List<BinaryData> outputs) {
        this.input = input;
        this.outputs = outputs;
    }

    /**
     * Get the input property: The input to the Code Interpreter tool call.
     * 
     * @return the input value.
     */
    @Metadata(generated = true)
    public String getInput() {
        return this.input;
    }

    /**
     * Get the outputs property: The outputs from the Code Interpreter tool call. Code Interpreter can output one or
     * more
     * items, including text (`logs`) or images (`image`). Each of these are represented by a
     * different object type.
     * 
     * @return the outputs value.
     */
    @Metadata(generated = true)
    public List<BinaryData> getOutputs() {
        return this.outputs;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("input", this.input);
        jsonWriter.writeArrayField("outputs", this.outputs, (writer, element) -> writer.writeUntyped(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RunStepDetailsToolCallsCodeObjectCodeInterpreter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RunStepDetailsToolCallsCodeObjectCodeInterpreter if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RunStepDetailsToolCallsCodeObjectCodeInterpreter.
     */
    @Metadata(generated = true)
    public static RunStepDetailsToolCallsCodeObjectCodeInterpreter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String input = null;
            List<BinaryData> outputs = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("input".equals(fieldName)) {
                    input = reader.getString();
                } else if ("outputs".equals(fieldName)) {
                    outputs = reader.readArray(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else {
                    reader.skipChildren();
                }
            }
            return new RunStepDetailsToolCallsCodeObjectCodeInterpreter(input, outputs);
        });
    }
}
